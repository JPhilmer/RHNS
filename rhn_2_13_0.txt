settings
{
	main
	{
		Description: "[RUN\\HIDE AND SEEK ♣ 2.13.0 : 214Z1 - Philmer#2681]  For the [3D]view to [FPS]view it's Crouch+Interact(CTRL+F)  Press RELOAD + MELEE to know what do your character  JOIN MVC !  Don't use unfair spot!  /!\\ Friends have priority /!\\"
	}

	lobby
	{
		Match Voice Chat: Enabled
		Max Spectators: 12
		Max Team 1 Players: 6
		Max Team 2 Players: 2
		Return To Lobby: Never
		Swap Teams After Match: No
		Use Experimental Update If Available: Yes
	}

	modes
	{
		Elimination
		{
			enabled maps
			{
				Ayutthaya
				Lijiang Control Center Lunar New Year
				Lijiang Garden Lunar New Year
				Lijiang Night Market Lunar New Year
				Necropolis
				Nepal Sanctum
				Nepal Shrine
				Nepal Village
				Oasis City Center
				Oasis Gardens
				Oasis University
			}
		}

		General
		{
			Capture Objective Tiebreaker: Off
			Draw After Match Time Elapsed With No Tiebreaker: 200
			Enemy Health Bars: Off
			Game Mode Start: Manual
			Hero Limit: 2 Per Team
			Limited Choice Pool: Team Size
			Respawn Time Scalar: 0%
			Reveal Heroes After Match Time Elapsed: 170
			Score To Win: 4
			Spawn Health Packs: Disabled
		}
	}

	heroes
	{
		Team 1
		{
			Baptiste
			{
				Damage Dealt: 10%
				Damage Received: 500%
				Healing Dealt: 10%
				Healing Received: 10%
				Health: 333%
				Immortality Field Cooldown Time: 40%
				Jump Vertical Speed: 230%
				Movement Gravity: 135%
				Movement Speed: 230%
				No Ammunition Requirement: On
				Projectile Speed: 500%
				Regenerative Burst Cooldown Time: 7%
				Ultimate Generation - Combat Amplification Matrix: 500%
				Ultimate Generation - Passive Amplification Matrix: 500%
				Ultimate Generation Amplification Matrix: 500%
			}

			Bastion
			{
				Configuration: Tank Weapon Knockback Scalar: 70%
				Damage Dealt: 10%
				Damage Received: 500%
				Healing Dealt: 140%
				Healing Received: 10%
				Health: 222%
				Jump Vertical Speed: 220%
				Movement Gravity: 135%
				Movement Speed: 230%
				No Ammunition Requirement: On
				Spawn With Ultimate Ready: On
				Ultimate Duration: 187%
				Ultimate Generation - Combat Configuration: Tank: 500%
				Ultimate Generation - Passive Configuration: Tank: 500%
				Ultimate Generation Configuration: Tank: 500%
			}

			Brigitte
			{
				Barrier Shield Cooldown Time: 55%
				Barrier Shield Recharge Rate: 280%
				Damage Dealt: 10%
				Damage Received: 444%
				Healing Dealt: 10%
				Healing Received: 10%
				Health: 333%
				Jump Vertical Speed: 230%
				Movement Gravity: 135%
				Movement Speed: 230%
				Repair Pack Cooldown Time: 0%
				Shield Bash: Off
				Shield Bash Knockback Scalar: 25%
				Ultimate Generation - Combat Rally: 280%
				Ultimate Generation - Passive Rally: 280%
				Ultimate Generation Rally: 280%
				Whip Shot Cooldown Time: 255%
				Whip Shot Knockback Scalar: 155%
			}

			Reinhardt
			{
				Barrier Field Cooldown Time: 500%
				Charge Cooldown Time: 0%
				Charge Knockback Scalar: 0%
				Damage Dealt: 10%
				Damage Received: 500%
				Fire Strike Cooldown Time: 55%
				Healing Received: 10%
				Health: 121%
				Jump Vertical Speed: 235%
				Movement Gravity: 135%
				Movement Speed: 230%
				Projectile Speed: 500%
				Ultimate Generation - Passive Earthshatter: 280%
				Ultimate Generation Earthshatter: 280%
			}

			Roadhog
			{
				Chain Hook Cooldown Time: 200%
				Damage Dealt: 10%
				Damage Received: 300%
				Healing Dealt: 10%
				Healing Received: 10%
				Health: 111%
				Jump Vertical Speed: 210%
				Movement Gravity: 135%
				Movement Speed: 230%
				No Ammunition Requirement: On
				Take a Breather: Off
				Ultimate Ability Whole Hog: Off
			}

			Sigma
			{
				Accretion Cooldown Time: 55%
				Damage Dealt: 200%
				Damage Received: 500%
				Experimental Barrier: Off
				Health: 166%
				Jump Vertical Speed: 235%
				Kinetic Grasp Cooldown Time: 55%
				Movement Gravity: 135%
				Movement Speed: 230%
				Projectile Speed: 500%
				Ultimate Generation - Combat Gravitic Flux: 287%
				Ultimate Generation - Passive Gravitic Flux: 287%
				Ultimate Generation Gravitic Flux: 287%
			}

			Soldier: 76
			{
				Biotic Field Cooldown Time: 0%
				Damage Dealt: 10%
				Damage Received: 500%
				Healing Dealt: 10%
				Healing Received: 10%
				Health: 333%
				Helix Rockets Cooldown Time: 70%
				Helix Rockets Knockback Scalar: 155%
				Jump Vertical Speed: 230%
				Movement Gravity: 135%
				Movement Speed: 230%
				No Ammunition Requirement: On
				Projectile Speed: 500%
				Sprint: Off
				Ultimate Duration: 201%
				Ultimate Generation - Combat Tactical Visor: 407%
				Ultimate Generation - Passive Tactical Visor: 407%
				Ultimate Generation Tactical Visor: 407%
			}

			Zarya
			{
				Ammunition Clip Size Scalar: 50%
				Damage Dealt: 10%
				Damage Received: 500%
				Healing Received: 10%
				Health: 166%
				Jump Vertical Speed: 220%
				Movement Gravity: 135%
				Movement Speed: 230%
				Particle Cannon Secondary Knockback Scalar: 140%
				Projected Barrier Cooldown Time: 62%
				Projectile Speed: 500%
				Ultimate Generation - Combat Graviton Surge: 328%
				Ultimate Generation - Passive Graviton Surge: 355%
				Ultimate Generation Graviton Surge: 280%
			}
		}

		Team 2
		{
			Baptiste
			{
				Damage Dealt: 10%
				Damage Received: 500%
				Healing Dealt: 10%
				Healing Received: 10%
				Immortality Field Cooldown Time: 40%
				Jump Vertical Speed: 230%
				Movement Gravity: 135%
				No Ammunition Requirement: On
				Regenerative Burst Cooldown Time: 7%
				Ultimate Generation - Combat Amplification Matrix: 500%
				Ultimate Generation - Passive Amplification Matrix: 500%
				Ultimate Generation Amplification Matrix: 500%
			}

			Bastion
			{
				Configuration: Tank Weapon Knockback Scalar: 70%
				Damage Dealt: 10%
				Healing Received: 10%
				Health: 222%
				Jump Vertical Speed: 220%
				Spawn With Ultimate Ready: On
				Ultimate Duration: 187%
				Ultimate Generation - Combat Configuration: Tank: 500%
				Ultimate Generation - Passive Configuration: Tank: 500%
				Ultimate Generation Configuration: Tank: 500%
			}

			Brigitte
			{
				Barrier Shield Cooldown Time: 55%
				Barrier Shield Recharge Rate: 280%
				Damage Dealt: 10%
				Damage Received: 444%
				Healing Dealt: 10%
				Healing Received: 10%
				Jump Vertical Speed: 230%
				Repair Pack Cooldown Time: 0%
				Shield Bash: Off
				Shield Bash Knockback Scalar: 25%
				Whip Shot Cooldown Time: 255%
				Whip Shot Knockback Scalar: 155%
			}

			Reinhardt
			{
				Barrier Field Cooldown Time: 500%
				Barrier Field Recharge Rate: 500%
				Charge Cooldown Time: 0%
				Charge Knockback Scalar: 300%
				Damage Dealt: 181%
				Damage Received: 14%
				Fire Strike Cooldown Time: 83%
				Healing Received: 10%
				Health: 500%
				Jump Vertical Speed: 230%
				Movement Gravity: 135%
				Movement Speed: 210%
				Projectile Speed: 207%
				Ultimate Ability Earthshatter: Off
			}

			Roadhog
			{
				Chain Hook Cooldown Time: 62%
				Damage Dealt: 240%
				Damage Received: 10%
				Healing Dealt: 10%
				Healing Received: 500%
				Health: 500%
				Jump Vertical Speed: 230%
				Movement Gravity: 135%
				Movement Speed: 210%
				No Ammunition Requirement: On
				Primary Fire: Off
				Projectile Speed: 0%
				Secondary Fire: Off
				Take a Breather Cooldown Time: 62%
				Ultimate Ability Whole Hog: Off
			}

			Sigma
			{
				Accretion Cooldown Time: 55%
				Damage Dealt: 200%
				Damage Received: 14%
				Experimental Barrier: Off
				Healing Received: 10%
				Health: 500%
				Jump Vertical Speed: 200%
				Kinetic Grasp Cooldown Time: 28%
				Movement Gravity: 135%
				Movement Speed: 210%
				Primary Fire: Off
				Projectile Speed: 133%
				Ultimate Generation - Combat Gravitic Flux: 75%
				Ultimate Generation - Passive Gravitic Flux: 0%
			}

			Soldier: 76
			{
				Biotic Field Cooldown Time: 0%
				Jump Vertical Speed: 230%
				Ultimate Duration: 201%
				Ultimate Generation - Combat Tactical Visor: 407%
				Ultimate Generation - Passive Tactical Visor: 407%
				Ultimate Generation Tactical Visor: 407%
			}

			Zarya
			{
				Ammunition Clip Size Scalar: 25%
				Damage Dealt: 10%
				Damage Received: 500%
				Healing Received: 10%
				Health: 166%
				Jump Vertical Speed: 215%
				Movement Gravity: 135%
				Movement Speed: 230%
				Particle Cannon Secondary Knockback Scalar: 130%
				Projected Barrier Cooldown Time: 62%
				Projectile Speed: 500%
				Ultimate Generation - Combat Graviton Surge: 328%
				Ultimate Generation - Passive Graviton Surge: 355%
				Ultimate Generation Graviton Surge: 280%
			}

			enabled heroes
			{
				Reinhardt
				Roadhog
				Sigma
			}
		}

		General
		{
			Ana
			{
				Biotic Grenade Cooldown Time: 55%
				Damage Dealt: 10%
				Damage Received: 500%
				Healing Dealt: 10%
				Healing Received: 10%
				Health: 333%
				Jump Vertical Speed: 200%
				Movement Gravity: 135%
				Movement Speed: 230%
				No Ammunition Requirement: On
				Projectile Speed: 150%
				Sleep Dart Cooldown Time: 120%
				Ultimate Generation - Combat Nano Boost: 55%
				Ultimate Generation - Passive Nano Boost: 500%
				Ultimate Generation Nano Boost: 500%
			}

			Ashe
			{
				Coach Gun Knockback Scalar Enemy: 155%
				Coach Gun Knockback Scalar Self: 155%
				Damage Dealt: 10%
				Damage Received: 500%
				Dynamite Cooldown Time: 28%
				Dynamite Fuse Time Scalar: 55%
				Healing Received: 10%
				Health: 333%
				Jump Vertical Speed: 240%
				Movement Gravity: 135%
				Movement Speed: 230%
				No Ammunition Requirement: On
				Ultimate Duration: 280%
				Ultimate Generation - Combat B.O.B.: 500%
				Ultimate Generation - Passive B.O.B.: 500%
				Ultimate Generation B.O.B.: 500%
			}

			D.Va
			{
				Damage Dealt: 10%
				Damage Received: 500%
				Healing Received: 10%
				Health: 444%
				Jump Vertical Speed: 287%
				Movement Gravity: 135%
				Movement Speed: 230%
				Projectile Speed: 500%
				Spawn Without Mech: On
				Ultimate Ability Self-Destruct: Off
			}

			Doomfist
			{
				Damage Dealt: 10%
				Damage Received: 500%
				Healing Received: 10%
				Health: 266%
				Jump Vertical Speed: 230%
				Meteor Strike Knockback Scalar: 155%
				Movement Gravity: 130%
				Movement Speed: 230%
				No Ammunition Requirement: On
				Projectile Speed: 500%
				Rising Uppercut Cooldown Time: 66%
				Rising Uppercut Knockback Scalar: 194%
				Rocket Punch: Off
				Rocket Punch Knockback Scalar: 116%
				Seismic Slam Cooldown Time: 167%
				Ultimate Ability Meteor Strike: Off
				Ultimate Duration: 55%
			}

			Echo
			{
				Damage Dealt: 10%
				Damage Received: 500%
				Flight Cooldown Time: 167%
				Focusing Beam: Off
				Glide: Off
				Healing Received: 10%
				Health: 333%
				Jump Vertical Speed: 233%
				Movement Gravity: 130%
				Movement Speed: 230%
				Primary Fire: Off
				Projectile Speed: 500%
				Ultimate Generation - Combat Duplicate: 355%
				Ultimate Generation - Passive Duplicate: 355%
				Ultimate Generation Duplicate: 355%
			}

			Genji
			{
				Damage Dealt: 10%
				Damage Received: 500%
				Deflect Cooldown Time: 87%
				Healing Received: 10%
				Health: 333%
				Jump Vertical Speed: 135%
				Movement Gravity: 135%
				Movement Speed: 210%
				No Ammunition Requirement: On
				Projectile Speed: 500%
				Swift Strike Cooldown Time: 188%
				Ultimate Duration: 28%
				Ultimate Generation - Combat Dragonblade: 255%
				Ultimate Generation - Passive Dragonblade: 328%
				Ultimate Generation Dragonblade: 255%
			}

			Hanzo
			{
				Damage Dealt: 10%
				Damage Received: 500%
				Healing Received: 10%
				Health: 333%
				Jump Vertical Speed: 240%
				Lunge Cooldown Time: 140%
				Lunge Distance Scalar: 194%
				Movement Gravity: 135%
				Movement Speed: 230%
				Projectile Speed: 500%
				Sonic Arrow Cooldown Time: 28%
				Spawn With Ultimate Ready: On
				Storm Arrows Cooldown Time: 55%
				Storm Arrows Quantity: 4
				Ultimate Generation - Combat Dragonstrike: 328%
				Ultimate Generation - Passive Dragonstrike: 355%
				Ultimate Generation Dragonstrike: 355%
			}

			Junkrat
			{
				Concussion Mine Cooldown Time: 120%
				Concussion Mine Knockback Scalar: 50%
				Damage Dealt: 10%
				Damage Received: 500%
				Frag Launcher Knockback Scalar: 400%
				Healing Received: 10%
				Health: 333%
				Infinite Ultimate Duration: On
				Jump Vertical Speed: 210%
				Movement Gravity: 135%
				Movement Speed: 230%
				No Ammunition Requirement: On
				Projectile Speed: 500%
				Steel Trap Cooldown Time: 70%
				Ultimate Duration: 200%
				Ultimate Generation - Combat RIP-Tire: 280%
				Ultimate Generation - Passive RIP-Tire: 280%
				Ultimate Generation RIP-Tire: 280%
			}

			Lúcio
			{
				Amp It Up: Off
				Damage Dealt: 10%
				Damage Received: 500%
				Healing Dealt: 10%
				Healing Received: 10%
				Health: 333%
				Jump Vertical Speed: 230%
				Movement Gravity: 135%
				Movement Speed: 230%
				No Ammunition Requirement: On
				Projectile Speed: 500%
				Soundwave Cooldown Time: 125%
				Soundwave Knockback Scalar: 128%
				Ultimate Generation - Combat Sound Barrier: 399%
				Ultimate Generation - Passive Sound Barrier: 399%
				Ultimate Generation Sound Barrier: 399%
			}

			McCree
			{
				Combat Roll Cooldown Time: 250%
				Damage Dealt: 10%
				Damage Received: 500%
				Healing Received: 10%
				Health: 296%
				Jump Vertical Speed: 230%
				Movement Gravity: 135%
				Movement Speed: 230%
				No Ammunition Requirement: On
				Projectile Speed: 500%
				Ultimate Generation - Combat Deadeye: 355%
				Ultimate Generation - Passive Deadeye: 355%
				Ultimate Generation Deadeye: 355%
			}

			Mei
			{
				Ammunition Clip Size Scalar: 55%
				Blizzard Freeze Rate Scalar: 50%
				Cryo-Freeze Cooldown Time: 125%
				Damage Dealt: 10%
				Damage Received: 500%
				Healing Dealt: 10%
				Healing Received: 10%
				Health: 266%
				Ice Wall Cooldown Time: 125%
				Jump Vertical Speed: 235%
				Movement Gravity: 135%
				Movement Speed: 230%
				Projectile Speed: 500%
				Ultimate Ability Blizzard: Off
				Weapon Freeze Rate Scalar: 55%
			}

			Mercy
			{
				Damage Dealt: 10%
				Damage Received: 500%
				Guardian Angel Cooldown Time: 200%
				Healing Dealt: 55%
				Healing Received: 10%
				Health: 333%
				Jump Vertical Speed: 235%
				Movement Gravity: 135%
				Movement Speed: 230%
				No Ammunition Requirement: On
				Projectile Speed: 500%
				Resurrect Cooldown Time: 500%
				Spawn With Ultimate Ready: On
				Ultimate Ability Valkyrie: Off
			}

			Moira
			{
				Biotic Energy Maximum: 500%
				Biotic Energy Recharge Rate: 500%
				Biotic Orb Cooldown Time: 55%
				Biotic Orb Max Damage Scalar: 10%
				Biotic Orb Max Healing Scalar: 10%
				Damage Dealt: 10%
				Damage Received: 500%
				Fade Cooldown Time: 200%
				Healing Dealt: 10%
				Healing Received: 10%
				Health: 333%
				Jump Vertical Speed: 235%
				Movement Gravity: 135%
				Movement Speed: 230%
				Projectile Speed: 55%
				Secondary Fire: Off
				Ultimate Ability Coalescence: Off
			}

			Orisa
			{
				Damage Dealt: 10%
				Damage Received: 280%
				Fortify Cooldown Time: 55%
				Halt! Cooldown Time: 62%
				Healing Received: 10%
				Health: 148%
				Jump Vertical Speed: 280%
				Movement Gravity: 145%
				Movement Speed: 230%
				Projectile Speed: 70%
				Protective Barrier Cooldown Time: 50%
				Ultimate Ability Supercharger: Off
			}

			Pharah
			{
				Ammunition Clip Size Scalar: 55%
				Concussive Blast Cooldown Time: 111%
				Concussive Blast Knockback Scalar: 155%
				Damage Dealt: 10%
				Damage Received: 500%
				Healing Received: 10%
				Health: 333%
				Hover Jets: Off
				Jump Jet Acceleration Scalar: 70%
				Jump Jet Cooldown Time: 55%
				Jump Vertical Speed: 210%
				Movement Gravity: 135%
				Movement Speed: 230%
				Projectile Speed: 128%
				Rocket Launcher Knockback Scalar: 55%
				Ultimate Ability Barrage: Off
			}

			Reaper
			{
				Damage Dealt: 10%
				Damage Received: 500%
				Healing Dealt: 10%
				Healing Received: 10%
				Health: 266%
				Jump Vertical Speed: 230%
				Movement Gravity: 135%
				Movement Speed: 230%
				Ultimate Generation - Combat Death Blossom: 500%
				Ultimate Generation - Passive Death Blossom: 500%
				Ultimate Generation Death Blossom: 500%
				Wraith Form Cooldown Time: 125%
			}

			Sombra
			{
				Damage Dealt: 10%
				Damage Received: 500%
				Hack Cooldown Time: 155%
				Healing Received: 10%
				Health: 333%
				Jump Vertical Speed: 235%
				Movement Gravity: 135%
				Movement Speed: 230%
				No Ammunition Requirement: On
				Projectile Speed: 107%
				Stealth: Off
				Translocator Cooldown Time: 155%
				Ultimate Generation - Combat EMP: 500%
				Ultimate Generation - Passive EMP: 355%
				Ultimate Generation EMP: 355%
			}

			Symmetra
			{
				Damage Dealt: 10%
				Damage Received: 500%
				Healing Received: 10%
				Health: 296%
				Jump Vertical Speed: 236%
				Movement Gravity: 135%
				Movement Speed: 230%
				No Ammunition Requirement: On
				Projectile Speed: 500%
				Sentry Turret Cooldown Time: 14%
				Teleporter Cooldown Time: 40%
				Ultimate Ability Photon Barrier: Off
			}

			Torbjörn
			{
				Damage Dealt: 10%
				Damage Received: 500%
				Deploy Turret Cooldown Time: 70%
				Healing Received: 10%
				Health: 266%
				Infinite Ultimate Duration: On
				Jump Vertical Speed: 210%
				Movement Gravity: 135%
				Movement Speed: 230%
				No Ammunition Requirement: On
				Overload Cooldown Time: 94%
				Overload Duration Scalar: 70%
				Ultimate Duration: 280%
				Ultimate Generation - Combat Molten Core: 500%
				Ultimate Generation - Passive Molten Core: 500%
				Ultimate Generation Molten Core: 500%
				Weapons Enabled: Forge Hammer Only
			}

			Tracer
			{
				Blink: Off
				Damage Dealt: 10%
				Damage Received: 500%
				Healing Received: 10%
				Health: 444%
				Jump Vertical Speed: 230%
				Movement Gravity: 135%
				Movement Speed: 210%
				No Ammunition Requirement: On
				Projectile Speed: 500%
				Recall Cooldown Time: 125%
				Ultimate Generation - Combat Pulse Bomb: 325%
				Ultimate Generation - Passive Pulse Bomb: 355%
				Ultimate Generation Pulse Bomb: 355%
			}

			Widowmaker
			{
				Damage Dealt: 10%
				Damage Received: 500%
				Grappling Hook Cooldown Time: 70%
				Healing Received: 10%
				Health: 333%
				Jump Vertical Speed: 230%
				Movement Gravity: 135%
				Movement Speed: 230%
				No Ammunition Requirement: On
				Projectile Speed: 500%
				Ultimate Duration: 155%
				Ultimate Generation - Combat Infra-Sight: 200%
				Ultimate Generation - Passive Infra-Sight: 255%
				Ultimate Generation Infra-Sight: 200%
				Venom Mine Cooldown Time: 33%
			}

			Winston
			{
				Damage Dealt: 10%
				Damage Received: 500%
				Healing Received: 10%
				Health: 133%
				Jump Pack Acceleration Scalar: 128%
				Jump Pack Cooldown Time: 155%
				Jump Pack Knockback Scalar: 400%
				Jump Vertical Speed: 210%
				Movement Gravity: 135%
				Movement Speed: 230%
				No Ammunition Requirement: On
				Primal Rage Melee Knockback Scalar: 25%
				Ultimate Ability Primal Rage: Off
			}

			Wrecking Ball
			{
				Damage Dealt: 10%
				Damage Received: 500%
				Grappling Claw: Off
				Healing Received: 10%
				Health: 111%
				Infinite Ultimate Duration: On
				Jump Vertical Speed: 245%
				Minefield Knockback Scalar: 200%
				Movement Gravity: 135%
				Movement Speed: 140%
				No Ammunition Requirement: On
				Projectile Speed: 28%
				Roll Always Active: On
				Spawn With Ultimate Ready: On
				Ultimate Duration: 128%
				Ultimate Generation - Combat Minefield: 500%
				Ultimate Generation - Passive Minefield: 500%
				Ultimate Generation Minefield: 500%
			}

			Zenyatta
			{
				Damage Dealt: 10%
				Damage Received: 500%
				Healing Dealt: 10%
				Healing Received: 10%
				Health: 333%
				Jump Vertical Speed: 235%
				Movement Gravity: 135%
				Movement Speed: 230%
				No Ammunition Requirement: On
				Projectile Speed: 500%
				Ultimate Generation - Combat Transcendence: 250%
				Ultimate Generation - Passive Transcendence: 250%
				Ultimate Generation Transcendence: 250%
			}
		}
	}
}

variables
{
	global:
		0: hider_win_time
		1: solo_seeker_speed
		2: doomfist_max_speed
		3: reveal_time
		4: speed_rule_lock
		5: shield_location
		6: toxicjail_tab
		7: xPositive2
		8: xNegative2
		9: yPositive2
		10: yNegative2
		11: zPositive2
		12: zNegative2
		13: xPositive1
		14: xNegative1
		15: yPositive1
		16: yNegative1
		17: yBlockFreeze_1
		18: yBlockFreeze_2
		19: zBlockFreeze
		20: zPositive1
		21: zNegative1
		22: varPosSpawnAreaNX
		23: varPosSpawnAreaPX
		24: varPosSpawnAreaNZ
		25: varPosSpawnAreaPZ
		26: varAnglePosXp
		27: varAnglePosZp
		28: varAnglePosXn
		29: varAnglePosZn
		30: varWallDetection
		31: varDeploy_center
		32: varSigmaAntiKamikazeN_Y
		33: varSigmaAntiKamikazePos_Y

	player:
		0: tbag_flag
		1: rng_punch_message
		2: player_camera
		3: winstonBubbleTAB
		4: kill_hider_loop
		5: player_effects
		6: brigvar1
		7: brigvar2
		8: brigvar3
		9: genji_pos_sphere
		10: Rein_Msg
		11: genji_allplayer_sphere
		12: Hanzo_smiley
		13: Hammond_varPgrap
		14: reaper_ultdmg_icon
		15: Moira_icon_purplesphere
		16: var_player_dead
		17: vartext_player_dead
		18: genji_player_sphere
		19: genji_text_ZW
		20: genji_tab_sphere
		21: nani_text_genji_ZW
		22: Rez_actif
		23: dva_res_text_int
		24: torb_smiley
		25: EchoSlowBomb
		26: varOrisaKnight
		27: ToxicPlayerIcon
		28: varOrisaMount
		29: iconCampingSpawn
		30: varRein1
		31: varTxtH_S
		32: varTxt_id
		33: varSigmaScreamer
		34: varSigmaScreamerMsg
		35: varKickMsgZen
		36: varWallDetection
		37: varVisualize_front
		38: varVisualize_side
		39: varDeploy_pos
		40: varDuration
		41: varWelcomeTextInstruction
		42: varButtonWTI
		43: Bay
		44: Bay_Button
		45: Bay_Text
		46: varVisualFrontBapt
		47: varVisualSideBapt
		48: varVisualWallEffectBapt
		49: varWidowHS
		50: varWidowHSmsg
		51: varTxtUpdate
		52: varButtonUpdate
		53: Phil
		54: Phil_Button
		55: Phil_Text
}

subroutines
{
	0: customStringPicker
	1: arenaSetupEdge
	2: arenaSetupFace
	3: mapSetupLijangMarket
	4: mapSetupOasisCity
	5: mapSetupExpan
	6: mapSetupOasisGarden
	7: mapSetupLijangMarket2
	8: arenaSetupEdge2
	9: arenaSetupFace2
	10: campingSpawn
	11: subAreaSpawnTeam
	12: mapSetupAyutthaya
	13: arenaSetup
	14: mapCheck
	15: toxic_freeze
	16: mapSetupCastillo
	17: mapSetupEcolab
	18: mapSetupBlackForest
	19: mapSetupIliosLightHouse
	20: mapSetupIliosWell
	21: mapSetupIliosRuins
	22: mapSetupIsland
	23: mapSetupLijiangControl
	24: mapSetupNecropolis
	25: mapSetupNepalShrine
	26: mapSetupNepalSanctuary
	27: mapSetupNepalVillage
	28: mapSetupLijiangGarden
	29: mapSetupOasisUniversity
	30: mapSetupWorkshopRoom
	31: zenKickRNGMSG
	34: subRemoveVisualFrontBapt
	35: subRemoveVisualSideBapt
	36: subRemoveEveryEffectBapt
	37: subRemoveVisualWallEffectBapt
}

rule("───────────────┤RUN\\HIDE AND SEEK - VERSION 2.13.0 ♣ - 214Z1 - Philmer#2681├───────────────────────────")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Create HUD Text(Event Player, Null, Null, Custom String("[R\\H&S - VERSION 2.13.0 ♣]"), Right, 0, Color(White), Color(Green),
			Color(Yellow), Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Null, Custom String("(interact + reload)\r\n "), Null, Right, 1, Color(White), Color(Green), Color(
			Yellow), Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Null, Null, Custom String("{0} : Reload + Melee", Icon String(Question Mark)), Left, 0, Color(White),
			Color(Sky Blue), Color(Sky Blue), Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Null, Null, Custom String("{1} Time Remaining: {0}", Match Time, Icon String(Eye)), Left, 1, Color(
			White), Color(Purple), Color(Purple), Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Null, Null, Custom String("{1} Speed: {0}", Horizontal Speed Of(Event Player), Icon String(Bolt)),
			Left, 3, Color(White), Color(Orange), Color(Orange), Visible To and String, Default Visibility);
	}
}

rule("####### <Remove - UPDATE TEXT> #######")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		disabled (Is Button Held(Event Player, Button(Reload)) && Is Button Held(Event Player, Button(Crouch)) && Is Button Held(Event Player,
			Button(Melee))) == True;
		(Is Button Held(Event Player, Button(Interact)) && Is Button Held(Event Player, Button(Reload))) == True;
		Event Player.varButtonUpdate == True;
	}

	actions
	{
		Wait(0.094, Abort When False);
		Destroy HUD Text(Event Player.varTxtUpdate[0]);
		Destroy HUD Text(Event Player.varTxtUpdate[1]);
		Destroy HUD Text(Event Player.varTxtUpdate[2]);
		Destroy HUD Text(Event Player.varTxtUpdate[3]);
		disabled Destroy HUD Text(Event Player.varTxtUpdate[4]);
		Event Player.varButtonUpdate = False;
	}
}

rule("####### <UPDATE TEXT> #######")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		disabled (Is Button Held(Event Player, Button(Reload)) && Is Button Held(Event Player, Button(Crouch)) && Is Button Held(Event Player,
			Button(Melee))) == True;
		(Is Button Held(Event Player, Button(Interact)) && Is Button Held(Event Player, Button(Reload))) == True;
		Event Player.varButtonUpdate == False;
	}

	actions
	{
		Wait(0.094, Abort When False);
		Create HUD Text(Event Player, Custom String(" {0}      GENERAL UPDATE       {0} ", Icon String(Bolt)), Null, Null, Right, 40,
			Color(Blue), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.varTxtUpdate[0] = Last Text ID;
		Create HUD Text(Event Player, Null, Null, Custom String(
			" \r\n   - Mercy can't rez if the seeker is alone        \r\n   - Doomfist lose is ultimate\r\n   - Doomfist is invincible with his E\r\n"),
			Right, 41, Color(Green), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.varTxtUpdate[1] = Last Text ID;
		Create HUD Text(Event Player, Custom String(" {0}            BUG FIXES               {0} ", Icon String(Plus)), Null, Null, Right,
			42, Color(Aqua), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.varTxtUpdate[2] = Last Text ID;
		Create HUD Text(Event Player, Null, Null, Custom String(" \r\n   - Setting primary/secondary fire                  \r\n"), Right,
			43, Color(Green), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.varTxtUpdate[3] = Last Text ID;
		disabled Create HUD Text(Event Player, Custom String("                                                           "), Null, Null, Right, 44,
			Color(Blue), Color(White), Color(White), Visible To and String, Default Visibility);
		disabled Event Player.varTxtUpdate[4] = Last Text ID;
		Event Player.varButtonUpdate = True;
	}
}

rule("####### <Remove - Welcome Instruction Message> #######")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Is Button Held(Event Player, Button(Primary Fire)) && Is Button Held(Event Player, Button(Reload))) == True;
		Event Player.varButtonWTI == True;
	}

	actions
	{
		Wait(0.094, Abort When False);
		Destroy HUD Text(Event Player.varWelcomeTextInstruction[0]);
		Destroy HUD Text(Event Player.varWelcomeTextInstruction[1]);
		Destroy HUD Text(Event Player.varWelcomeTextInstruction[2]);
		Destroy HUD Text(Event Player.varWelcomeTextInstruction[3]);
		Destroy HUD Text(Event Player.varWelcomeTextInstruction[4]);
		Destroy HUD Text(Event Player.varWelcomeTextInstruction[5]);
		Destroy HUD Text(Event Player.varWelcomeTextInstruction[6]);
		Destroy HUD Text(Event Player.varWelcomeTextInstruction[21]);
		Destroy HUD Text(Event Player.varWelcomeTextInstruction[22]);
		Event Player.varButtonWTI = False;
	}
}

rule("####### <Welcome Instruction Message> #######")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Match Round <= 1;
		disabled (Is Button Held(Event Player, Button(Primary Fire)) && Is Button Held(Event Player, Button(Reload))) == True;
		disabled Event Player.varButtonWTI == False;
	}

	actions
	{
		Wait(0.094, Abort When False);
		Create HUD Text(Event Player, Custom String(" ♣                 [RUN\\HIDE & SEEK]                 ♣ "), Null, Null, Right, 2,
			Color(Yellow), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.varWelcomeTextInstruction[0] = Last Text ID;
		Create HUD Text(Event Player, Null, Null, Custom String(" \r\nWelcome {0}, have fun {1}                                    \r\n ",
			Event Player, Icon String(Happy)), Right, 3, Color(Yellow), Color(Blue), Color(Blue), Visible To and String,
			Default Visibility);
		Event Player.varWelcomeTextInstruction[1] = Last Text ID;
		Create HUD Text(Event Player, Null, Null, Custom String(
			" \r\n- {1} To know what do your character press RELOAD + MELEE            ", Null, Icon String(Question Mark)), Right, 4,
			Color(Yellow), Color(Blue), Color(White), Visible To and String, Default Visibility);
		Event Player.varWelcomeTextInstruction[2] = Last Text ID;
		Create HUD Text(Event Player, Null, Null, Custom String(
			"- {1} JOIN MVC !                                                                                                    ", Null,
			Icon String(Heart)), Right, 5, Color(Yellow), Color(Blue), Color(White), Visible To and String, Default Visibility);
		Event Player.varWelcomeTextInstruction[3] = Last Text ID;
		disabled Create HUD Text(Event Player, Null, Null, Custom String(
			"- {1} Don't use unfair spots.                                                                            ", Null, Icon String(
			X)), Right, 6, Color(Yellow), Color(Blue), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Null, Null, Custom String(
			"- {1} Don't use unfair spots. Don't exploit and play fair.                     ", Null, Icon String(X)), Right, 6, Color(
			Yellow), Color(Blue), Color(White), Visible To and String, Default Visibility);
		Event Player.varWelcomeTextInstruction[4] = Last Text ID;
		Create HUD Text(Event Player, Null, Null, Custom String(
			"- {1} For the [3D]view to [FPS]view it's crouch+interact (CTRL+F)         \r\n ", Event Player, Icon String(Eye)), Right, 7,
			Color(Yellow), Color(Blue), Color(White), Visible To and String, Default Visibility);
		Event Player.varWelcomeTextInstruction[5] = Last Text ID;
		Create HUD Text(Event Player, Null, Null, Custom String(
			" \r\n{0} Friends have a priority {0}                                     \r\n ", Icon String(Warning), Icon String(Happy)),
			Right, 8, Color(Yellow), Color(Blue), Color(Red), Visible To and String, Default Visibility);
		Event Player.varWelcomeTextInstruction[6] = Last Text ID;
		Create HUD Text(Event Player, Custom String(" ♣  {0}  CODE : 214Z1 | {1} Philmer#2681  ♣ ", Icon String(Warning), Icon String(
			Question Mark)), Null, Null, Right, 21, Color(Yellow), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.varWelcomeTextInstruction[21] = Last Text ID;
		Create HUD Text(Event Player, Null, Null, Custom String("(Primary fire + Reload)                                             ",
			Event Player, Icon String(Happy)), Right, 22, Color(Yellow), Color(Blue), Color(White), Visible To and String,
			Default Visibility);
		Event Player.varWelcomeTextInstruction[22] = Last Text ID;
		Event Player.varButtonWTI = True;
	}
}

disabled rule("────────────────────────┤INTERFACE ├─────────────────────────────────")
{
	event
	{
		Ongoing - Global;
	}
}

rule("#Remove interface instruction")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		disabled (Is Button Held(Event Player, Button(Reload)) && Is Button Held(Event Player, Button(Crouch)) && Is Button Held(Event Player,
			Button(Melee))) == True;
		(Is Button Held(Event Player, Button(Melee)) && Is Button Held(Event Player, Button(Reload))) == True;
		Event Player.varTxtH_S == True;
	}

	actions
	{
		Wait(0.094, Abort When False);
		Destroy HUD Text(Event Player.varTxt_id);
		Event Player.varTxtH_S = False;
	}
}

rule("#TRACER")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Tracer;
	}

	conditions
	{
		disabled (Is Button Held(Event Player, Button(Reload)) && Is Button Held(Event Player, Button(Crouch)) && Is Button Held(Event Player,
			Button(Melee))) == True;
		disabled (Is Button Held(Event Player, Button(Melee)) && Is Button Held(Event Player, Button(Reload))) == True;
		((Has Spawned(Event Player) && Match Time == 0) || (Is Button Held(Event Player, Button(Melee)) && Is Button Held(Event Player,
			Button(Reload)))) == True;
		Event Player.varTxtH_S == False;
	}

	actions
	{
		Wait(0.094, Abort When False);
		Create HUD Text(Event Player, Custom String(
			"┌\r\n\r\n  {0} : \"punch/melee\" a seeker when you have your ultimate to knock down him  \r\n\r\n└", Ability Icon String(Hero(
			Tracer), Button(Ultimate))), Null, Null, Top, 3, Color(Green), Color(White), Color(White), Visible To and String,
			Default Visibility);
		Event Player.varTxt_id = Last Text ID;
		Event Player.varTxtH_S = True;
	}
}

rule("#GENJI")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Genji;
	}

	conditions
	{
		disabled (Is Button Held(Event Player, Button(Reload)) && Is Button Held(Event Player, Button(Crouch)) && Is Button Held(Event Player,
			Button(Melee))) == True;
		disabled (Is Button Held(Event Player, Button(Melee)) && Is Button Held(Event Player, Button(Reload))) == True;
		((Has Spawned(Event Player) && Match Time == 0) || (Is Button Held(Event Player, Button(Melee)) && Is Button Held(Event Player,
			Button(Reload)))) == True;
		Event Player.varTxtH_S == False;
	}

	actions
	{
		Wait(0.094, Abort When False);
		Create HUD Text(Event Player, Custom String(
			"┌\r\n\r\n  ZA WARUDO !\r\n  {0} : BE CLOSE TO A SEEKER TO STOP HIM AND SLOW HIS PROJECTILES  \r\n\r\n└", Ability Icon String(
			Hero(Genji), Button(Ultimate))), Null, Null, Top, 3, Color(Green), Color(White), Color(White), Visible To and String,
			Default Visibility);
		Event Player.varTxt_id = Last Text ID;
		Event Player.varTxtH_S = True;
	}
}

rule("#HAMMOND")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Wrecking Ball;
	}

	conditions
	{
		disabled (Is Button Held(Event Player, Button(Reload)) && Is Button Held(Event Player, Button(Crouch)) && Is Button Held(Event Player,
			Button(Melee))) == True;
		disabled (Is Button Held(Event Player, Button(Melee)) && Is Button Held(Event Player, Button(Reload))) == True;
		((Has Spawned(Event Player) && Match Time == 0) || (Is Button Held(Event Player, Button(Melee)) && Is Button Held(Event Player,
			Button(Reload)))) == True;
		Event Player.varTxtH_S == False;
	}

	actions
	{
		Wait(0.094, Abort When False);
		Create HUD Text(Event Player, Custom String(
			"┌\r\n\r\n  {0} : PILE DRIVE TO BE INVISIBLE/INVINCIBLE FOR 1.8s\r\n  {1} : USE YOUR E TO BE TELEPORTED TO THE HEAD OF A SEEKER  \r\n\r\n",
			Ability Icon String(Hero(Wrecking Ball), Button(Crouch)), Ability Icon String(Hero(Wrecking Ball), Button(Ability 2))), Null,
			Null, Top, 3, Color(Green), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.varTxt_id = Last Text ID;
		Event Player.varTxtH_S = True;
	}
}

rule("#D.VA")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		D.Va;
	}

	conditions
	{
		disabled (Is Button Held(Event Player, Button(Reload)) && Is Button Held(Event Player, Button(Crouch)) && Is Button Held(Event Player,
			Button(Melee))) == True;
		disabled (Is Button Held(Event Player, Button(Melee)) && Is Button Held(Event Player, Button(Reload))) == True;
		((Has Spawned(Event Player) && Match Time == 0) || (Is Button Held(Event Player, Button(Melee)) && Is Button Held(Event Player,
			Button(Reload)))) == True;
		Event Player.varTxtH_S == False;
	}

	actions
	{
		Wait(0.094, Abort When False);
		Create HUD Text(Event Player, Custom String(
			"┌\r\n\r\n  {0} : EMOTE ON A \"SOUL\" TO RESURRECT HIM (YOU CAN'T IF SOLO SEEKER)  \r\n\r\n└", Icon String(Skull)), Null, Null,
			Top, 3, Color(Green), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.varTxt_id = Last Text ID;
		Event Player.varTxtH_S = True;
	}
}

rule("#ORISA")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Orisa;
	}

	conditions
	{
		disabled (Is Button Held(Event Player, Button(Reload)) && Is Button Held(Event Player, Button(Crouch)) && Is Button Held(Event Player,
			Button(Melee))) == True;
		disabled (Is Button Held(Event Player, Button(Melee)) && Is Button Held(Event Player, Button(Reload))) == True;
		((Has Spawned(Event Player) && Match Time == 0) || (Is Button Held(Event Player, Button(Melee)) && Is Button Held(Event Player,
			Button(Reload)))) == True;
		Event Player.varTxtH_S == False;
	}

	actions
	{
		Wait(0.094, Abort When False);
		Create HUD Text(Event Player, Custom String("┌\r\n\r\n  {0} : PEOPLE CAN MOUNT YOU SO ENJOY TO BE A HORSE {1}  \r\n\r\n└",
			Hero Icon String(Hero(Orisa)), Icon String(Heart)), Null, Null, Top, 3, Color(Green), Color(White), Color(White),
			Visible To and String, Default Visibility);
		Event Player.varTxt_id = Last Text ID;
		Event Player.varTxtH_S = True;
	}
}

rule("#REIN TEAM 1")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Reinhardt;
	}

	conditions
	{
		disabled (Is Button Held(Event Player, Button(Reload)) && Is Button Held(Event Player, Button(Crouch)) && Is Button Held(Event Player,
			Button(Melee))) == True;
		disabled (Is Button Held(Event Player, Button(Melee)) && Is Button Held(Event Player, Button(Reload))) == True;
		((Has Spawned(Event Player) && Match Time == 0) || (Is Button Held(Event Player, Button(Melee)) && Is Button Held(Event Player,
			Button(Reload)))) == True;
		Event Player.varTxtH_S == False;
	}

	actions
	{
		Wait(0.094, Abort When False);
		Create HUD Text(Event Player, Custom String("┌\r\n\r\n  {0} : \"HOLD\" YOUR SHIELD TO BE INVISIBLE FOR 3S, CD TOP LEFT  \r\n\r\n└",
			Ability Icon String(Hero(Reinhardt), Button(Secondary Fire)), Icon String(Heart)), Null, Null, Top, 3, Color(Green), Color(
			White), Color(White), Visible To and String, Default Visibility);
		Event Player.varTxt_id = Last Text ID;
		Event Player.varTxtH_S = True;
	}
}

rule("#REIN TEAM 2")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Reinhardt;
	}

	conditions
	{
		disabled (Is Button Held(Event Player, Button(Reload)) && Is Button Held(Event Player, Button(Crouch)) && Is Button Held(Event Player,
			Button(Melee))) == True;
		disabled (Is Button Held(Event Player, Button(Melee)) && Is Button Held(Event Player, Button(Reload))) == True;
		((Has Spawned(Event Player) && Match Time == 0) || (Is Button Held(Event Player, Button(Melee)) && Is Button Held(Event Player,
			Button(Reload)))) == True;
		Event Player.varTxtH_S == False;
	}

	actions
	{
		Wait(0.094, Abort When False);
		Create HUD Text(Event Player, Custom String("┌\r\n\r\n  {0} : FIRESTRIKE ONE SHOT  \r\n  [TIPS] : USE IT ON MEI WALL  \r\n\r\n└",
			Ability Icon String(Hero(Reinhardt), Button(Ability 2)), Icon String(Heart)), Null, Null, Top, 3, Color(Green), Color(White),
			Color(White), Visible To and String, Default Visibility);
		Event Player.varTxt_id = Last Text ID;
		Event Player.varTxtH_S = True;
	}
}

rule("#ROADHOG TEAM 1")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Roadhog;
	}

	conditions
	{
		disabled (Is Button Held(Event Player, Button(Reload)) && Is Button Held(Event Player, Button(Crouch)) && Is Button Held(Event Player,
			Button(Melee))) == True;
		disabled (Is Button Held(Event Player, Button(Melee)) && Is Button Held(Event Player, Button(Reload))) == True;
		((Has Spawned(Event Player) && Match Time == 0) || (Is Button Held(Event Player, Button(Melee)) && Is Button Held(Event Player,
			Button(Reload)))) == True;
		Event Player.varTxtH_S == False;
	}

	actions
	{
		Wait(0.094, Abort When False);
		Create HUD Text(Event Player, Custom String("┌\r\n\r\n  {0} : WORK IN PROGRESS, IF YOU HAVE AN IDEA MP ME  \r\n\r\n└", Icon String(
			Warning), Icon String(Heart)), Null, Null, Top, 3, Color(Green), Color(White), Color(White), Visible To and String,
			Default Visibility);
		Event Player.varTxt_id = Last Text ID;
		Event Player.varTxtH_S = True;
	}
}

rule("#ROADHOG TEAM 2")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Roadhog;
	}

	conditions
	{
		disabled (Is Button Held(Event Player, Button(Reload)) && Is Button Held(Event Player, Button(Crouch)) && Is Button Held(Event Player,
			Button(Melee))) == True;
		disabled (Is Button Held(Event Player, Button(Melee)) && Is Button Held(Event Player, Button(Reload))) == True;
		((Has Spawned(Event Player) && Match Time == 0) || (Is Button Held(Event Player, Button(Melee)) && Is Button Held(Event Player,
			Button(Reload)))) == True;
		Event Player.varTxtH_S == False;
	}

	actions
	{
		Wait(0.094, Abort When False);
		Create HUD Text(Event Player, Custom String(
			"┌\r\n\r\n  {0} : USE YOUR \"E\" TO BE UNPHASED + SPEEDBOOST  \r\n  [TIPS] : USE IT IN GRAV FOR EXAMPLE\r\n\r\n└",
			Ability Icon String(Hero(Roadhog), Button(Ability 2)), Icon String(Heart)), Null, Null, Top, 3, Color(Green), Color(White),
			Color(White), Visible To and String, Default Visibility);
		Event Player.varTxt_id = Last Text ID;
		Event Player.varTxtH_S = True;
	}
}

rule("#SIGMA TEAM 1")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Sigma;
	}

	conditions
	{
		disabled (Is Button Held(Event Player, Button(Reload)) && Is Button Held(Event Player, Button(Crouch)) && Is Button Held(Event Player,
			Button(Melee))) == True;
		disabled (Is Button Held(Event Player, Button(Melee)) && Is Button Held(Event Player, Button(Reload))) == True;
		((Has Spawned(Event Player) && Match Time == 0) || (Is Button Held(Event Player, Button(Melee)) && Is Button Held(Event Player,
			Button(Reload)))) == True;
		Event Player.varTxtH_S == False;
	}

	actions
	{
		Wait(0.094, Abort When False);
		Create HUD Text(Event Player, Custom String(
			"┌\r\n\r\n  {0} : USE YOUR \"E\" (ROCK) ON TO GET A JUMPBOOST  \r\n        [ANGLE -28°]\r\n\r\n└", Ability Icon String(Hero(
			Sigma), Button(Ability 2)), Icon String(Heart)), Null, Null, Top, 3, Color(Green), Color(White), Color(White),
			Visible To and String, Default Visibility);
		Event Player.varTxt_id = Last Text ID;
		Event Player.varTxtH_S = True;
	}
}

rule("#SIGMA TEAM 2")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Sigma;
	}

	conditions
	{
		disabled (Is Button Held(Event Player, Button(Reload)) && Is Button Held(Event Player, Button(Crouch)) && Is Button Held(Event Player,
			Button(Melee))) == True;
		disabled (Is Button Held(Event Player, Button(Melee)) && Is Button Held(Event Player, Button(Reload))) == True;
		((Has Spawned(Event Player) && Match Time == 0) || (Is Button Held(Event Player, Button(Melee)) && Is Button Held(Event Player,
			Button(Reload)))) == True;
		Event Player.varTxtH_S == False;
	}

	actions
	{
		Wait(0.094, Abort When False);
		Create HUD Text(Event Player, Custom String(
			"┌\r\n\r\n  {0} : USE YOUR \"E\" (ROCK) TO GET A JUMPBOOST [-28°]\r\n  {1} : RELOAD TO BE A SCREAMER ! TIME < 180s (CD : 20s)  \r\n\r\n└",
			Ability Icon String(Hero(Sigma), Button(Ability 2)), Icon String(Happy)), Null, Null, Top, 3, Color(Green), Color(White),
			Color(White), Visible To and String, Default Visibility);
		Event Player.varTxt_id = Last Text ID;
		Event Player.varTxtH_S = True;
	}
}

rule("#WINSTON")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Winston;
	}

	conditions
	{
		disabled (Is Button Held(Event Player, Button(Reload)) && Is Button Held(Event Player, Button(Crouch)) && Is Button Held(Event Player,
			Button(Melee))) == True;
		disabled (Is Button Held(Event Player, Button(Melee)) && Is Button Held(Event Player, Button(Reload))) == True;
		((Has Spawned(Event Player) && Match Time == 0) || (Is Button Held(Event Player, Button(Melee)) && Is Button Held(Event Player,
			Button(Reload)))) == True;
		Event Player.varTxtH_S == False;
	}

	actions
	{
		Wait(0.094, Abort When False);
		Create HUD Text(Event Player, Custom String("┌\r\n\r\n  {0} : USE YOUR \"E\" (BUBBLE) TO \"TRAP/SLOW\" A SEEKER  \r\n\r\n└",
			Ability Icon String(Hero(Winston), Button(Ability 2)), Icon String(Heart)), Null, Null, Top, 3, Color(Green), Color(White),
			Color(White), Visible To and String, Default Visibility);
		Event Player.varTxt_id = Last Text ID;
		Event Player.varTxtH_S = True;
	}
}

rule("#ZARYA")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Zarya;
	}

	conditions
	{
		disabled (Is Button Held(Event Player, Button(Reload)) && Is Button Held(Event Player, Button(Crouch)) && Is Button Held(Event Player,
			Button(Melee))) == True;
		disabled (Is Button Held(Event Player, Button(Melee)) && Is Button Held(Event Player, Button(Reload))) == True;
		((Has Spawned(Event Player) && Match Time == 0) || (Is Button Held(Event Player, Button(Melee)) && Is Button Held(Event Player,
			Button(Reload)))) == True;
		Event Player.varTxtH_S == False;
	}

	actions
	{
		Wait(0.094, Abort When False);
		Create HUD Text(Event Player, Custom String("┌\r\n\r\n  {0} : WORK IN PROGRESS\r\n\r\n└", Icon String(Warning), Icon String(
			Happy)), Null, Null, Top, 3, Color(Green), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.varTxt_id = Last Text ID;
		Event Player.varTxtH_S = True;
	}
}

rule("#ASHE")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Ashe;
	}

	conditions
	{
		disabled (Is Button Held(Event Player, Button(Reload)) && Is Button Held(Event Player, Button(Crouch)) && Is Button Held(Event Player,
			Button(Melee))) == True;
		disabled (Is Button Held(Event Player, Button(Melee)) && Is Button Held(Event Player, Button(Reload))) == True;
		((Has Spawned(Event Player) && Match Time == 0) || (Is Button Held(Event Player, Button(Melee)) && Is Button Held(Event Player,
			Button(Reload)))) == True;
		Event Player.varTxtH_S == False;
	}

	actions
	{
		Wait(0.094, Abort When False);
		Create HUD Text(Event Player, Custom String("┌\r\n\r\n  {0} : WORK IN PROGRESS\r\n\r\n└", Icon String(Warning), Icon String(
			Happy)), Null, Null, Top, 3, Color(Green), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.varTxt_id = Last Text ID;
		Event Player.varTxtH_S = True;
	}
}

rule("#BASTION")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Bastion;
	}

	conditions
	{
		disabled (Is Button Held(Event Player, Button(Reload)) && Is Button Held(Event Player, Button(Crouch)) && Is Button Held(Event Player,
			Button(Melee))) == True;
		disabled (Is Button Held(Event Player, Button(Melee)) && Is Button Held(Event Player, Button(Reload))) == True;
		((Has Spawned(Event Player) && Match Time == 0) || (Is Button Held(Event Player, Button(Melee)) && Is Button Held(Event Player,
			Button(Reload)))) == True;
		Event Player.varTxtH_S == False;
	}

	actions
	{
		Wait(0.094, Abort When False);
		Create HUD Text(Event Player, Custom String("┌\r\n\r\n  {0} : HEALING YOURSELF MAKING YOU FASTER \r\n\r\n└", Ability Icon String(
			Hero(Bastion), Button(Secondary Fire)), Icon String(Happy)), Null, Null, Top, 3, Color(Green), Color(White), Color(White),
			Visible To and String, Default Visibility);
		Event Player.varTxt_id = Last Text ID;
		Event Player.varTxtH_S = True;
	}
}

rule("#JUNKRAT")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Junkrat;
	}

	conditions
	{
		disabled (Is Button Held(Event Player, Button(Reload)) && Is Button Held(Event Player, Button(Crouch)) && Is Button Held(Event Player,
			Button(Melee))) == True;
		disabled (Is Button Held(Event Player, Button(Melee)) && Is Button Held(Event Player, Button(Reload))) == True;
		((Has Spawned(Event Player) && Match Time == 0) || (Is Button Held(Event Player, Button(Melee)) && Is Button Held(Event Player,
			Button(Reload)))) == True;
		Event Player.varTxtH_S == False;
	}

	actions
	{
		Wait(0.094, Abort When False);
		Create HUD Text(Event Player, Custom String("┌\r\n\r\n  {0} : USE YOUR ULTIMATE TO STUN A SEEKER FOR 3S  \r\n\r\n└",
			Ability Icon String(Hero(Junkrat), Button(Ultimate))), Null, Null, Top, 3, Color(Green), Color(White), Color(White),
			Visible To and String, Default Visibility);
		Event Player.varTxt_id = Last Text ID;
		Event Player.varTxtH_S = True;
	}
}

rule("#DOOMFIST")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Doomfist;
	}

	conditions
	{
		disabled (Is Button Held(Event Player, Button(Reload)) && Is Button Held(Event Player, Button(Crouch)) && Is Button Held(Event Player,
			Button(Melee))) == True;
		disabled (Is Button Held(Event Player, Button(Melee)) && Is Button Held(Event Player, Button(Reload))) == True;
		((Has Spawned(Event Player) && Match Time == 0) || (Is Button Held(Event Player, Button(Melee)) && Is Button Held(Event Player,
			Button(Reload)))) == True;
		Event Player.varTxtH_S == False;
	}

	actions
	{
		Wait(0.094, Abort When False);
		Create HUD Text(Event Player, Custom String(
			"┌\r\n\r\n  {0} : 0.7S INVINCIBLE WHEN YOU USE YOUR UPPERCUT  \r\n  {1} : 0.7S INVINCIBLE WHEN YOU TOUCH A SEEKER \r\n\r\n└",
			Ability Icon String(Hero(Doomfist), Button(Ability 1)), Ability Icon String(Hero(Doomfist), Button(Ability 2))), Null, Null,
			Top, 3, Color(Green), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.varTxt_id = Last Text ID;
		Event Player.varTxtH_S = True;
	}
}

rule("#WIDOW")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Widowmaker;
	}

	conditions
	{
		disabled (Is Button Held(Event Player, Button(Reload)) && Is Button Held(Event Player, Button(Crouch)) && Is Button Held(Event Player,
			Button(Melee))) == True;
		disabled (Is Button Held(Event Player, Button(Melee)) && Is Button Held(Event Player, Button(Reload))) == True;
		((Has Spawned(Event Player) && Match Time == 0) || (Is Button Held(Event Player, Button(Melee)) && Is Button Held(Event Player,
			Button(Reload)))) == True;
		Event Player.varTxtH_S == False;
	}

	actions
	{
		Wait(0.094, Abort When False);
		Create HUD Text(Event Player, Custom String(
			"┌\r\n\r\n  {0} : MAKES A HEADSHOT TO A SEEKER TO KNOCKDOWN HIM FOR 2s  \r\n        [CD : 5s]\r\n\r\n└", Icon String(Dizzy),
			Icon String(Happy)), Null, Null, Top, 3, Color(Green), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.varTxt_id = Last Text ID;
		Event Player.varTxtH_S = True;
	}
}

rule("#MEI")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Mei;
	}

	conditions
	{
		disabled (Is Button Held(Event Player, Button(Reload)) && Is Button Held(Event Player, Button(Crouch)) && Is Button Held(Event Player,
			Button(Melee))) == True;
		disabled (Is Button Held(Event Player, Button(Melee)) && Is Button Held(Event Player, Button(Reload))) == True;
		((Has Spawned(Event Player) && Match Time == 0) || (Is Button Held(Event Player, Button(Melee)) && Is Button Held(Event Player,
			Button(Reload)))) == True;
		Event Player.varTxtH_S == False;
	}

	actions
	{
		Wait(0.094, Abort When False);
		Create HUD Text(Event Player, Custom String("┌\r\n\r\n  {0} : MEI FREEZE SEEKER AROUND FOR 1s WHEN SHE USE HER SHIFT  \r\n\r\n└",
			Ability Icon String(Hero(Mei), Button(Ability 1)), Icon String(Happy)), Null, Null, Top, 3, Color(Green), Color(White), Color(
			White), Visible To and String, Default Visibility);
		Event Player.varTxt_id = Last Text ID;
		Event Player.varTxtH_S = True;
	}
}

rule("#PHARAH")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Pharah;
	}

	conditions
	{
		disabled (Is Button Held(Event Player, Button(Reload)) && Is Button Held(Event Player, Button(Crouch)) && Is Button Held(Event Player,
			Button(Melee))) == True;
		disabled (Is Button Held(Event Player, Button(Melee)) && Is Button Held(Event Player, Button(Reload))) == True;
		((Has Spawned(Event Player) && Match Time == 0) || (Is Button Held(Event Player, Button(Melee)) && Is Button Held(Event Player,
			Button(Reload)))) == True;
		Event Player.varTxtH_S == False;
	}

	actions
	{
		Wait(0.094, Abort When False);
		Create HUD Text(Event Player, Custom String("┌\r\n\r\n  {0} : WORK IN PROGRESS\r\n\r\n└", Icon String(Warning), Icon String(
			Happy)), Null, Null, Top, 3, Color(Green), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.varTxt_id = Last Text ID;
		Event Player.varTxtH_S = True;
	}
}

rule("#SOLDIER - 76")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Soldier: 76;
	}

	conditions
	{
		disabled (Is Button Held(Event Player, Button(Reload)) && Is Button Held(Event Player, Button(Crouch)) && Is Button Held(Event Player,
			Button(Melee))) == True;
		disabled (Is Button Held(Event Player, Button(Melee)) && Is Button Held(Event Player, Button(Reload))) == True;
		((Has Spawned(Event Player) && Match Time == 0) || (Is Button Held(Event Player, Button(Melee)) && Is Button Held(Event Player,
			Button(Reload)))) == True;
		Event Player.varTxtH_S == False;
	}

	actions
	{
		Wait(0.094, Abort When False);
		Create HUD Text(Event Player, Custom String("┌\r\n\r\n  {0} : USE YOUR ULT TO FORCE SEEKER TO \"JUMP\"  \r\n\r\n└",
			Ability Icon String(Hero(Soldier: 76), Button(Ultimate)), Icon String(Heart)), Null, Null, Top, 3, Color(Green), Color(White),
			Color(White), Visible To and String, Default Visibility);
		Event Player.varTxt_id = Last Text ID;
		Event Player.varTxtH_S = True;
	}
}

rule("#ECHO")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Echo;
	}

	conditions
	{
		disabled (Is Button Held(Event Player, Button(Reload)) && Is Button Held(Event Player, Button(Crouch)) && Is Button Held(Event Player,
			Button(Melee))) == True;
		disabled (Is Button Held(Event Player, Button(Melee)) && Is Button Held(Event Player, Button(Reload))) == True;
		((Has Spawned(Event Player) && Match Time == 0) || (Is Button Held(Event Player, Button(Melee)) && Is Button Held(Event Player,
			Button(Reload)))) == True;
		Event Player.varTxtH_S == False;
	}

	actions
	{
		Wait(0.094, Abort When False);
		Create HUD Text(Event Player, Custom String("┌\r\n\r\n  {0} : USE YOUR MINES/BOMBS (RMB) TO SLOW A SEEKER  \r\n\r\n└",
			Ability Icon String(Hero(Echo), Button(Secondary Fire)), Icon String(Heart)), Null, Null, Top, 3, Color(Green), Color(White),
			Color(White), Visible To and String, Default Visibility);
		Event Player.varTxt_id = Last Text ID;
		Event Player.varTxtH_S = True;
	}
}

rule("#REAPER")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Reaper;
	}

	conditions
	{
		disabled (Is Button Held(Event Player, Button(Reload)) && Is Button Held(Event Player, Button(Crouch)) && Is Button Held(Event Player,
			Button(Melee))) == True;
		disabled (Is Button Held(Event Player, Button(Melee)) && Is Button Held(Event Player, Button(Reload))) == True;
		((Has Spawned(Event Player) && Match Time == 0) || (Is Button Held(Event Player, Button(Melee)) && Is Button Held(Event Player,
			Button(Reload)))) == True;
		Event Player.varTxtH_S == False;
	}

	actions
	{
		Wait(0.094, Abort When False);
		Create HUD Text(Event Player, Custom String(
			"┌\r\n\r\n  {0} : YOU ARE UNPHASED WHEN YOU CAST YOUR \"E\" TP\r\n  {1] : REAPER CAN WALK THROUGH WALLS WITH HIS ULT  \r\n\r\n└",
			Ability Icon String(Hero(Reaper), Button(Ability 2)), Ability Icon String(Hero(Reaper), Button(Ultimate))), Null, Null, Top, 3,
			Color(Green), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.varTxt_id = Last Text ID;
		Event Player.varTxtH_S = True;
	}
}

rule("#HANZO")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Hanzo;
	}

	conditions
	{
		disabled (Is Button Held(Event Player, Button(Reload)) && Is Button Held(Event Player, Button(Crouch)) && Is Button Held(Event Player,
			Button(Melee))) == True;
		disabled (Is Button Held(Event Player, Button(Melee)) && Is Button Held(Event Player, Button(Reload))) == True;
		((Has Spawned(Event Player) && Match Time == 0) || (Is Button Held(Event Player, Button(Melee)) && Is Button Held(Event Player,
			Button(Reload)))) == True;
		Event Player.varTxtH_S == False;
	}

	actions
	{
		Wait(0.094, Abort When False);
		Create HUD Text(Event Player, Custom String("┌\r\n\r\n  {0} : YOU'RE CUPID SO MAKE LOVE WITH YOUR DMG  \r\n\r\n└", Icon String(
			Heart), Icon String(Heart)), Null, Null, Top, 3, Color(Green), Color(White), Color(White), Visible To and String,
			Default Visibility);
		Event Player.varTxt_id = Last Text ID;
		Event Player.varTxtH_S = True;
	}
}

rule("#MCREE")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		McCree;
	}

	conditions
	{
		disabled (Is Button Held(Event Player, Button(Reload)) && Is Button Held(Event Player, Button(Crouch)) && Is Button Held(Event Player,
			Button(Melee))) == True;
		disabled (Is Button Held(Event Player, Button(Melee)) && Is Button Held(Event Player, Button(Reload))) == True;
		((Has Spawned(Event Player) && Match Time == 0) || (Is Button Held(Event Player, Button(Melee)) && Is Button Held(Event Player,
			Button(Reload)))) == True;
		Event Player.varTxtH_S == False;
	}

	actions
	{
		Wait(0.094, Abort When False);
		Create HUD Text(Event Player, Custom String(
			"┌\r\n\r\n  {0} : YOU'RE INVINCIBLE WHEN YOU ROLL\r\n  {1} : HIT A SEEKER WITH UR ULT TO GET UNPHASED FOR 1S  \r\n\r\n└",
			Ability Icon String(Hero(McCree), Button(Ability 1)), Ability Icon String(Hero(McCree), Button(Ultimate))), Null, Null, Top, 3,
			Color(Green), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.varTxt_id = Last Text ID;
		Event Player.varTxtH_S = True;
	}
}

rule("#TORBJORN")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Torbjörn;
	}

	conditions
	{
		disabled (Is Button Held(Event Player, Button(Reload)) && Is Button Held(Event Player, Button(Crouch)) && Is Button Held(Event Player,
			Button(Melee))) == True;
		disabled (Is Button Held(Event Player, Button(Melee)) && Is Button Held(Event Player, Button(Reload))) == True;
		((Has Spawned(Event Player) && Match Time == 0) || (Is Button Held(Event Player, Button(Melee)) && Is Button Held(Event Player,
			Button(Reload)))) == True;
		Event Player.varTxtH_S == False;
	}

	actions
	{
		Wait(0.094, Abort When False);
		Create HUD Text(Event Player, Custom String("┌\r\n\r\n  {0} : USE YOUR ULTIMATE TO SLOW A SEEKER  \r\n\r\n└", Ability Icon String(
			Hero(Torbjörn), Button(Ultimate)), Icon String(Heart)), Null, Null, Top, 3, Color(Green), Color(White), Color(White),
			Visible To and String, Default Visibility);
		Event Player.varTxt_id = Last Text ID;
		Event Player.varTxtH_S = True;
	}
}

rule("#ANA")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Ana;
	}

	conditions
	{
		disabled (Is Button Held(Event Player, Button(Reload)) && Is Button Held(Event Player, Button(Crouch)) && Is Button Held(Event Player,
			Button(Melee))) == True;
		disabled (Is Button Held(Event Player, Button(Melee)) && Is Button Held(Event Player, Button(Reload))) == True;
		((Has Spawned(Event Player) && Match Time == 0) || (Is Button Held(Event Player, Button(Melee)) && Is Button Held(Event Player,
			Button(Reload)))) == True;
		Event Player.varTxtH_S == False;
	}

	actions
	{
		Wait(0.094, Abort When False);
		Create HUD Text(Event Player, Custom String(
			"┌\r\n\r\n  {0} : YOU'RE TP TO THE SEEKER THAT YOU SLEEP  \r\n  {1} : SMALL JUMPBOOST\r\n\r\n└", Ability Icon String(Hero(Ana),
			Button(Ability 1)), Ability Icon String(Hero(Ana), Button(Ability 2))), Null, Null, Top, 3, Color(Green), Color(White), Color(
			White), Visible To and String, Default Visibility);
		Event Player.varTxt_id = Last Text ID;
		Event Player.varTxtH_S = True;
	}
}

rule("#BRIGITTE")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Brigitte;
	}

	conditions
	{
		disabled (Is Button Held(Event Player, Button(Reload)) && Is Button Held(Event Player, Button(Crouch)) && Is Button Held(Event Player,
			Button(Melee))) == True;
		disabled (Is Button Held(Event Player, Button(Melee)) && Is Button Held(Event Player, Button(Reload))) == True;
		((Has Spawned(Event Player) && Match Time == 0) || (Is Button Held(Event Player, Button(Melee)) && Is Button Held(Event Player,
			Button(Reload)))) == True;
		Event Player.varTxtH_S == False;
	}

	actions
	{
		Wait(0.094, Abort When False);
		Create HUD Text(Event Player, Custom String("┌\r\n\r\n  {0} : HITS THE SKY WITH YOUR WHIPS TO GET A JUMPBOOST  \r\n\r\n└",
			Ability Icon String(Hero(Brigitte), Button(Ability 1)), Icon String(Heart)), Null, Null, Top, 3, Color(Green), Color(White),
			Color(White), Visible To and String, Default Visibility);
		Event Player.varTxt_id = Last Text ID;
		Event Player.varTxtH_S = True;
	}
}

rule("#LUCIO")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Lúcio;
	}

	conditions
	{
		disabled (Is Button Held(Event Player, Button(Reload)) && Is Button Held(Event Player, Button(Crouch)) && Is Button Held(Event Player,
			Button(Melee))) == True;
		disabled (Is Button Held(Event Player, Button(Melee)) && Is Button Held(Event Player, Button(Reload))) == True;
		((Has Spawned(Event Player) && Match Time == 0) || (Is Button Held(Event Player, Button(Melee)) && Is Button Held(Event Player,
			Button(Reload)))) == True;
		Event Player.varTxtH_S == False;
	}

	actions
	{
		Wait(0.094, Abort When False);
		Create HUD Text(Event Player, Custom String("┌\r\n\r\n  {0} : JUMP AND BOOP THE FLOOR TO GET A JUMPBOOST  \r\n\r\n└",
			Ability Icon String(Hero(Lúcio), Button(Secondary Fire)), Icon String(Heart)), Null, Null, Top, 3, Color(Green), Color(White),
			Color(White), Visible To and String, Default Visibility);
		Event Player.varTxt_id = Last Text ID;
		Event Player.varTxtH_S = True;
	}
}

rule("#MOIRA")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Moira;
	}

	conditions
	{
		disabled (Is Button Held(Event Player, Button(Reload)) && Is Button Held(Event Player, Button(Crouch)) && Is Button Held(Event Player,
			Button(Melee))) == True;
		disabled (Is Button Held(Event Player, Button(Melee)) && Is Button Held(Event Player, Button(Reload))) == True;
		((Has Spawned(Event Player) && Match Time == 0) || (Is Button Held(Event Player, Button(Melee)) && Is Button Held(Event Player,
			Button(Reload)))) == True;
		Event Player.varTxtH_S == False;
	}

	actions
	{
		Wait(0.094, Abort When False);
		Create HUD Text(Event Player, Custom String("┌\r\n\r\n  {0} : USE YOUR \"E\" (PURPLE ORB) TO \"SLOW\" A SEEKER  \r\n\r\n└",
			Ability Icon String(Hero(Moira), Button(Ability 2)), Icon String(Heart)), Null, Null, Top, 3, Color(Green), Color(White),
			Color(White), Visible To and String, Default Visibility);
		Event Player.varTxt_id = Last Text ID;
		Event Player.varTxtH_S = True;
	}
}

rule("#SOMBRA")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Sombra;
	}

	conditions
	{
		disabled (Is Button Held(Event Player, Button(Reload)) && Is Button Held(Event Player, Button(Crouch)) && Is Button Held(Event Player,
			Button(Melee))) == True;
		disabled (Is Button Held(Event Player, Button(Melee)) && Is Button Held(Event Player, Button(Reload))) == True;
		((Has Spawned(Event Player) && Match Time == 0) || (Is Button Held(Event Player, Button(Melee)) && Is Button Held(Event Player,
			Button(Reload)))) == True;
		Event Player.varTxtH_S == False;
	}

	actions
	{
		Wait(0.094, Abort When False);
		Create HUD Text(Event Player, Custom String("┌\r\n\r\n  {0} : WORK IN PROGRESS\r\n\r\n└", Icon String(Warning), Icon String(
			Happy)), Null, Null, Top, 3, Color(Green), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.varTxt_id = Last Text ID;
		Event Player.varTxtH_S = True;
	}
}

rule("#SYMMETRA")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Symmetra;
	}

	conditions
	{
		disabled (Is Button Held(Event Player, Button(Reload)) && Is Button Held(Event Player, Button(Crouch)) && Is Button Held(Event Player,
			Button(Melee))) == True;
		disabled (Is Button Held(Event Player, Button(Melee)) && Is Button Held(Event Player, Button(Reload))) == True;
		((Has Spawned(Event Player) && Match Time == 0) || (Is Button Held(Event Player, Button(Melee)) && Is Button Held(Event Player,
			Button(Reload)))) == True;
		Event Player.varTxtH_S == False;
	}

	actions
	{
		Wait(0.094, Abort When False);
		Create HUD Text(Event Player, Custom String("┌\r\n\r\n  {0} : WORK IN PROGRESS\r\n\r\n└", Icon String(Warning), Icon String(
			Happy)), Null, Null, Top, 3, Color(Green), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.varTxt_id = Last Text ID;
		Event Player.varTxtH_S = True;
	}
}

rule("#MERCY")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Mercy;
	}

	conditions
	{
		disabled (Is Button Held(Event Player, Button(Reload)) && Is Button Held(Event Player, Button(Crouch)) && Is Button Held(Event Player,
			Button(Melee))) == True;
		disabled (Is Button Held(Event Player, Button(Melee)) && Is Button Held(Event Player, Button(Reload))) == True;
		((Has Spawned(Event Player) && Match Time == 0) || (Is Button Held(Event Player, Button(Melee)) && Is Button Held(Event Player,
			Button(Reload)))) == True;
		Event Player.varTxtH_S == False;
	}

	actions
	{
		Wait(0.094, Abort When False);
		Create HUD Text(Event Player, Custom String("┌\r\n\r\n  {0} : WORK IN PROGRESS\r\n\r\n└", Icon String(Warning), Icon String(
			Happy)), Null, Null, Top, 3, Color(Green), Color(White), Color(White), Visible To and String, Default Visibility);
		Event Player.varTxt_id = Last Text ID;
		Event Player.varTxtH_S = True;
	}
}

rule("#BAPTISTO")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Baptiste;
	}

	conditions
	{
		disabled (Is Button Held(Event Player, Button(Reload)) && Is Button Held(Event Player, Button(Crouch)) && Is Button Held(Event Player,
			Button(Melee))) == True;
		disabled (Is Button Held(Event Player, Button(Melee)) && Is Button Held(Event Player, Button(Reload))) == True;
		((Has Spawned(Event Player) && Match Time == 0) || (Is Button Held(Event Player, Button(Melee)) && Is Button Held(Event Player,
			Button(Reload)))) == True;
		Event Player.varTxtH_S == False;
	}

	actions
	{
		Wait(0.094, Abort When False);
		Create HUD Text(Event Player, Custom String(
			"┌\r\n\r\n  {0} : BAPTISTE CAN MAKE A WALL FOR 10s WITH HIS ULT  \r\n         (LIMITED BY 1 IN THE SAME TIME)\r\n\r\n└",
			Ability Icon String(Hero(Baptiste), Button(Ultimate)), Icon String(Happy)), Null, Null, Top, 3, Color(Green), Color(White),
			Color(White), Visible To and String, Default Visibility);
		Event Player.varTxt_id = Last Text ID;
		Event Player.varTxtH_S = True;
	}
}

rule("#ZENYATTA")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Zenyatta;
	}

	conditions
	{
		disabled (Is Button Held(Event Player, Button(Reload)) && Is Button Held(Event Player, Button(Crouch)) && Is Button Held(Event Player,
			Button(Melee))) == True;
		disabled (Is Button Held(Event Player, Button(Melee)) && Is Button Held(Event Player, Button(Reload))) == True;
		((Has Spawned(Event Player) && Match Time == 0) || (Is Button Held(Event Player, Button(Melee)) && Is Button Held(Event Player,
			Button(Reload)))) == True;
		Event Player.varTxtH_S == False;
	}

	actions
	{
		Wait(0.094, Abort When False);
		Create HUD Text(Event Player, Custom String(
			"┌\r\n\r\n  {0} : [ZENYATTA || KUNG-FU MASTER]\r\n  {1} : Kick someone to get a frame of invincibility  \r\n\r\n└",
			Hero Icon String(Hero(Zenyatta)), Ability Icon String(Hero(Zenyatta), Button(Melee))), Null, Null, Top, 3, Color(Green), Color(
			White), Color(White), Visible To and String, Default Visibility);
		Event Player.varTxt_id = Last Text ID;
		Event Player.varTxtH_S = True;
	}
}

rule("####### <Remove abilities instruction when start> #######")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Match Time >= 195;
	}

	actions
	{
		Destroy HUD Text(Event Player.varTxt_id);
		Event Player.varTxtH_S = False;
	}
}

disabled rule("─────────────────────────────┤Settings├────────────────────────────────────")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Player Settings")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Assembling Heroes == True;
	}

	actions
	{
		Allow Button(Event Player, Button(Jump));
		Allow Button(Event Player, Button(Ability 1));
	}
}

rule("Settings")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.hider_win_time = Absolute Value(10.999);
		Global.solo_seeker_speed = 110;
		Global.doomfist_max_speed = 100;
		Global.reveal_time = 30;
		Global.varDeploy_center = 0;
		Global.shield_location[0] = Vector(0, -287, 0);
		Global.shield_location[1] = Vector(0, -287, 0);
	}
}

rule("Reveal Hiders at 30 seconds left")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Match Time <= Global.reveal_time;
		Is Alive(Event Player) == True;
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Create Icon(All Players(Team 2), Event Player, Arrow: Down, Visible To and Position, Color(White), True);
		Event Player.player_effects[2] = Last Created Entity;
		Big Message(All Players(All Teams), Custom String("The hiders have been revealed!"));
	}
}

rule("Reset everything between matches")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Assembling Heroes == True;
	}

	actions
	{
		Global.speed_rule_lock = False;
		Set Move Speed(All Living Players(All Teams), 100);
		Destroy Effect(Event Player.player_effects[0]);
		Destroy Icon(Event Player.player_effects[1]);
		Destroy Icon(Event Player.player_effects[2]);
		Destroy Icon(Event Player.ToxicPlayerIcon);
		Set Invisible(Event Player, None);
		Stop Scaling Player(Event Player);
		Destroy HUD Text(Event Player.varTxt_id);
		Event Player.varTxtH_S = False;
	}
}

rule("Victory settings for hiders")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
		Number Of Living Players(Team 1) >= 1;
		Match Time <= Global.hider_win_time;
	}

	actions
	{
		Set Status(All Living Players(Team 2), Null, Frozen, 10);
		Big Message(All Players(All Teams), Custom String("The hiders win!"));
		Wait(3, Ignore Condition);
		Declare Round Victory(Team 1);
	}
}

rule("3rd person camera Orisa, Rein, Sigma & Bastion")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Hero Of(Event Player) == Hero(Orisa) || Hero Of(Event Player) == Hero(Reinhardt) || Hero Of(Event Player) == Hero(Bastion)
			|| Hero Of(Event Player) == Hero(Sigma)) == True;
		(Is Button Held(Event Player, Button(Interact)) && Is Button Held(Event Player, Button(Crouch))) == True;
	}

	actions
	{
		Skip If(Event Player.player_camera != 1, 3);
		Start Camera(Event Player, Ray Cast Hit Position(Event Player, Eye Position(Event Player) + World Vector Of(Vector(0, -1.180,
			-0.728), Event Player, Rotation) + Up * 2.008 + Facing Direction Of(Event Player) * -1.800, Null, Event Player, True),
			Event Player + Facing Direction Of(Event Player) * 1000, 76.288);
		Event Player.player_camera = 0;
		Abort;
		Skip If(Event Player.player_camera != 0, 3);
		Stop Camera(Event Player);
		Event Player.player_camera = 1;
		Abort;
	}
}

rule("3rd person camera")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Hero Of(Event Player) == Hero(Orisa) || Hero Of(Event Player) == Hero(Reinhardt) || Hero Of(Event Player) == Hero(Bastion)
			|| Hero Of(Event Player) == Hero(Sigma)) == False;
		(Is Button Held(Event Player, Button(Interact)) && Is Button Held(Event Player, Button(Crouch))) == True;
	}

	actions
	{
		Skip If(Event Player.player_camera != 1, 3);
		Start Camera(Event Player, Ray Cast Hit Position(Event Player, Eye Position(Event Player) + World Vector Of(Vector(0, -1.180,
			0.055), Event Player, Rotation) + Up * 1.500 + Facing Direction Of(Event Player) * -1.800, Null, Event Player, True),
			Event Player + Facing Direction Of(Event Player) * 1000, 76.288);
		Event Player.player_camera = 0;
		Abort;
		Skip If(Event Player.player_camera != 0, 3);
		Stop Camera(Event Player);
		Event Player.player_camera = 1;
		Abort;
	}
}

rule("Unreveal Dead Hiders")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Dead(Event Player) == True;
	}

	actions
	{
		Destroy Icon(Event Player.player_effects[2]);
		Stop Forcing Player Outlines(Event Player, All Players(All Teams));
	}
}

rule("Announce the speed increase")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.speed_rule_lock == True;
		Is Game In Progress == True;
	}

	actions
	{
		Big Message(All Players(All Teams), Custom String("Run, the seeker is faster!"));
	}
}

rule("Delete all HUD")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Assembling Heroes == True;
	}

	actions
	{
		Destroy All HUD Text;
	}
}

disabled rule("────────────────────────────┤HUD Timers├───────────────────────────────")
{
	event
	{
		Ongoing - Global;
	}
}

rule("All Timers")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
	}

	actions
	{
		If(Hero Of(Event Player) == Hero(Reinhardt) && Team Of(Event Player) == Team 1);
			Event Player.Rein_Msg = Icon String(Happy);
			Create HUD Text(Event Player, String("{0}: {1}", Hero Icon String(Hero(Reinhardt)), Event Player.Rein_Msg), Null, Null, Left, 2,
				Color(White), Color(Orange), Color(White), Visible To and String, Default Visibility);
		Else If(Hero Of(Event Player) == Hero(Sigma) && Team Of(Event Player) == Team 2);
			Create HUD Text(Event Player, String("{0}: {1}", Hero Icon String(Hero(Sigma)), Event Player.varSigmaScreamerMsg), Null, Null,
				Left, 2, Color(White), Color(Orange), Color(White), Visible To and String, Default Visibility);
		Else If(Hero Of(Event Player) == Hero(Widowmaker) && Team Of(Event Player) == Team 1);
			Create HUD Text(Event Player, String("{0}: {1}", Hero Icon String(Hero(Widowmaker)), Event Player.varWidowHSmsg), Null, Null, Left,
				2, Color(White), Color(Orange), Color(White), Visible To and String, Default Visibility);
	}
}

disabled rule("──────────────────────────┤Seeker Modifications├─────────────────────────")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Increase the speed of solo seekers")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		disabled Is Game In Progress == True;
		disabled Global.speed_rule_lock == False;
		Number Of Living Players(Team 2) == 1;
		disabled Number Of Players(Team 1) >= 3;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Global.speed_rule_lock = True;
		Set Move Speed(Event Player, Global.solo_seeker_speed);
		disabled Create Effect(All Players(Team 1), Sparkles, Color(Red), Event Player, 1, Visible To Position and Radius);
		disabled Event Player.player_effects[0] = Last Created Entity;
		Wait(2.250, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Sigma location pinger when he kills a hider")
{
	event
	{
		Player Dealt Final Blow;
		Team 2;
		Sigma;
	}

	actions
	{
		Create Icon(All Players(Team 1), Event Player, Exclamation Mark, Visible To and Position, Color(Red), True);
		Event Player.player_effects[1] = Last Created Entity;
		Wait(2, Ignore Condition);
		Destroy Icon(Event Player.player_effects[1]);
	}
}

rule("Sigma accretion speed boost")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Sigma;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Set Damage Dealt(Event Player, 100);
		Set Move Speed(Event Player, 300);
		Wait(0.650, Ignore Condition);
		Set Move Speed(Event Player, 100);
	}
}

rule("Sigma buff dmg")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Sigma;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == False;
		Button(Melee) == True;
	}

	actions
	{
		Set Damage Dealt(Event Player, 255.287);
		disabled Wait(0.500, Ignore Condition);
		disabled Set Damage Dealt(Event Player, 100);
	}
}

rule("SIGMA SEEKER SCREAMER")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Sigma;
	}

	conditions
	{
		Is Game In Progress == True;
		Match Time <= 180;
		Match Time >= 15;
		Is Button Held(Event Player, Button(Reload)) == True;
		Event Player.varSigmaScreamer == Null;
	}

	actions
	{
		Event Player.varSigmaScreamer = True;
		Wait(0.114, Ignore Condition);
		If(Match Time >= 15);
			Set Status(Event Player, Null, Phased Out, 9999);
		End;
		Set Status(Event Player, Null, Hacked, 9999);
		Set Invisible(Event Player, Enemies);
		Disallow Button(Event Player, Button(Melee));
		Disallow Button(Event Player, Button(Ability 2));
		Wait(0.557, Ignore Condition);
		Attach Players(Event Player, Random Value In Array(All Living Players(Team 1)), Vector(0, 0, 1));
		Wait(0.124, Ignore Condition);
		Communicate(Event Player, Hello);
		Wait(2.876, Ignore Condition);
		Detach Players(Event Player);
		If(Vertical Facing Angle Of(Event Player) >= 28);
			Teleport(Event Player, Nearest Walkable Position(Position Of(Event Player) + Vector(0, 0, 14)));
		Else;
			"Change the 14.287 to Increase or Shorten the TP distance."
			Teleport(Event Player, Nearest Walkable Position(Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player)
				+ Facing Direction Of(Event Player) * 14.287, All Players(All Teams), Event Player, True)));
		End;
		Allow Button(Event Player, Button(Melee));
		Allow Button(Event Player, Button(Ability 2));
		Clear Status(Event Player, Hacked);
		Set Invisible(Event Player, None);
		Clear Status(Event Player, Phased Out);
		Event Player.varSigmaScreamerMsg = 20;
		Chase Player Variable At Rate(Event Player, varSigmaScreamerMsg, 0, 1, Destination and Rate);
		Wait(20, Ignore Condition);
		Event Player.varSigmaScreamer = Null;
	}
}

rule("SIGMA SEEKER ANTI-KAMIKAZE WHEN HE BE A SCREAMER")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Sigma;
	}

	conditions
	{
		Event Player.varSigmaScreamer == True;
		(Y Component Of(Position Of(Event Player)) <= Global.varSigmaAntiKamikazeN_Y || Y Component Of(Position Of(Event Player))
			>= Global.varSigmaAntiKamikazePos_Y) == True;
	}

	actions
	{
		Detach Players(Event Player);
		Teleport(Event Player, Nearest Walkable Position(Position Of(Event Player) + Vector(18, 0, 18)));
	}
}

rule("Roadhog buff dmg")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Roadhog;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == False;
		Button(Melee) == True;
	}

	actions
	{
		Set Damage Dealt(Event Player, 255.287);
	}
}

rule("Roadhog modify/buff dmg HOOK")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Roadhog;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Set Damage Dealt(Event Player, 100);
	}
}

rule("Roadhog SEEKER Unphased when he \"take a breather\" + speedboost")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Roadhog;
	}

	conditions
	{
		Match Time >= 13;
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Set Status(Event Player, Null, Phased Out, 2.500);
		Set Move Speed(Event Player, 110);
		Wait(2.500, Ignore Condition);
		Set Move Speed(Event Player, 100);
	}
}

disabled rule("────────────────────────────┤Hider Modifications├─────────────────────────")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Lucio Jump")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Lúcio;
	}

	conditions
	{
		(Is Meleeing(Event Player) == False && Is Button Held(Event Player, Button(Secondary Fire)) == True) == True;
	}

	actions
	{
		Apply Impulse(Event Player, Facing Direction Of(Event Player), -17.288, To World, Cancel Contrary Motion);
		Wait(5, Ignore Condition);
	}
}

rule("Lucio Wallride")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Lúcio;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Lúcio);
		Is Button Held(Event Player, Button(Jump)) == True;
	}

	actions
	{
		If(Is In Air(Event Player));
			Disallow Button(Event Player, Button(Jump));
		Else If(Is On Ground(Event Player) == True);
			Allow Button(Event Player, Button(Jump));
		End;
	}
}

rule("LUCIO wall climb 2")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Lúcio;
	}

	conditions
	{
		(Is In Air(Event Player) || Is On Wall(Event Player)) == True;
	}

	actions
	{
		If(Is On Wall(Event Player) == True);
			Apply Impulse(Event Player, Down, 14, To World, Incorporate Contrary Motion);
		End;
	}
}

rule("Lucio Disable Ability")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Lúcio;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Lúcio);
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Start Holding Button(Event Player, Button(Ability 1));
		Wait(0.055, Ignore Condition);
		Stop Holding Button(Event Player, Button(Ability 1));
		Wait(0.255, Ignore Condition);
		Disallow Button(Event Player, Button(Ability 1));
	}
}

rule("Baptisto exoboost neft")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Baptiste;
	}

	conditions
	{
		Is Crouching(Event Player) == True;
		Is On Ground(Event Player) == True;
	}

	actions
	{
		Set Gravity(Event Player, 230);
		Wait(0.250, Restart When True);
		Set Gravity(Event Player, 230);
		Loop If Condition Is True;
		Wait(1.250, Restart When True);
		Set Gravity(Event Player, 100);
	}
}

rule("Moira fade nerf")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Moira;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Set Move Speed(Event Player, 55);
		Wait(0.800, Ignore Condition);
		Set Move Speed(Event Player, 100);
	}
}

rule("Disable Genji's double jump & wall climb")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Genji;
	}

	conditions
	{
		(Is In Air(Event Player) || Is On Wall(Event Player)) == True;
	}

	actions
	{
		While((Is In Air(Event Player) || Is On Wall(Event Player)) == True);
			If(Is On Wall(Event Player) == True);
				disabled Set Status(Event Player, Null, Hacked, 0.100);
				Apply Impulse(Event Player, Down, 12, To World, Incorporate Contrary Motion);
				Disallow Button(Event Player, Button(Jump));
			End;
			Wait(0.050, Ignore Condition);
			Allow Button(Event Player, Button(Jump));
		End;
	}
}

rule("Remove Hanzo wall climb")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Hanzo;
	}

	conditions
	{
		Is On Wall(Event Player) == True;
	}

	actions
	{
		While(Is On Wall(Event Player) == True);
			Disallow Button(Event Player, Button(Jump));
			Set Status(Event Player, Null, Hacked, 0.050);
			Wait(0.050, Ignore Condition);
		End;
		Allow Button(Event Player, Button(Jump));
	}
}

disabled rule("Bastion Ult form")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Bastion;
	}

	conditions
	{
		Is Alive(Event Player) == True;
	}

	actions
	{
		Set Damage Dealt(Event Player, 0);
		Set Ultimate Charge(Event Player, 100);
		Wait(1, Ignore Condition);
		Press Button(Event Player, Button(Ultimate));
	}
}

rule("Sombra translocator nerf")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Sombra;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Wait(2, Abort When False);
		Start Holding Button(Event Player, Button(Interact));
		Wait(1, Ignore Condition);
		Stop Holding Button(Event Player, Button(Interact));
	}
}

rule("Zenyatta ult nerf")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Zenyatta;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Set Move Speed(Event Player, 65);
		Wait(6, Ignore Condition);
		Set Move Speed(Event Player, 100);
	}
}

rule("Orisa increase speed while shooting")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Orisa;
	}

	conditions
	{
		Is Firing Primary(Event Player) == True;
	}

	actions
	{
		Set Move Speed(Event Player, 143);
	}
}

rule("Orisa decrease speed while not shooting")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Orisa;
	}

	conditions
	{
		Is Firing Primary(Event Player) == False;
	}

	actions
	{
		Set Move Speed(Event Player, 100);
	}
}

rule("Hider/Seeker damages itself heal")
{
	event
	{
		Player Took Damage;
		All;
		All;
	}

	conditions
	{
		Attacker == Event Player;
	}

	actions
	{
		Heal(Event Player, Null, 2000);
	}
}

rule("Junkrat stun with his ultimate")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Junkrat;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Junkrat);
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Set Status(Victim, Null, Stunned, 2.870);
	}
}

rule("Tracer knocked down ultimate ability")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Tracer;
	}

	conditions
	{
		Is Hero Being Played(Hero(Tracer), Team 1) == Attacker;
		Is Using Ultimate(Attacker) == True;
	}

	actions
	{
		Set Status(Victim, Null, Knocked Down, 3.550);
	}
}

rule("Roadhog hook speed buff")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Roadhog;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Wait(0.250, Restart When True);
		Set Move Speed(Event Player, 200);
		Loop If Condition Is True;
		Set Move Speed(Event Player, 100);
	}
}

rule("Mcree invincible dodge")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		McCree;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Set Status(Event Player, Null, Phased Out, 1.287);
		disabled Set Invisible(Event Player, All);
		Set Move Speed(Event Player, 128);
		Wait(1.287, Ignore Condition);
		Set Move Speed(Event Player, 100);
	}
}

rule("MCCREE HIGHNOON")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		McCree;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(McCree);
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Set Status(Event Player, Null, Phased Out, 1.557);
	}
}

rule("Torb smiley damage")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Torbjörn;
	}

	actions
	{
		Create Icon(All Players(Team 1), Victim, Sad, Visible To and Position, Color(Orange), True);
		Event Player.torb_smiley = Last Created Entity;
		Set Move Speed(Victim, 55);
		Wait(1, Ignore Condition);
		Set Move Speed(Victim, 100);
		Destroy Icon(Event Player.torb_smiley);
	}
}

rule("Torbjörn ONFIRE !")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Torbjörn;
	}

	conditions
	{
		Hero(Torbjörn) == True;
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Set Status(Event Player, Event Player, Burning, 3);
		Wait(0, Ignore Condition);
		Abort;
	}
}

rule("tracer ult on melee")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Tracer;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Melee)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Players Within Radius(Event Player, 5, Team 2, Off) == True;
	}

	actions
	{
		Stop Facing(Event Player);
		Start Facing(Event Player, Update Every Frame(Direction Towards(Eye Position(Event Player), Eye Position(Closest Player To(
			Event Player, Team 2)))), Absolute Value(9999999.000), To World, Direction and Turn Rate);
		disabled Start Facing(Event Player, Update Every Frame(Direction Towards(Eye Position(Event Player), Eye Position(Closest Player To(
			Event Player, Team 2)))), Absolute Value(9999999.000) + Absolute Value(9999999.000), To World, Direction and Turn Rate);
		disabled Start Facing(Event Player, Vector Towards(Eye Position(Event Player), Eye Position(Victim) + World Vector Of(Up, Victim, Rotation)
			* -1 + World Vector Of(Vector(Speed Of In Direction(Victim, World Vector Of(Left, Event Player, Rotation)) / Absolute Value(
			9999999.000) / 1, 0, 0), Event Player, Rotation)), Absolute Value(9999999.000) + Absolute Value(9999999.000), To World,
			Direction and Turn Rate);
		Wait(0.055, Ignore Condition);
		Press Button(Event Player, Button(Ultimate));
		Wait(0.287, Ignore Condition);
		Stop Facing(Event Player);
	}
}

rule("Winston trap effect")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Winston;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		If(Global.shield_location[0] == Vector(0, -287, 0));
			Global.shield_location[0] = Vector(X Component Of(Position Of(Event Player)), Y Component Of(Nearest Walkable Position(
				Event Player)), Z Component Of(Position Of(Event Player)));
			Create Effect(All Players(All Teams), Sphere, Color(Blue), Global.shield_location[0], 5, Visible To Position and Radius);
			Event Player.winstonBubbleTAB[0] += Last Created Entity;
			Wait(9, Ignore Condition);
			Destroy Effect(Event Player.winstonBubbleTAB[0]);
			Global.shield_location[0] = Vector(0, -287, 0);
		Else;
			Global.shield_location[1] = Vector(X Component Of(Position Of(Event Player)), Y Component Of(Nearest Walkable Position(
				Event Player)), Z Component Of(Position Of(Event Player)));
			Create Effect(All Players(All Teams), Sphere, Color(Blue), Global.shield_location[1], 5, Visible To Position and Radius);
			Event Player.winstonBubbleTAB[1] += Last Created Entity;
			Wait(9, Ignore Condition);
			Destroy Effect(Event Player.winstonBubbleTAB[1]);
			Global.shield_location[1] = Vector(0, -287, 0);
		End;
	}
}

rule("Winston trap debuff")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		(Array Contains(Players Within Radius(Global.shield_location[0], 5, All Teams, Off), Event Player) || Array Contains(
			Players Within Radius(Global.shield_location[1], 5, All Teams, Off), Event Player)) == True;
		Global.shield_location != Vector(0, -287, 0);
	}

	actions
	{
		While(Array Contains(Players Within Radius(Global.shield_location[0], 5, All Teams, Off), Event Player) || Array Contains(
			Players Within Radius(Global.shield_location[1], 5, All Teams, Off), Event Player));
			Set Move Speed(Event Player, 10);
			Set Gravity(Event Player, 300);
			Wait(0.250, Ignore Condition);
		End;
		Set Move Speed(Event Player, 100);
		Set Gravity(Event Player, 100);
	}
}

rule("Echo Speed")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Echo;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Echo);
		Is Using Ability 1(Event Player) == True;
		Button(Ability 1) == True;
	}

	actions
	{
		Wait(0.750, Ignore Condition);
		Press Button(Event Player, Button(Ability 1));
		Set Status(Event Player, Null, Hacked, 0.557);
	}
}

rule("Hanzo smiley damage")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Hanzo;
	}

	actions
	{
		Create Icon(All Players(All Teams), Victim, Heart, Visible To and Position, Color(Yellow), True);
		Event Player.Hanzo_smiley = Last Created Entity;
		Wait(1.728, Ignore Condition);
		Destroy Icon(Event Player.Hanzo_smiley);
	}
}

rule("genjiZW position sphere")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Genji;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Destroy Effect(Event Player.genji_pos_sphere[8]);
		Event Player.genji_player_sphere[3] = Position Of(Event Player);
	}
}

rule("genjiZW Sphere")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Genji;
	}

	conditions
	{
		Event Player.genji_player_sphere[3] == True;
	}

	actions
	{
		Players Within Radius(Event Player.genji_player_sphere[3], 10, All Teams, Off).genji_allplayer_sphere = True;
		Create In-World Text(All Players(All Teams), Custom String("ZA WARUDO !"), Event Player, 3, Clip Against Surfaces,
			Visible To Position and String, Color(White), Default Visibility);
		Event Player.genji_text_ZW = Last Text ID;
		Create In-World Text(All Players(All Teams), Custom String("NANI ?!"), Players Within Radius(Event Player, 10, Team 2, Off), 3,
			Clip Against Surfaces, Visible To Position and String, Color(White), Default Visibility);
		Event Player.nani_text_genji_ZW = Last Text ID;
		Wait(0.016, Ignore Condition);
		Create Effect(Null, Sphere, Color(Red), Event Player.genji_player_sphere[3], 10, None);
		Event Player.genji_tab_sphere[0] = Last Created Entity;
		Create In-World Text(Null, Custom String("ZA WARUDO"), Event Player.genji_player_sphere[3] + Up * 0.500, 1.500, Do Not Clip,
			Visible To Position and String, Color(White), Default Visibility);
		Event Player.genji_tab_sphere[1] = Last Text ID;
		Create Icon(Null, Event Player.genji_player_sphere[3] + Up * 0.700, Bolt, Visible To and Position, Color(Blue), False);
		Event Player.genji_tab_sphere[2] = Last Created Entity;
		Wait(3, Abort When False);
		Destroy Effect(Event Player.genji_tab_sphere[0]);
		Destroy In-World Text(Event Player.genji_tab_sphere[1]);
		Destroy Icon(Event Player.genji_tab_sphere[2]);
		All Players(All Teams).genji_allplayer_sphere = False;
		Event Player.genji_player_sphere[3] = 0;
		Destroy In-World Text(Event Player.genji_text_ZW);
		Destroy In-World Text(Event Player.nani_text_genji_ZW);
	}
}

rule("genjiZW Trap effect")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.genji_allplayer_sphere == True;
		Distance Between(Event Player, Event Player.genji_player_sphere[3]) >= 0;
	}

	actions
	{
		disabled Pause Match Time;
		Set Gravity(Event Player, 0);
		Set Projectile Speed(Event Player, 10);
		Set Projectile Gravity(Event Player, 10);
		Set Move Speed(Event Player, 0);
		Wait(0.055, Ignore Condition);
		Loop If Condition Is True;
		disabled Unpause Match Time;
		Set Gravity(Event Player, 100);
		Set Move Speed(Event Player, 100);
		Set Projectile Speed(Event Player, 100);
		Set Projectile Gravity(Event Player, 100);
	}
}

rule("genjiZW need a ennemy to ult")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Genji;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Genji);
		(Distance Between(Event Player, Closest Player To(Event Player, Team 2)) >= 10) == True;
	}

	actions
	{
		Disallow Button(Event Player, Button(Ultimate));
		Wait(0.287, Ignore Condition);
		Loop If Condition Is True;
		Allow Button(Event Player, Button(Ultimate));
	}
}

disabled rule("Hammond Hook")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Wrecking Ball;
	}

	conditions
	{
		Is Firing Secondary(Event Player) == True;
		Is On Ground(Event Player) == False;
		Event Player.Hammond_varPgrap == Null;
	}

	actions
	{
		Event Player.brigvar1 = 0;
		Event Player.Hammond_varPgrap = True;
		Chase Player Variable At Rate(Event Player, brigvar1, 100, 10, Destination and Rate);
		Wait(10, Ignore Condition);
		Skip If(Is Firing Secondary(Event Player) == False, 2);
		Set Status(Event Player, Null, Stunned, 0.001);
		Small Message(Event Player, String("Stop"));
		Wait(0.250, Ignore Condition);
		Event Player.Hammond_varPgrap = Null;
	}
}

rule("Hammond TP on head")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Wrecking Ball;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Teleport(Event Player, Eye Position(Closest Player To(Event Player, Team 2)) + Vector(0, 2.100, 0));
	}
}

rule("Hammond need a ennemy to TP")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Wrecking Ball;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Wrecking Ball);
		(Distance Between(Event Player, Closest Player To(Event Player, Team 2)) >= 10) == True;
	}

	actions
	{
		Disallow Button(Event Player, Button(Ability 2));
		Wait(0.055, Ignore Condition);
		Loop If Condition Is True;
		Allow Button(Event Player, Button(Ability 2));
	}
}

rule("Hammond invincible PillDrive")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Wrecking Ball;
	}

	conditions
	{
		Is In Air(Event Player) == True;
		Is Button Held(Event Player, Button(Crouch)) == True;
		Altitude Of(Event Player) >= 2;
	}

	actions
	{
		Set Status(Event Player, Null, Invincible, 1.800);
		Set Invisible(Event Player, Enemies);
		disabled Create Effect(Event Player, Sparkles, Color(White), Event Player, 3, Visible To Position and Radius);
		Set Move Speed(Event Player, 130);
		Wait(1.800, Ignore Condition);
		Set Invisible(Event Player, None);
		disabled Destroy Effect(Last Created Entity);
		Set Move Speed(Event Player, 100);
		Wait(8.200, Ignore Condition);
	}
}

rule("Reaper unPhase TP")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Reaper;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Set Status(Event Player, Null, Phased Out, 1.500);
		disabled Set Invisible(Event Player, All);
		Set Move Speed(Event Player, 128);
		Wait(1.500, Ignore Condition);
		Set Move Speed(Event Player, 100);
	}
}

rule("Reaper Shadowwraith nerf")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Reaper;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Wait(1, Abort When False);
		Press Button(Event Player, Button(Primary Fire));
	}
}

rule("Reaper SpeedBoostUlt")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Reaper;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Set Move Speed(Event Player, 214);
		Wait(3, Ignore Condition);
		Set Move Speed(Event Player, 100);
	}
}

rule("Reaper IconDMG Ult")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Reaper;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Create Icon(All Players(All Teams), Victim, Skull, Visible To and Position, Color(Lime Green), True);
		Event Player.reaper_ultdmg_icon = Last Created Entity;
		Wait(3, Ignore Condition);
		Destroy Icon(Event Player.reaper_ultdmg_icon);
	}
}

rule("Moira purple sphere slow")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Moira;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Melee)) == False;
	}

	actions
	{
		Create Icon(All Players(All Teams), Victim, Poison 2, Visible To and Position, Color(Purple), True);
		Event Player.Moira_icon_purplesphere = Last Created Entity;
		Set Move Speed(Victim, 55);
		Wait(0.557, Ignore Condition);
		Set Move Speed(Victim, 100);
		Destroy Icon(Event Player.Moira_icon_purplesphere);
	}
}

rule("Doomfist uppercut invincible")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Doomfist;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Set Status(Event Player, Null, Invincible, 0.755);
	}
}

rule("Doomfist choc invincible")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Doomfist;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Set Status(Event Player, Null, Invincible, 0.755);
	}
}

rule("Echo bomb slow")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Echo;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Melee)) == False;
	}

	actions
	{
		Create Icon(All Players(All Teams), Victim, Recycle, Visible To and Position, Color(Green), True);
		Event Player.EchoSlowBomb = Last Created Entity;
		Set Move Speed(Victim, 55);
		Wait(0.557, Ignore Condition);
		Set Move Speed(Victim, 100);
		Destroy Icon(Event Player.EchoSlowBomb);
	}
}

rule("D.va rez by emote")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		D.Va;
	}

	conditions
	{
		Is Alive(Closest Player To(Event Player, Team 1)) == False;
		Event Player.Rez_actif == True;
		Is Communicating Any Emote(Event Player) == True;
		(Distance Between(Event Player, Closest Player To(Event Player, Team 1)) <= 2) == True;
	}

	actions
	{
		Resurrect(Closest Player To(Event Player, Team 1));
		Wait(0.250, Ignore Condition);
		Event Player.Rez_actif = False;
		Destroy HUD Text(Event Player.dva_res_text_int);
	}
}

disabled rule("D.va player die icon")
{
	event
	{
		Player Died;
		Team 1;
		All;
	}

	actions
	{
		disabled Event Player.var_player_dead = Is Dead(Event Player);
		Event Player.var_player_dead = Hero Of(Event Player);
		disabled While(Is Dead(Event Player.var_player_dead) == True);
		Create In-World Text(Players On Hero(Hero(D.Va), Team 1), Hero Icon String(Event Player.var_player_dead), Event Player, 1,
			Do Not Clip, Visible To Position and String, Color(White), Default Visibility);
		disabled End;
		Event Player.vartext_player_dead = Last Text ID;
	}
}

disabled rule("D.va player icon remove when alive")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
	}

	actions
	{
		Destroy In-World Text(Event Player.vartext_player_dead);
		Wait(0.250, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("D.va interface RES (シ)")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		D.Va;
	}

	actions
	{
		Create HUD Text(Event Player, Custom String("Res active ♥"), Null, Null, Left, 0, Color(Green), Color(White), Color(White),
			Visible To and String, Default Visibility);
		Event Player.dva_res_text_int = Last Text ID;
		Event Player.Rez_actif = True;
	}
}

rule("D.va can't RES if solo seeker ¯\\_(ツ)_/¯")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		D.Va;
	}

	conditions
	{
		Is Game In Progress == True;
		Number Of Living Players(Team 2) < 2;
	}

	actions
	{
		Event Player.Rez_actif = False;
		Destroy HUD Text(Event Player.dva_res_text_int);
	}
}

rule("Junkrat remove third person when he ult")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Junkrat;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Stop Camera(Event Player);
	}
}

rule("Rein team2 one hit with firestrike // so mei wall")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Reinhardt;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Set Damage Dealt(Event Player, 10000);
		Wait(1, Ignore Condition);
		Set Damage Dealt(Event Player, 100);
	}
}

rule("Brigitte whip shot speed buff")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Brigitte;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Wait(0.250, Restart When True);
		Set Move Speed(Event Player, 200);
		Loop If Condition Is True;
		Set Move Speed(Event Player, 100);
	}
}

rule("Brigitte ult speed buff")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Brigitte;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Set Status(Event Player, Null, Hacked, 10);
		Set Move Speed(Event Player, 114);
		Wait(10, Ignore Condition);
		Set Move Speed(Event Player, 100);
	}
}

rule("Brig whip jumpboost")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Brigitte;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Wait(0.155, Ignore Condition);
		Event Player.brigvar1[0] = Facing Direction Of(Event Player);
		Event Player.brigvar2[4] = Ray Cast Hit Position(Eye Position(Event Player) + World Vector Of(Vector(0.025, -0.020, 0),
			Event Player, Rotation), Eye Position(Event Player) + World Vector Of(Vector(0.025, -0.020, 0), Event Player, Rotation)
			+ Facing Direction Of(Event Player) * 100, Null, All Players(All Teams), False);
		Event Player.brigvar2[5] = Ray Cast Hit Position(Eye Position(Event Player) + World Vector Of(Vector(-0.025, -0.020, 0),
			Event Player, Rotation), Eye Position(Event Player) + World Vector Of(Vector(-0.025, -0.020, 0), Event Player, Rotation)
			+ Facing Direction Of(Event Player) * 100, Null, All Players(All Teams), False);
		Event Player.brigvar2[6] = Ray Cast Hit Position(Eye Position(Event Player) + Vector(0, -0.175, 0), Eye Position(Event Player)
			+ Vector(0, -0.175, 0) + Facing Direction Of(Event Player) * 100, Null, All Players(All Teams), False);
		Event Player.brigvar3[0] = Distance Between(Eye Position(Event Player), Event Player.brigvar2[4]);
		Event Player.brigvar3[1] = Distance Between(Eye Position(Event Player), Event Player.brigvar2[5]);
		Event Player.brigvar3[2] = Distance Between(Eye Position(Event Player), Event Player.brigvar2[6]);
		Skip If(Sorted Array(Event Player.brigvar3, Current Array Element) > 20.400, 2);
		disabled Wait(Event Player.brigvar3[0] / 50 + 0, Ignore Condition);
		Wait(0.028, Ignore Condition);
		Apply Impulse(Event Player, Event Player.brigvar1[0], 24, To World, Cancel Contrary Motion);
	}
}

rule("#1 OrisaMount")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Array Contains(All Players(Team Of(Event Player)), Event Player.varOrisaKnight) == True;
		Hero Of(Event Player) != Hero(Orisa);
	}

	actions
	{
		Attach Players(Event Player, Event Player.varOrisaKnight, Vector(0, 0.728, -0.828));
		Wait(0.255, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("#2 OrisaMount - Activate")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Hero Of(Closest Player To(Event Player, Team Of(Event Player))) == Hero(Orisa);
		Is Button Held(Event Player, Button(Crouch)) == True;
		Event Player.varOrisaKnight == Null;
		Event Player.varOrisaMount == True;
		Closest Player To(Event Player, Team Of(Event Player)).varOrisaKnight == Null;
		Hero Of(Event Player) != Hero(Orisa);
		Array Contains(Players Within Radius(Event Player, 4, Team Of(Event Player), Off), Closest Player To(Event Player, Team Of(
			Event Player))) == True;
		Is Alive(Closest Player To(Event Player, Team Of(Event Player))) == True;
	}

	actions
	{
		Event Player.varOrisaKnight = Null;
		Closest Player To(Event Player, Team Of(Event Player)).varOrisaKnight = Null;
		Small Message(Event Player, String("{0} {1}", String("{0} - {1}", String("Crouch"), Custom String("Stop Riding")),
			Closest Player To(Event Player, Team Of(Event Player))));
		Event Player.varOrisaKnight = Closest Player To(Event Player, Team Of(Event Player));
		Event Player.varOrisaMount = False;
		Set Status(Event Player, Null, Phased Out, 9999);
		Closest Player To(Event Player, Team Of(Event Player)).varOrisaKnight = Event Player;
		If(Hero Of(Event Player) == Hero(Mei) || Hero Of(Event Player) == Hero(Zarya));
			Disallow Button(Event Player, Button(Ability 1));
		End;
		Wait(1, Ignore Condition);
		Event Player.varOrisaMount = True;
	}
}

rule("#3 OrisaMount - Deactivate")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Crouch)) == True;
		Event Player.varOrisaKnight != Null;
		Event Player.varOrisaMount == True;
		Hero Of(Event Player) != Hero(Orisa);
	}

	actions
	{
		Event Player.varOrisaKnight.varOrisaKnight = Null;
		Event Player.varOrisaKnight = Null;
		Detach Players(Event Player);
		Teleport(Event Player, Nearest Walkable Position(Position Of(Closest Player To(Event Player, Team 1))));
		Event Player.varOrisaMount = False;
		If(Hero Of(Event Player) == Hero(Mei) || Hero Of(Event Player) == Hero(Zarya));
			Allow Button(Event Player, Button(Ability 1));
		End;
		Wait(0.557, Ignore Condition);
		Clear Status(Event Player, Phased Out);
		Wait(1, Ignore Condition);
		Event Player.varOrisaMount = True;
	}
}

rule("#4 OrisaMount - Initialize")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Event Player.varOrisaKnight = Null;
		Event Player.varOrisaMount = True;
		Detach Players(Event Player);
		Event Player.varOrisaKnight = Null;
		If(Hero Of(Event Player) == Hero(Mei) || Hero Of(Event Player) == Hero(Zarya));
			Allow Button(Event Player, Button(Ability 1));
		End;
		Wait(0.557, Ignore Condition);
		Clear Status(Event Player, Phased Out);
	}
}

rule("#5 OrisaMount - Kill Stack")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Array Contains(Filtered Array(All Players(Team Of(Event Player)), (Is Alive(Current Array Element) == True && Has Spawned(
			Current Array Element) == True && Hero Of(Current Array Element) == Hero(Orisa)) == True), Event Player.varOrisaKnight)
			!= True;
		Hero Of(Event Player) != Hero(Orisa);
	}

	actions
	{
		Detach Players(Event Player);
		Teleport(Event Player, Nearest Walkable Position(Position Of(Closest Player To(Event Player, Team 1))));
		Event Player.varOrisaKnight.varOrisaKnight = Null;
		Event Player.varOrisaKnight = Null;
		If(Hero Of(Event Player) == Hero(Mei) || Hero Of(Event Player) == Hero(Zarya));
			Allow Button(Event Player, Button(Ability 1));
		End;
		Wait(1.728, Ignore Condition);
		Clear Status(Event Player, Phased Out);
	}
}

rule("#6 OrisaMount - Clear the rider slot if the rider leaves")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Array Contains(All Players(Team Of(Event Player)), Event Player.varOrisaKnight) != True;
	}

	actions
	{
		Event Player.varOrisaKnight = Null;
	}
}

rule("#7 OrisaMount - Message")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Hero Of(Closest Player To(Event Player, Team Of(Event Player))) == Hero(Orisa);
		Event Player.varOrisaKnight == Null;
		Event Player.varOrisaMount == True;
		Closest Player To(Event Player, Team Of(Event Player)).varOrisaKnight == Null;
		Hero Of(Event Player) != Hero(Orisa);
		Array Contains(Players Within Radius(Event Player, 4, Team Of(Event Player), Off), Closest Player To(Event Player, Team Of(
			Event Player))) == True;
		Is Alive(Closest Player To(Event Player, Team Of(Event Player))) == True;
	}

	actions
	{
		Small Message(Event Player, String("{0} {1}", String("{0} - {1}", String("Crouch"), Custom String("Ride")), Closest Player To(
			Event Player, Team Of(Event Player))));
	}
}

rule("SIGMA TEAM 1 Rock Booster")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Sigma;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		If(Vertical Facing Angle Of(Event Player) >= 28);
			Wait(0.650, Ignore Condition);
			Apply Impulse(Event Player, Facing Direction Of(Event Player), -22, To World, Cancel Contrary Motion);
		End;
	}
}

rule("SIGMA TEAM 2 Rock Booster")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		Sigma;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		If(Vertical Facing Angle Of(Event Player) >= 28);
			Wait(0.650, Ignore Condition);
			Apply Impulse(Event Player, Facing Direction Of(Event Player), -18, To World, Cancel Contrary Motion);
		End;
	}
}

rule("SIGMA HIDER // USING HIS ULT")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Sigma;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Heal(Victim, Null, 2000);
	}
}

rule("ANA Nade jumpboost")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Ana;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Apply Impulse(Event Player, Facing Direction Of(Event Player), -14, To World, Cancel Contrary Motion);
	}
}

rule("ANA TP SleepDart")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Ana;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Teleport(Event Player, Victim);
	}
}

rule("SOLDIER - 76 Force seeker to jump with his ult")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Soldier: 76;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Press Button(Victim, Button(Jump));
		Press Button(Victim, Button(Jump));
		Wait(0.055, Ignore Condition);
		Start Forcing Throttle(Victim, 0, 0, 1, 2, 1, 2);
		Wait(0.055, Ignore Condition);
		Stop Forcing Throttle(Victim);
	}
}

rule("ZENYATTA || KUNG-FU MASTER")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Zenyatta;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Melee)) == True;
		Button(Melee) == True;
	}

	actions
	{
		Apply Impulse(Victim, Facing Direction Of(Event Player), 20, To World, Cancel Contrary Motion);
		Set Status(Event Player, Null, Phased Out, 1.728);
	}
}

rule("REAPER ULTIMATE through Walls")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Reaper;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Reaper);
		Is Using Ultimate(Event Player) == True;
		Is Moving(Event Player) == True;
	}

	actions
	{
		Wait(0.287, Abort When False);
		While(Is Using Ultimate(Event Player) && Is Moving(Event Player));
			If(Speed Of(Event Player) < 7.550);
				If(Is Standing(Event Player));
					Break;
				End;
				Teleport(Event Player, Nearest Walkable Position(Position Of(Event Player) + World Vector Of(Throttle Of(Event Player),
					Event Player, Rotation)));
			End;
			Wait(0.287, Ignore Condition);
		End;
	}
}

rule("REAPER ULT BUMP")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Reaper;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Apply Impulse(Victim, Facing Direction Of(Event Player), 25.728, To World, Cancel Contrary Motion);
	}
}

rule("Rein Active")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Reinhardt;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == False;
		Event Player.varRein1 == Null;
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
		Hero Of(Event Player) == Hero(Reinhardt);
	}

	actions
	{
		Event Player.varRein1 = True;
		Set Invisible(Event Player, Enemies);
		Disallow Button(Event Player, Button(Ability 1));
		Set Status(Event Player, Null, Hacked, 9999);
		Wait(3, Ignore Condition);
		Disallow Button(Event Player, Button(Secondary Fire));
		Set Invisible(Event Player, None);
	}
}

rule("Rein Stop")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Reinhardt;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Reinhardt);
		Is Button Held(Event Player, Button(Secondary Fire)) == False;
		Event Player.varRein1 != Null;
	}

	actions
	{
		Disallow Button(Event Player, Button(Secondary Fire));
		Set Invisible(Event Player, None);
		Event Player.Rein_Msg = 10;
		Allow Button(Event Player, Button(Ability 1));
		Clear Status(Event Player, Hacked);
		Chase Player Variable At Rate(Event Player, Rein_Msg, 0, 1, Destination and Rate);
		Wait(10, Ignore Condition);
		disabled Event Player.Rein_Msg += Icon String(Happy);
		Allow Button(Event Player, Button(Secondary Fire));
		Event Player.varRein1 = Null;
	}
}

rule("BaptisteFakeUltimate Indicator effect (front)")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Baptiste;
	}

	conditions
	{
		Global.varDeploy_center == 0;
		Hero Of(Event Player) == Hero(Baptiste);
		Ultimate Charge Percent(Event Player) == 100;
		Is Button Held(Event Player, Button(Ultimate)) == True;
	}

	actions
	{
		Create Beam Effect(Filtered Array(Event Player, Event Player.varVisualize_front == True), Good Beam, Ray Cast Hit Position(
			Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player) * 35,
			Event Player, Event Player, True), Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player)
			+ Facing Direction Of(Event Player) * 35, Event Player, Event Player, True) - Vector(0, 30, 0), Event Player, Event Player,
			True) - Vector(0, 1, 0) + World Vector Of(Vector(4.500, 0, 0), Event Player, Rotation), Ray Cast Hit Position(
			Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player) * 35,
			All Players(All Teams), Event Player, True), Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player)
			+ Facing Direction Of(Event Player) * 35, Event Player, Event Player, True) - Vector(0, 30, 0), Event Player, Event Player,
			True) - Vector(0, 1, 0) + World Vector Of(Vector(-4.500, 0, 0), Event Player, Rotation), Color(Blue),
			Visible To Position and Radius);
		Modify Player Variable(Event Player, varVisualFrontBapt, Append To Array, Last Created Entity);
		Create Beam Effect(Filtered Array(Event Player, Event Player.varVisualize_front == True), Good Beam, Ray Cast Hit Position(
			Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player) * 35,
			Event Player, Event Player, True), Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player)
			+ Facing Direction Of(Event Player) * 35, Event Player, Event Player, True) - Vector(0, 30, 0), Event Player, Event Player,
			True) - Vector(0, 1, 0) + World Vector Of(Vector(4.500, 0, 0), Event Player, Rotation) + Vector(0, 4.700, 0),
			Ray Cast Hit Position(Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(
			Event Player) * 35, Event Player, Event Player, True), Ray Cast Hit Position(Eye Position(Event Player), Eye Position(
			Event Player) + Facing Direction Of(Event Player) * 35, All Players(All Teams), Event Player, True) - Vector(0, 30, 0),
			Event Player, Event Player, True) + World Vector Of(Vector(-4.500, 0, 0), Event Player, Rotation) + Vector(0, 3.700, 0), Color(
			Blue), Visible To Position and Radius);
		Modify Player Variable(Event Player, varVisualFrontBapt, Append To Array, Last Created Entity);
		Create Beam Effect(Filtered Array(Event Player, Event Player.varVisualize_front == True), Good Beam, Ray Cast Hit Position(
			Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player) * 35,
			Event Player, Event Player, True), Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player)
			+ Facing Direction Of(Event Player) * 35, Event Player, Event Player, True) - Vector(0, 30, 0), Event Player, Event Player,
			True) - Vector(0, 1, 0) + World Vector Of(Vector(4.500, 0, 0), Event Player, Rotation), Ray Cast Hit Position(
			Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player) * 35,
			All Players(All Teams), Event Player, True), Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player)
			+ Facing Direction Of(Event Player) * 35, Event Player, Event Player, True) - Vector(0, 30, 0), Event Player, Event Player,
			True) - Vector(0, 1, 0) + World Vector Of(Vector(4.500, 0, 0), Event Player, Rotation) + Vector(0.001, 4.700, 0.001), Color(
			Blue), Visible To Position and Radius);
		Modify Player Variable(Event Player, varVisualFrontBapt, Append To Array, Last Created Entity);
		Create Beam Effect(Filtered Array(Event Player, Event Player.varVisualize_front == True), Good Beam, Ray Cast Hit Position(
			Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player) * 35,
			Event Player, Event Player, True), Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player)
			+ Facing Direction Of(Event Player) * 35, Event Player, Event Player, True) - Vector(0, 30, 0), Event Player, Event Player,
			True) - Vector(0, 1, 0) + World Vector Of(Vector(-4.500, 0, 0), Event Player, Rotation), Ray Cast Hit Position(
			Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player) * 35,
			All Players(All Teams), Event Player, True), Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player)
			+ Facing Direction Of(Event Player) * 35, Event Player, Event Player, True) - Vector(0, 30, 0), Event Player, Event Player,
			True) - Vector(0, 1, 0) + World Vector Of(Vector(-4.500, 0, 0), Event Player, Rotation) + Vector(0.001, 4.700, 0.001), Color(
			Blue), Visible To Position and Radius);
		Modify Player Variable(Event Player, varVisualFrontBapt, Append To Array, Last Created Entity);
		Create Beam Effect(Filtered Array(Event Player, Event Player.varVisualize_front == True), Good Beam, Ray Cast Hit Position(
			Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player) * 35,
			Event Player, Event Player, True), Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player)
			+ Facing Direction Of(Event Player) * 35, Event Player, Event Player, True) - Vector(0, 30, 0), Event Player, Event Player,
			True) - Vector(0, 1, 0) + World Vector Of(Vector(-4.500, 0, 0), Event Player, Rotation) + Vector(0, 4.700, 0),
			Ray Cast Hit Position(Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(
			Event Player) * 35, Event Player, Event Player, True), Ray Cast Hit Position(Eye Position(Event Player), Eye Position(
			Event Player) + Facing Direction Of(Event Player) * 35, All Players(All Teams), Event Player, True) - Vector(0, 30, 0),
			Event Player, Event Player, True) + World Vector Of(Vector(4.500, 0, 0), Event Player, Rotation) + Vector(0, -1, 0), Color(
			Blue), Visible To Position and Radius);
		Modify Player Variable(Event Player, varVisualFrontBapt, Append To Array, Last Created Entity);
		Create Beam Effect(Filtered Array(Event Player, Event Player.varVisualize_front == True), Good Beam, Ray Cast Hit Position(
			Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player) * 35,
			Event Player, Event Player, True), Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player)
			+ Facing Direction Of(Event Player) * 35, Event Player, Event Player, True) - Vector(0, 30, 0), Event Player, Event Player,
			True) - Vector(0, 1, 0) + World Vector Of(Vector(4.500, 0, 0), Event Player, Rotation) + Vector(0, 4.700, 0),
			Ray Cast Hit Position(Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(
			Event Player) * 35, Event Player, Event Player, True), Ray Cast Hit Position(Eye Position(Event Player), Eye Position(
			Event Player) + Facing Direction Of(Event Player) * 35, All Players(All Teams), Event Player, True) - Vector(0, 30, 0),
			Event Player, Event Player, True) + World Vector Of(Vector(-4.500, 0, 0), Event Player, Rotation) + Vector(0, -1, 0), Color(
			Blue), Visible To Position and Radius);
		Modify Player Variable(Event Player, varVisualFrontBapt, Append To Array, Last Created Entity);
	}
}

disabled rule("BaptisteFakeUltimate Indicator effect (side)")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Baptiste;
	}

	conditions
	{
		Global.varDeploy_center == 0;
		Hero Of(Event Player) == Hero(Baptiste);
		Ultimate Charge Percent(Event Player) == 100;
		Is Button Held(Event Player, Button(Ultimate)) == True;
	}

	actions
	{
		Create Beam Effect(Filtered Array(Event Player, Event Player.varVisualize_side == True), Good Beam, Ray Cast Hit Position(
			Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player) * 35,
			Event Player, Event Player, True), Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player)
			+ Facing Direction Of(Event Player) * 35, Event Player, Event Player, True) - Vector(0, 30, 0), Event Player, Event Player,
			True) - Vector(0, 1, 0) + World Vector Of(Vector(0, 0, -4.500), Event Player, Rotation), Ray Cast Hit Position(
			Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player) * 35,
			All Players(All Teams), Event Player, True), Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player)
			+ Facing Direction Of(Event Player) * 35, Event Player, Event Player, True) - Vector(0, 30, 0), Event Player, Event Player,
			True) - Vector(0, 1, 0) + World Vector Of(Vector(0, 0, 4.500), Event Player, Rotation), Color(Blue),
			Visible To Position and Radius);
		Modify Player Variable(Event Player, varVisualSideBapt, Append To Array, Last Created Entity);
		Create Beam Effect(Filtered Array(Event Player, Event Player.varVisualize_side == True), Good Beam, Ray Cast Hit Position(
			Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player) * 35,
			Event Player, Event Player, True), Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player)
			+ Facing Direction Of(Event Player) * 35, Event Player, Event Player, True) - Vector(0, 30, 0), Event Player, Event Player,
			True) - Vector(0, 1, 0) + World Vector Of(Vector(0, 0, 4.500), Event Player, Rotation) + Vector(0, 4.700, 0),
			Ray Cast Hit Position(Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(
			Event Player) * 35, Event Player, Event Player, True), Ray Cast Hit Position(Eye Position(Event Player), Eye Position(
			Event Player) + Facing Direction Of(Event Player) * 35, All Players(All Teams), Event Player, True) - Vector(0, 30, 0),
			Event Player, Event Player, True) + World Vector Of(Vector(0, 0, -4.500), Event Player, Rotation) + Vector(0, 3.700, 0), Color(
			Blue), Visible To Position and Radius);
		Modify Player Variable(Event Player, varVisualSideBapt, Append To Array, Last Created Entity);
		Create Beam Effect(Filtered Array(Event Player, Event Player.varVisualize_side == True), Good Beam, Ray Cast Hit Position(
			Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player) * 35,
			Event Player, Event Player, True), Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player)
			+ Facing Direction Of(Event Player) * 35, Event Player, Event Player, True) - Vector(0, 30, 0), Event Player, Event Player,
			True) - Vector(0, 1, 0) + World Vector Of(Vector(0, 0, 4.500), Event Player, Rotation), Ray Cast Hit Position(
			Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player) * 35,
			All Players(All Teams), Event Player, True), Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player)
			+ Facing Direction Of(Event Player) * 35, Event Player, Event Player, True) - Vector(0, 30, 0), Event Player, Event Player,
			True) - Vector(0, 1, 0) + World Vector Of(Vector(0, 0, 4.500), Event Player, Rotation) + Vector(0.001, 4.700, 0.001), Color(
			Blue), Visible To Position and Radius);
		Modify Player Variable(Event Player, varVisualSideBapt, Append To Array, Last Created Entity);
		Create Beam Effect(Filtered Array(Event Player, Event Player.varVisualize_side == True), Good Beam, Ray Cast Hit Position(
			Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player) * 35,
			Event Player, Event Player, True), Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player)
			+ Facing Direction Of(Event Player) * 35, Event Player, Event Player, True) - Vector(0, 30, 0), Event Player, Event Player,
			True) - Vector(0, 1, 0) + World Vector Of(Vector(0, 0, -4.500), Event Player, Rotation), Ray Cast Hit Position(
			Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player) * 35,
			All Players(All Teams), Event Player, True), Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player)
			+ Facing Direction Of(Event Player) * 35, Event Player, Event Player, True) - Vector(0, 30, 0), Event Player, Event Player,
			True) - Vector(0, 1, 0) + World Vector Of(Vector(0, 0, -4.500), Event Player, Rotation) + Vector(0.001, 4.700, 0.001), Color(
			Blue), Visible To Position and Radius);
		Modify Player Variable(Event Player, varVisualSideBapt, Append To Array, Last Created Entity);
	}
}

rule("BaptisteFakeUltimate Matrix effect (fixed location)")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Baptiste;
	}

	conditions
	{
		Global.varDeploy_center == 0;
		Hero Of(Event Player) == Hero(Baptiste);
		Ultimate Charge Percent(Event Player) == 100;
		Is Button Held(Event Player, Button(Ultimate)) == True;
	}

	actions
	{
		Create Beam Effect(All Players(All Teams), Bad Beam, Event Player.varDeploy_pos[0], Event Player.varDeploy_pos[1], Color(Red),
			Visible To Position and Radius);
		Modify Player Variable(Event Player, varVisualWallEffectBapt, Append To Array, Last Created Entity);
		Create Beam Effect(All Players(All Teams), Bad Beam, Event Player.varDeploy_pos[1], Event Player.varDeploy_pos[2], Color(Red),
			Visible To Position and Radius);
		Modify Player Variable(Event Player, varVisualWallEffectBapt, Append To Array, Last Created Entity);
		Create Beam Effect(All Players(All Teams), Bad Beam, Event Player.varDeploy_pos[2], Event Player.varDeploy_pos[3], Color(Red),
			Visible To Position and Radius);
		Modify Player Variable(Event Player, varVisualWallEffectBapt, Append To Array, Last Created Entity);
		Create Beam Effect(All Players(All Teams), Bad Beam, Event Player.varDeploy_pos[3], Event Player.varDeploy_pos[0], Color(Red),
			Visible To Position and Radius);
		Modify Player Variable(Event Player, varVisualWallEffectBapt, Append To Array, Last Created Entity);
		Create Beam Effect(All Players(All Teams), Bad Beam, Event Player.varDeploy_pos[2], Event Player.varDeploy_pos[0], Color(Red),
			Visible To Position and Radius);
		Modify Player Variable(Event Player, varVisualWallEffectBapt, Append To Array, Last Created Entity);
		Create Beam Effect(All Players(All Teams), Bad Beam, Event Player.varDeploy_pos[1], Event Player.varDeploy_pos[3], Color(Red),
			Visible To Position and Radius);
		Modify Player Variable(Event Player, varVisualWallEffectBapt, Append To Array, Last Created Entity);
	}
}

rule("BaptisteFakeUltimate Visualize indicator")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Baptiste;
	}

	conditions
	{
		Global.varDeploy_center == 0;
		Hero Of(Event Player) == Hero(Baptiste);
		Ultimate Charge Percent(Event Player) == 100;
		Is Button Held(Event Player, Button(Ultimate)) == True;
	}

	actions
	{
		disabled Skip If(Event Player.varVisualize_front == True, 3);
		Event Player.varVisualize_front = True;
		disabled Event Player.varVisualize_side = False;
		disabled Abort;
		disabled Skip If(Event Player.varVisualize_side == True, 3);
		disabled Event Player.varVisualize_side = True;
		disabled Event Player.varVisualize_front = False;
		disabled Abort;
	}
}

rule("BaptisteFakeUltimate Cancel indicator")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Baptiste;
	}

	conditions
	{
		Global.varDeploy_center == 0;
		Hero Of(Event Player) == Hero(Baptiste);
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
		disabled (Event Player.varVisualFrontBapt == True) == True;
		(Event Player.varVisualize_front == True || Event Player.varVisualize_side == True) == True;
	}

	actions
	{
		disabled Event Player.varVisualize_side = False;
		Event Player.varVisualize_front = False;
		Call Subroutine(subRemoveEveryEffectBapt);
		Wait(0.155, Ignore Condition);
	}
}

rule("BaptisteFakeUltimate Deploy matrix")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Baptiste;
	}

	conditions
	{
		Global.varDeploy_center == 0;
		(Event Player.varVisualize_front == True || Event Player.varVisualize_side == True) == True;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		disabled (Event Player.varVisualFrontBapt == True) == True;
	}

	actions
	{
		Chase Player Variable At Rate(Event Player, varDuration, 10, 1, None);
		Set Ultimate Charge(Event Player, 0);
		Global.varDeploy_center = Ray Cast Hit Position(Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player)
			+ Facing Direction Of(Event Player) * 35, All Players(All Teams), Event Player, True), Ray Cast Hit Position(Eye Position(
			Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player) * 35, All Players(All Teams), Event Player, True)
			- Vector(0, 30, 0), All Players(All Teams), Event Player, True);
		Play Effect(All Players(All Teams), Buff Explosion Sound, Color(Sky Blue), Global.varDeploy_center, 50);
		Play Effect(All Players(All Teams), Good Pickup Effect, Color(Sky Blue), Global.varDeploy_center, 14);
		Play Effect(All Players(All Teams), Ring Explosion, Color(Sky Blue), Global.varDeploy_center, 14);
		Skip If(Event Player.varVisualize_front != True, 10);
		Event Player.varVisualize_front = False;
		Event Player.varDeploy_pos[0] = Global.varDeploy_center + Vector(0, -1, 0) + World Vector Of(Vector(4.500, 0, 0), Event Player,
			Rotation);
		Event Player.varDeploy_pos[1] = Global.varDeploy_center + Vector(0, -1, 0) + World Vector Of(Vector(-4.500, 0, 0), Event Player,
			Rotation);
		Event Player.varDeploy_pos[2] = Global.varDeploy_center + Vector(0.001, 3.800, 0.001) + World Vector Of(Vector(-4.500, 0, 0),
			Event Player, Rotation);
		Event Player.varDeploy_pos[3] = Global.varDeploy_center + Vector(0.001, 3.800, 0.001) + World Vector Of(Vector(4.500, 0, 0),
			Event Player, Rotation);
		Wait(0.250, Ignore Condition);
		Abort;
		disabled Skip If(Event Player.varVisualize_side != True, 10);
		disabled Event Player.varVisualize_side = False;
		disabled Event Player.varDeploy_pos[0] = Global.varDeploy_center + Vector(0, -1, 0) + World Vector Of(Vector(0, 0, 4.500), Event Player,
			Rotation);
		disabled Event Player.varDeploy_pos[1] = Global.varDeploy_center + Vector(0, -1, 0) + World Vector Of(Vector(0, 0, -4.500), Event Player,
			Rotation);
		disabled Event Player.varDeploy_pos[2] = Global.varDeploy_center + Vector(0.001, 3.800, 0.001) + World Vector Of(Vector(0, 0, -4.500),
			Event Player, Rotation);
		disabled Event Player.varDeploy_pos[3] = Global.varDeploy_center + Vector(0.001, 3.800, 0.001) + World Vector Of(Vector(0, 0, 4.500),
			Event Player, Rotation);
		disabled Wait(0.250, Ignore Condition);
		disabled Abort;
	}
}

rule("BaptisteFakeUltimate Check If touch the center")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Global.varDeploy_center != 0;
		Distance Between(Global.varDeploy_center, Event Player) <= 4.500;
	}

	actions
	{
		Apply Impulse(Event Player, Direction Towards(Global.varDeploy_center, Event Player), 18, To World, Cancel Contrary Motion);
		Apply Impulse(Event Player, Up, 10, To World, Incorporate Contrary Motion);
	}
}

rule("BaptisteFakeUltimate Duration end")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Baptiste;
	}

	conditions
	{
		Event Player.varDuration == 10;
	}

	actions
	{
		Stop Chasing Player Variable(Event Player, varDuration);
		Event Player.varDuration = 0;
		Event Player.varDeploy_pos = 0;
		Play Effect(All Players(All Teams), Debuff Impact Sound, Color(Sky Blue), Global.varDeploy_center, 50);
		Play Effect(All Players(All Teams), Bad Explosion, Color(Sky Blue), Global.varDeploy_center, 14);
		Play Effect(All Players(All Teams), Buff Explosion Sound, Color(Sky Blue), Global.varDeploy_center, 14);
		Call Subroutine(subRemoveEveryEffectBapt);
		Global.varDeploy_center = 0;
	}
}

rule("BaptisteFakeUltimate Limit 1")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Baptiste;
	}

	conditions
	{
		Global.varDeploy_center != 0;
	}

	actions
	{
		Disallow Button(Event Player, Button(Ultimate));
		Wait(0.287, Ignore Condition);
		Loop If Condition Is True;
		Allow Button(Event Player, Button(Ultimate));
	}
}

rule("BaptisteFakeUltimate SubRemoveFrontEffect")
{
	event
	{
		Subroutine;
		subRemoveVisualFrontBapt;
	}

	actions
	{
		While(Event Player.varVisualFrontBapt != Empty Array);
			Destroy Effect(First Of(Event Player.varVisualFrontBapt));
			Modify Player Variable(Event Player, varVisualFrontBapt, Remove From Array By Index, 0);
		End;
	}
}

disabled rule("BaptisteFakeUltimate SubRemoveSideEffect")
{
	event
	{
		Subroutine;
		subRemoveVisualSideBapt;
	}

	actions
	{
		While(Event Player.varVisualSideBapt != Empty Array);
			Destroy Effect(First Of(Event Player.varVisualSideBapt));
			Modify Player Variable(Event Player, varVisualSideBapt, Remove From Array By Index, 0);
		End;
	}
}

disabled rule("BaptisteFakeUltimate SubRemoveWallEffect")
{
	event
	{
		Subroutine;
		subRemoveVisualWallEffectBapt;
	}

	actions
	{
		While(Event Player.varVisualWallEffectBapt != Empty Array);
			Destroy Effect(First Of(Event Player.varVisualWallEffectBapt));
			Modify Player Variable(Event Player, varVisualWallEffectBapt, Remove From Array By Index, 0);
		End;
	}
}

rule("BaptisteFakeUltimate SubRemoveEveryEffect")
{
	event
	{
		Subroutine;
		subRemoveEveryEffectBapt;
	}

	actions
	{
		Call Subroutine(subRemoveVisualFrontBapt);
		disabled Call Subroutine(subRemoveVisualSideBapt);
		disabled Call Subroutine(subRemoveVisualWallEffectBapt);
	}
}

rule("MEI - FREEZE WITH HER SHIFT")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Mei;
	}

	conditions
	{
		((Is Button Held(Event Player, Button(Primary Fire)) || Is Button Held(Event Player, Button(Secondary Fire)))
			&& Is Using Ability 1(Event Player)) == True;
	}

	actions
	{
		Set Status(Players Within Radius(Event Player, 5, Team 2, Off), Null, Frozen, 0.828);
	}
}

rule("WIDOW - HEADSHOT KNOCKDOWN SEEKER [CD 5s]")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Widowmaker;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Widowmaker);
		Event Player.varWidowHS == Null;
		(Is Button Held(Event Player, Button(Secondary Fire)) && Is Button Held(Event Player, Button(Primary Fire))) == True;
		Event Was Critical Hit == True;
	}

	actions
	{
		Event Player.varWidowHS = True;
		Set Status(Victim, Null, Knocked Down, 2.287);
		Event Player.varWidowHSmsg = 5;
		Chase Player Variable At Rate(Event Player, varWidowHSmsg, 0, 1, Destination and Rate);
		Wait(5, Ignore Condition);
		Event Player.varWidowHS = Null;
	}
}

rule("Nerf Mercy")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Mercy;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Mercy);
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		If(Is Using Ability 1(Event Player));
			Disallow Button(Event Player, Button(Jump));
			Wait(0.728, Ignore Condition);
		Else If(Is On Ground(Event Player) == True);
			Allow Button(Event Player, Button(Jump));
		End;
		Allow Button(Event Player, Button(Jump));
	}
}

rule("Mercy can't RES if solo seeker（ ´_⊃｀）")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Mercy;
	}

	conditions
	{
		Is Game In Progress == True;
		Hero Of(Event Player) == Hero(Mercy);
		Number Of Living Players(Team 2) < 2;
	}

	actions
	{
		Disallow Button(Event Player, Button(Ability 2));
		Wait(0.287, Ignore Condition);
		Loop If Condition Is True;
		Allow Button(Event Player, Button(Ability 2));
	}
}

rule("Bastion speed heal")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Bastion;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
	}

	actions
	{
		Damage(Event Player, Null, 0.001);
	}
}

rule("Bastion speed heal #bis")
{
	event
	{
		Player Dealt Healing;
		Team 1;
		Bastion;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Secondary Fire)) == True;
	}

	actions
	{
		Damage(Event Player, Null, 1);
		Set Move Speed(Event Player, 128.557);
		Wait(0.055, Ignore Condition);
		Set Move Speed(Event Player, 100);
	}
}

rule("BASTION Lego size")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Bastion;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Start Scaling Player(Event Player, 0.557, True);
		Wait(15, Ignore Condition);
		Stop Scaling Player(Event Player);
		Set Status(Event Player, Null, Phased Out, 2);
	}
}

rule("GENJI INSTANT REMOVE DEFLECT")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Genji;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Wait(0.287, Ignore Condition);
		Press Button(Event Player, Button(Ability 2));
	}
}

disabled rule("──────────────────────────┤T-Bag, Punch + Kill├─────────────────────────")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}
}

rule("Tbag Reward")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Crouching(Event Player) == True;
		Has Status(Players Within Radius(Event Player, 3, Team 2, Off), Asleep) == True;
	}

	actions
	{
		Play Effect(All Players(All Teams), Buff Impact Sound, Color(Lime Green), Event Player, 120);
		Play Effect(All Players(All Teams), Ring Explosion, Color(Lime Green), Event Player, 5);
		If(Event Player.tbag_flag == True);
			Small Message(All Players(All Teams), Custom String("OOF! {0} tbagged {1}", Event Player, Players Within Radius(Event Player, 3,
				Team 2, Off)));
			Event Player.tbag_flag = False;
		End;
	}
}

rule("Tbag Flag")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Has Status(Event Player, Asleep) == True;
	}

	actions
	{
		All Living Players(Team 1).tbag_flag = True;
	}
}

rule("Punch Reward")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		All;
	}

	conditions
	{
		Hero Of(Event Player) != Hero(Zenyatta);
		Is Button Held(Event Player, Button(Melee)) == True;
		Team Of(Victim) == Team 2;
		Is Firing Primary(Event Player) == False;
		Is Firing Secondary(Event Player) == False;
		Is Using Ability 1(Event Player) == False;
		Is Using Ability 2(Event Player) == False;
		Has Status(Victim, Burning) == False;
		Distance Between(Event Player, Victim) <= 3.500;
	}

	actions
	{
		Play Effect(All Players(All Teams), Buff Impact Sound, Color(Red), Victim, 120);
		Play Effect(All Players(All Teams), Ring Explosion, Color(Red), Victim, 5);
		Set Status(Victim, Null, Burning, 0.500);
		Event Player.rng_punch_message = Random Integer(1, 10);
		Call Subroutine(customStringPicker);
	}
}

rule("customStringPicker()")
{
	event
	{
		Subroutine;
		customStringPicker;
	}

	actions
	{
		If(Event Player.rng_punch_message == 1);
			Small Message(All Players(All Teams), Custom String("{0} gave {1} a kiss", Event Player, Victim));
		Else If(Event Player.rng_punch_message == 2);
			Small Message(All Players(All Teams), Custom String("{0} is flexing on {1}", Event Player, Victim));
		Else If(Event Player.rng_punch_message == 3);
			Small Message(All Players(All Teams), Custom String("{0} tickled {1}", Event Player, Victim));
		Else If(Event Player.rng_punch_message == 4);
			Small Message(All Players(All Teams), Custom String("{0} thinks {1} is easy", Event Player, Victim));
		Else If(Event Player.rng_punch_message == 5);
			Small Message(All Players(All Teams), Custom String("{0} gave {1} corona", Event Player, Victim));
		Else If(Event Player.rng_punch_message == 6);
			Small Message(All Players(All Teams), Custom String("{0} asked {1} on a date", Event Player, Victim));
		Else If(Event Player.rng_punch_message == 7);
			Small Message(All Players(All Teams), Custom String("{0} gifted {1} some chocolate!", Event Player, Victim));
		Else If(Event Player.rng_punch_message == 8);
			Small Message(All Players(All Teams), Custom String("{0} is too fast for {1}", Event Player, Victim));
		Else If(Event Player.rng_punch_message == 9);
			Small Message(All Players(All Teams), Custom String("{0} licked {1}", Event Player, Victim));
		Else If(Event Player.rng_punch_message == 10);
			Small Message(All Players(All Teams), Custom String("{1} can't deal with {0}", Event Player, Victim));
		End;
	}
}

rule("ZENYATTA Kick Reward")
{
	event
	{
		Player Dealt Damage;
		Team 1;
		Zenyatta;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Melee)) == True;
		Team Of(Victim) == Team 2;
		Is Firing Primary(Event Player) == False;
		Is Firing Secondary(Event Player) == False;
		Is Using Ability 1(Event Player) == False;
		Is Using Ability 2(Event Player) == False;
		Has Status(Victim, Burning) == False;
		Distance Between(Event Player, Victim) <= 3.500;
	}

	actions
	{
		Play Effect(All Players(All Teams), Buff Impact Sound, Color(Red), Victim, 120);
		Play Effect(All Players(All Teams), Ring Explosion, Color(Red), Victim, 5);
		Set Status(Victim, Null, Burning, 0.500);
		Event Player.varKickMsgZen = Random Integer(1, 6);
		Call Subroutine(zenKickRNGMSG);
	}
}

rule("ZENYATTA Kick RandomMSG")
{
	event
	{
		Subroutine;
		zenKickRNGMSG;
	}

	actions
	{
		If(Event Player.varKickMsgZen == 1);
			Small Message(All Players(All Teams), Custom String("笨蛋 {1} !", Event Player, Victim));
		Else If(Event Player.varKickMsgZen == 2);
			Small Message(All Players(All Teams), Custom String("白痴 {1} !", Event Player, Victim));
		Else If(Event Player.varKickMsgZen == 3);
			Small Message(All Players(All Teams), Custom String("你算老几 {1} !？", Event Player, Victim));
		Else If(Event Player.varKickMsgZen == 4);
			Small Message(All Players(All Teams), Custom String("蠢猪 {1} !", Event Player, Victim));
		Else If(Event Player.varKickMsgZen == 5);
			Small Message(All Players(All Teams), Custom String("{0} screamed like ShivaLee {2} on {1} !", Event Player, Victim,
				Hero Icon String(Hero(Zarya))));
		Else If(Event Player.varKickMsgZen == 6);
			Small Message(All Players(All Teams), Custom String("{0} made a move like BayChan {2} on {1} !", Event Player, Victim,
				Hero Icon String(Hero(Mei))));
		End;
	}
}

rule("Runner Killed Seeker Reward")
{
	event
	{
		Player Earned Elimination;
		Team 1;
		All;
	}

	actions
	{
		For Player Variable(Event Player, kill_hider_loop, 0, 30, 1);
			Play Effect(All Players(All Teams), Ring Explosion, Color(Green), Event Player, 1);
			Wait(0.100, Ignore Condition);
			Play Effect(All Players(All Teams), Bad Explosion, Color(Purple), Event Player, 1);
			Play Effect(All Players(All Teams), Buff Impact Sound, Color(Red), Event Player, 40);
		End;
	}
}

disabled rule("───────────────────────────┤MAPS STUFF├───────────────────────────")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Initial map check")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		"Run the map setup Subroutines"
		Call Subroutine(mapCheck);
	}
}

rule("Map Check Subroutine")
{
	event
	{
		Subroutine;
		mapCheck;
	}

	actions
	{
		"This giant if/else if/else logic statement helps optimize the load by testing for each map and then running the respective subroutine for the map."
		If(Current Map == Map(Oasis City Center));
			Call Subroutine(mapSetupOasisCity);
		Else If(Current Map == Map(Castillo));
			Call Subroutine(mapSetupCastillo);
		Else If(Current Map == Map(Oasis Gardens));
			Call Subroutine(mapSetupOasisGarden);
		"OR statement is present because two maps"
		Else If(Current Map == Map(Black Forest) || Current Map == Map(Black Forest Winter));
			Call Subroutine(mapSetupBlackForest);
		"OR statement is present because two maps"
		Else If(Current Map == Map(Workshop Island) || Current Map == Map(Workshop Island Night));
			Call Subroutine(mapSetupIsland);
		"OR statement is present because two maps"
		Else If(Current Map == Map(Lijiang Control Center) || Current Map == Map(Lijiang Control Center Lunar New Year));
			Call Subroutine(mapSetupLijiangControl);
		"OR statement is present because two maps"
		Else If(Current Map == Map(Lijiang Garden) || Current Map == Map(Lijiang Garden Lunar New Year));
			Call Subroutine(mapSetupLijiangGarden);
		Else If(Current Map == Map(Oasis University));
			Call Subroutine(mapSetupOasisUniversity);
		Else If(Current Map == Map(Ilios Ruins));
			Call Subroutine(mapSetupIliosRuins);
		Else If(Current Map == Map(Workshop Chamber));
			Call Subroutine(mapSetupWorkshopRoom);
		Else If(Current Map == Map(Nepal Shrine));
			Call Subroutine(mapSetupNepalShrine);
		Else If(Current Map == Map(Nepal Village));
			Call Subroutine(mapSetupNepalVillage);
		Else If(Current Map == Map(Nepal Sanctum));
			Call Subroutine(mapSetupNepalSanctuary);
		Else If(Current Map == Map(Necropolis));
			Call Subroutine(mapSetupNecropolis);
		Else If(Current Map == Map(Ilios Lighthouse));
			Call Subroutine(mapSetupIliosLightHouse);
		Else If(Current Map == Map(Ilios Well));
			Call Subroutine(mapSetupIliosWell);
		Else If(Current Map == Map(Ayutthaya));
			Call Subroutine(mapSetupAyutthaya);
		"OR statement is present because two maps"
		Else If(Current Map == Map(Lijiang Night Market) || Current Map == Map(Lijiang Night Market Lunar New Year));
			Call Subroutine(mapSetupLijangMarket);
			Call Subroutine(mapSetupLijangMarket2);
		"OR statement is present because two maps"
		Else If(Current Map == Map(Ecopoint: Antarctica) || Current Map == Map(Ecopoint: Antarctica Winter));
			Call Subroutine(mapSetupEcolab);
			"This is in case the map is either Workshop Expanse or an unofficially selected map."
			disabled Else;
		"OR statement is present because two maps"
		Else If(Current Map == Map(Workshop Expanse) || Current Map == Map(Workshop Expanse Night));
			Call Subroutine(mapSetupExpan);
		End;
		Call Subroutine(arenaSetup);
	}
}

rule("Map Setup (LijangMarket) Subroutine")
{
	event
	{
		Subroutine;
		mapSetupLijangMarket;
	}

	actions
	{
		"X-axis front side of arena."
		Global.xPositive1 = 48;
		"X-axis back side of arena."
		Global.xNegative1 = 31.500;
		"Y-axis front side of arena."
		Global.yPositive1 = 32;
		"Y-axis back side of arena."
		Global.yNegative1 = 25.557;
		"Z-axis front side of arena."
		Global.zPositive1 = -13.550;
		"Z-axis back side of arena."
		Global.zNegative1 = -16;
		Global.yBlockFreeze_1 = 26.550;
		Global.yBlockFreeze_2 = 29.400;
		Global.zBlockFreeze = -14.162;
		Global.varPosSpawnAreaNX = X Component Of(Vector(-88.557, 0, 0));
		Global.varPosSpawnAreaPX = X Component Of(Vector(89.557, 0, 0));
		Global.varPosSpawnAreaNZ = Z Component Of(Vector(0, 0, -100));
		Global.varPosSpawnAreaPZ = Z Component Of(Vector(0, 0, 100));
		Global.varSigmaAntiKamikazeN_Y = Y Component Of(Vector(0, -11, 0));
		Global.varSigmaAntiKamikazePos_Y = Y Component Of(Vector(0, 287, 0));
	}
}

rule("Map Setup (LijangMarket2) Subroutine")
{
	event
	{
		Subroutine;
		mapSetupLijangMarket2;
	}

	actions
	{
		"X-axis front side of arena."
		Global.xPositive2 = -46;
		"X-axis back side of arena."
		Global.xNegative2 = -29.500;
		"Y-axis front side of arena."
		Global.yPositive2 = 32;
		"Y-axis back side of arena."
		Global.yNegative2 = 25.557;
		"Z-axis front side of arena."
		Global.zPositive2 = -13.550;
		"Z-axis back side of arena."
		Global.zNegative2 = -16;
		Global.yBlockFreeze_1 = 26.550;
		Global.yBlockFreeze_2 = 29.557;
		Global.zBlockFreeze = -14.162;
	}
}

rule("Map Setup (Ayutthaya) Subroutine")
{
	event
	{
		Subroutine;
		mapSetupAyutthaya;
	}

	actions
	{
		Global.varPosSpawnAreaNX = X Component Of(Vector(-55, 0, 0));
		Global.varPosSpawnAreaPX = X Component Of(Vector(55, 0, 0));
		Global.varPosSpawnAreaNZ = Z Component Of(Vector(0, 0, -77.557));
		Global.varPosSpawnAreaPZ = Z Component Of(Vector(0, 0, 64.557));
		Global.varSigmaAntiKamikazeN_Y = Y Component Of(Vector(0, -4, 0));
		Global.varSigmaAntiKamikazePos_Y = Y Component Of(Vector(0, 287, 0));
	}
}

rule("Map Setup (Castillo) Subroutine")
{
	event
	{
		Subroutine;
		mapSetupCastillo;
	}

	actions
	{
		Global.varPosSpawnAreaNX = X Component Of(Vector(-557, 0, 0));
		Global.varPosSpawnAreaPX = X Component Of(Vector(557, 0, 0));
		Global.varPosSpawnAreaNZ = Z Component Of(Vector(0, 0, -557));
		Global.varPosSpawnAreaPZ = Z Component Of(Vector(0, 0, 557));
		Global.varSigmaAntiKamikazeN_Y = Y Component Of(Vector(0, 27, 0));
		Global.varSigmaAntiKamikazePos_Y = Y Component Of(Vector(0, 287, 0));
	}
}

rule("Map Setup (Ecolab) Subroutine")
{
	event
	{
		Subroutine;
		mapSetupEcolab;
	}

	actions
	{
		Global.varPosSpawnAreaNX = X Component Of(Vector(-557, 0, 0));
		Global.varPosSpawnAreaPX = X Component Of(Vector(557, 0, 0));
		Global.varPosSpawnAreaNZ = Z Component Of(Vector(0, 0, -557));
		Global.varPosSpawnAreaPZ = Z Component Of(Vector(0, 0, 557));
		Global.varSigmaAntiKamikazeN_Y = Y Component Of(Vector(0, -287, 0));
		Global.varSigmaAntiKamikazePos_Y = Y Component Of(Vector(0, 287, 0));
	}
}

rule("Map Setup (ExpanWorkshop) Subroutine")
{
	event
	{
		Subroutine;
		mapSetupExpan;
	}

	actions
	{
		Global.varPosSpawnAreaNX = X Component Of(Vector(-557, 0, 0));
		Global.varPosSpawnAreaPX = X Component Of(Vector(557, 0, 0));
		Global.varPosSpawnAreaNZ = Z Component Of(Vector(0, 0, -557));
		Global.varPosSpawnAreaPZ = Z Component Of(Vector(0, 0, 557));
		Global.varSigmaAntiKamikazeN_Y = Y Component Of(Vector(0, -287, 0));
		Global.varSigmaAntiKamikazePos_Y = Y Component Of(Vector(0, 287, 0));
	}
}

rule("Map Setup (BlackForest) Subroutine")
{
	event
	{
		Subroutine;
		mapSetupBlackForest;
	}

	actions
	{
		Global.varPosSpawnAreaNX = X Component Of(Vector(-557, 0, 0));
		Global.varPosSpawnAreaPX = X Component Of(Vector(557, 0, 0));
		Global.varPosSpawnAreaNZ = Z Component Of(Vector(0, 0, -557));
		Global.varPosSpawnAreaPZ = Z Component Of(Vector(0, 0, 557));
		Global.varSigmaAntiKamikazeN_Y = Y Component Of(Vector(0, -287, 0));
		Global.varSigmaAntiKamikazePos_Y = Y Component Of(Vector(0, 287, 0));
	}
}

rule("Map Setup (IslandWorkshop) Subroutine")
{
	event
	{
		Subroutine;
		mapSetupIsland;
	}

	actions
	{
		Global.varPosSpawnAreaNX = X Component Of(Vector(-557, 0, 0));
		Global.varPosSpawnAreaPX = X Component Of(Vector(557, 0, 0));
		Global.varPosSpawnAreaNZ = Z Component Of(Vector(0, 0, -557));
		Global.varPosSpawnAreaPZ = Z Component Of(Vector(0, 0, 557));
		Global.varSigmaAntiKamikazeN_Y = Y Component Of(Vector(0, -287, 0));
		Global.varSigmaAntiKamikazePos_Y = Y Component Of(Vector(0, 287, 0));
	}
}

rule("Map Setup (Necropolis) Subroutine")
{
	event
	{
		Subroutine;
		mapSetupNecropolis;
	}

	actions
	{
		Global.varPosSpawnAreaNX = X Component Of(Vector(-557, 0, 0));
		Global.varPosSpawnAreaPX = X Component Of(Vector(557, 0, 0));
		Global.varPosSpawnAreaNZ = Z Component Of(Vector(0, 0, -557));
		Global.varPosSpawnAreaPZ = Z Component Of(Vector(0, 0, 557));
		Global.varSigmaAntiKamikazeN_Y = Y Component Of(Vector(0, -7, 0));
		Global.varSigmaAntiKamikazePos_Y = Y Component Of(Vector(0, 287, 0));
	}
}

rule("Map Setup (OasisUniversity) Subroutine")
{
	event
	{
		Subroutine;
		mapSetupOasisUniversity;
	}

	actions
	{
		Global.varPosSpawnAreaNX = X Component Of(Vector(-557, 0, 0));
		Global.varPosSpawnAreaPX = X Component Of(Vector(557, 0, 0));
		Global.varPosSpawnAreaNZ = Z Component Of(Vector(0, 0, -557));
		Global.varPosSpawnAreaPZ = Z Component Of(Vector(0, 0, 557));
		Global.varSigmaAntiKamikazeN_Y = Y Component Of(Vector(0, 2.800, 0));
		Global.varSigmaAntiKamikazePos_Y = Y Component Of(Vector(0, 287, 0));
	}
}

rule("Map Setup (WorkshopRoom) Subroutine")
{
	event
	{
		Subroutine;
		mapSetupWorkshopRoom;
	}

	actions
	{
		Global.varPosSpawnAreaNX = X Component Of(Vector(-557, 0, 0));
		Global.varPosSpawnAreaPX = X Component Of(Vector(557, 0, 0));
		Global.varPosSpawnAreaNZ = Z Component Of(Vector(0, 0, -557));
		Global.varPosSpawnAreaPZ = Z Component Of(Vector(0, 0, 557));
		Global.varSigmaAntiKamikazeN_Y = Y Component Of(Vector(0, -287, 0));
		Global.varSigmaAntiKamikazePos_Y = Y Component Of(Vector(0, 287, 0));
	}
}

rule("Map Setup (LijiangGarden) Subroutine")
{
	event
	{
		Subroutine;
		mapSetupLijiangGarden;
	}

	actions
	{
		Global.varPosSpawnAreaNX = X Component Of(Vector(-92.557, 0, 0));
		Global.varPosSpawnAreaPX = X Component Of(Vector(92.755, 0, 0));
		Global.varPosSpawnAreaNZ = Z Component Of(Vector(0, 0, -557));
		Global.varPosSpawnAreaPZ = Z Component Of(Vector(0, 0, 557));
		Global.varSigmaAntiKamikazeN_Y = Y Component Of(Vector(0, 83, 0));
		Global.varSigmaAntiKamikazePos_Y = Y Component Of(Vector(0, 287, 0));
	}
}

rule("Map Setup (NepalShrine) Subroutine")
{
	event
	{
		Subroutine;
		mapSetupNepalShrine;
	}

	actions
	{
		Global.varPosSpawnAreaNX = X Component Of(Vector(-557, 0, 0));
		Global.varPosSpawnAreaPX = X Component Of(Vector(557, 0, 0));
		Global.varPosSpawnAreaNZ = Z Component Of(Vector(0, 0, -101.557));
		Global.varPosSpawnAreaPZ = Z Component Of(Vector(0, 0, 101.557));
		Global.varSigmaAntiKamikazeN_Y = Y Component Of(Vector(0, 1, 0));
		Global.varSigmaAntiKamikazePos_Y = Y Component Of(Vector(0, 287, 0));
	}
}

rule("Map Setup (NepalSanctuary) Subroutine")
{
	event
	{
		Subroutine;
		mapSetupNepalSanctuary;
	}

	actions
	{
		Global.varPosSpawnAreaNX = X Component Of(Vector(-557, 0, 0));
		Global.varPosSpawnAreaPX = X Component Of(Vector(557, 0, 0));
		Global.varPosSpawnAreaNZ = Z Component Of(Vector(0, 0, -97.557));
		Global.varPosSpawnAreaPZ = Z Component Of(Vector(0, 0, 97.557));
		Global.varSigmaAntiKamikazeN_Y = Y Component Of(Vector(0, 118, 0));
		Global.varSigmaAntiKamikazePos_Y = Y Component Of(Vector(0, 287, 0));
	}
}

rule("Map Setup (NepalVillage) Subroutine")
{
	event
	{
		Subroutine;
		mapSetupNepalVillage;
	}

	actions
	{
		Global.varPosSpawnAreaNX = X Component Of(Vector(-557, 0, 0));
		Global.varPosSpawnAreaPX = X Component Of(Vector(557, 0, 0));
		Global.varPosSpawnAreaNZ = Z Component Of(Vector(0, 0, -89.550));
		Global.varPosSpawnAreaPZ = Z Component Of(Vector(0, 0, 89.557));
		Global.varSigmaAntiKamikazeN_Y = Y Component Of(Vector(0, -105, 0));
		Global.varSigmaAntiKamikazePos_Y = Y Component Of(Vector(0, 287, 0));
	}
}

rule("Map Setup (OasisCity) Subroutine")
{
	event
	{
		Subroutine;
		mapSetupOasisCity;
	}

	actions
	{
		Global.varPosSpawnAreaNX = X Component Of(Vector(-557, 0, 0));
		Global.varPosSpawnAreaPX = X Component Of(Vector(557, 0, 0));
		Global.varPosSpawnAreaNZ = Z Component Of(Vector(0, 0, -557));
		Global.varPosSpawnAreaPZ = Z Component Of(Vector(0, 0, 557));
		Global.varSigmaAntiKamikazeN_Y = Y Component Of(Vector(0, -8, 0));
		Global.varSigmaAntiKamikazePos_Y = Y Component Of(Vector(0, 287, 0));
	}
}

rule("Map Setup (OasisGarden) Subroutine")
{
	event
	{
		Subroutine;
		mapSetupOasisGarden;
	}

	actions
	{
		Global.varPosSpawnAreaNX = X Component Of(Vector(-557, 0, 0));
		Global.varPosSpawnAreaPX = X Component Of(Vector(557, 0, 0));
		Global.varPosSpawnAreaNZ = Z Component Of(Vector(0, 0, -557));
		Global.varPosSpawnAreaPZ = Z Component Of(Vector(0, 0, 557));
		Global.varSigmaAntiKamikazeN_Y = Y Component Of(Vector(0, 1, 0));
		Global.varSigmaAntiKamikazePos_Y = Y Component Of(Vector(0, 287, 0));
	}
}

rule("Map Setup (IliosWell) Subroutine")
{
	event
	{
		Subroutine;
		mapSetupIliosWell;
	}

	actions
	{
		Global.varPosSpawnAreaNX = X Component Of(Vector(-557, 0, 0));
		Global.varPosSpawnAreaPX = X Component Of(Vector(557, 0, 0));
		Global.varPosSpawnAreaNZ = Z Component Of(Vector(0, 0, -557));
		Global.varPosSpawnAreaPZ = Z Component Of(Vector(0, 0, 557));
		Global.varSigmaAntiKamikazeN_Y = Y Component Of(Vector(0, -9, 0));
		Global.varSigmaAntiKamikazePos_Y = Y Component Of(Vector(0, 287, 0));
	}
}

rule("ZEN can't ULT if solo seeker")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Zenyatta;
	}

	conditions
	{
		Is Game In Progress == True;
		Hero Of(Event Player) == Hero(Zenyatta);
		Number Of Living Players(Team 2) < 2;
	}

	actions
	{
		Disallow Button(Event Player, Button(Ultimate));
		Wait(0.287, Ignore Condition);
		Loop If Condition Is True;
		Allow Button(Event Player, Button(Ultimate));
	}
}

rule("Map Setup (IliosRuins) Subroutine")
{
	event
	{
		Subroutine;
		mapSetupIliosRuins;
	}

	actions
	{
		Global.varPosSpawnAreaNX = X Component Of(Vector(-82.557, 0, 0));
		Global.varPosSpawnAreaPX = X Component Of(Vector(140.557, 0, 0));
		Global.varPosSpawnAreaNZ = Z Component Of(Vector(0, 0, -557));
		Global.varPosSpawnAreaPZ = Z Component Of(Vector(0, 0, 557));
		Global.varSigmaAntiKamikazeN_Y = Y Component Of(Vector(0, 51, 0));
		Global.varSigmaAntiKamikazePos_Y = Y Component Of(Vector(0, 287, 0));
	}
}

rule("Map Setup (IliosLightHouse) Subroutine")
{
	event
	{
		Subroutine;
		mapSetupIliosLightHouse;
	}

	actions
	{
		Global.varPosSpawnAreaNX = X Component Of(Vector(-557, 0, 0));
		Global.varPosSpawnAreaPX = X Component Of(Vector(557, 0, 0));
		Global.varPosSpawnAreaNZ = Z Component Of(Vector(0, 0, -557));
		Global.varPosSpawnAreaPZ = Z Component Of(Vector(0, 0, 557));
		Global.varSigmaAntiKamikazeN_Y = Y Component Of(Vector(0, -37, 0));
		Global.varSigmaAntiKamikazePos_Y = Y Component Of(Vector(0, 287, 0));
	}
}

rule("Map Setup (LijiangControl) Subroutine")
{
	event
	{
		Subroutine;
		mapSetupLijiangControl;
	}

	actions
	{
		Global.varPosSpawnAreaNX = X Component Of(Vector(-557, 0, 0));
		Global.varPosSpawnAreaPX = X Component Of(Vector(557, 0, 0));
		Global.varPosSpawnAreaNZ = Z Component Of(Vector(0, 0, -557));
		Global.varPosSpawnAreaPZ = Z Component Of(Vector(0, 0, 557));
		Global.varAnglePosXp = Vector(-104.964, 267.251, 389.258);
		Global.varSigmaAntiKamikazeN_Y = Y Component Of(Vector(0, 251, 0));
		Global.varSigmaAntiKamikazePos_Y = Y Component Of(Vector(0, 487, 0));
	}
}

rule("Arena Setup Subroutine")
{
	event
	{
		Subroutine;
		arenaSetup;
	}

	actions
	{
		"Setup all Arena Effects"
		Call Subroutine(arenaSetupEdge);
		Call Subroutine(arenaSetupFace);
		"Setup all Arena Effects 2"
		Call Subroutine(arenaSetupEdge2);
		Call Subroutine(arenaSetupFace2);
		"Setup Area TeamSpawn"
		Call Subroutine(subAreaSpawnTeam);
	}
}

rule("Boundary Box Edge Construction Subroutine")
{
	event
	{
		Subroutine;
		arenaSetupEdge;
	}

	actions
	{
		"BOX EDGES: (x,y,z) -> (x,-y,z)"
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(Global.xPositive1, Global.yPositive1, Global.zPositive1), Vector(
			Global.xPositive1, Global.yNegative1, 0.001 + Global.zPositive1), Color(Green), Visible To);
		disabled Modify Global Variable(toxicjail_tab, Append To Array, Last Created Entity);
		"(x,y,-z) -> (x,-y,-z)"
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(Global.xPositive1, Global.yPositive1, Global.zNegative1), Vector(
			Global.xPositive1, Global.yNegative1, 0.001 + Global.zNegative1), Color(Green), Visible To);
		disabled Modify Global Variable(toxicjail_tab, Append To Array, Last Created Entity);
		"(-x,y,-z) -> (-x,-y,-z)"
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(Global.xNegative1, Global.yPositive1, Global.zNegative1), Vector(
			Global.xNegative1, Global.yNegative1, 0.001 + Global.zNegative1), Color(Green), Visible To);
		disabled Modify Global Variable(toxicjail_tab, Append To Array, Last Created Entity);
		"(-x,y,z) -> (-x,-y,z)"
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(Global.xNegative1, Global.yPositive1, Global.zPositive1), Vector(
			Global.xNegative1, Global.yNegative1, 0.001 + Global.zPositive1), Color(Green), Visible To);
		disabled Modify Global Variable(toxicjail_tab, Append To Array, Last Created Entity);
		"(x,y,z) -> (-x,y,z)"
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(Global.xPositive1, Global.yPositive1, Global.zPositive1), Vector(
			Global.xNegative1, Global.yPositive1, Global.zPositive1), Color(Green), Visible To);
		disabled Modify Global Variable(toxicjail_tab, Append To Array, Last Created Entity);
		"(x,-y,z) -> (-x,-y,z)"
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(Global.xPositive1, Global.yNegative1, Global.zPositive1), Vector(
			Global.xNegative1, Global.yNegative1, Global.zPositive1), Color(Green), Visible To);
		disabled Modify Global Variable(toxicjail_tab, Append To Array, Last Created Entity);
		"(x,y,-z) -> (-x,y,-z)"
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(Global.xPositive1, Global.yPositive1, Global.zNegative1), Vector(
			Global.xNegative1, Global.yPositive1, Global.zNegative1), Color(Green), Visible To);
		disabled Modify Global Variable(toxicjail_tab, Append To Array, Last Created Entity);
		"(x,-y,-z) -> (-x,-y,-z)"
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(Global.xPositive1, Global.yNegative1, Global.zNegative1), Vector(
			Global.xNegative1, Global.yNegative1, Global.zNegative1), Color(Green), Visible To);
		disabled Modify Global Variable(toxicjail_tab, Append To Array, Last Created Entity);
		"(x,y,z) -> (x,y,-z)"
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(Global.xPositive1, Global.yPositive1, Global.zPositive1), Vector(
			Global.xPositive1, Global.yPositive1, Global.zNegative1), Color(Green), Visible To);
		disabled Modify Global Variable(toxicjail_tab, Append To Array, Last Created Entity);
		"(x,-y,z) -> (x,-y,-z)"
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(Global.xPositive1, Global.yNegative1, Global.zPositive1), Vector(
			Global.xPositive1, Global.yNegative1, Global.zNegative1), Color(Green), Visible To);
		disabled Modify Global Variable(toxicjail_tab, Append To Array, Last Created Entity);
		"(-x,y,z) -> (-x,y,-z)"
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(Global.xNegative1, Global.yPositive1, Global.zPositive1), Vector(
			Global.xNegative1, Global.yPositive1, Global.zNegative1), Color(Green), Visible To);
		disabled Modify Global Variable(toxicjail_tab, Append To Array, Last Created Entity);
		"(-x,-y,z) -> (-x,-y,-z)"
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(Global.xNegative1, Global.yNegative1, Global.zPositive1), Vector(
			Global.xNegative1, Global.yNegative1, Global.zNegative1), Color(Green), Visible To);
		disabled Modify Global Variable(toxicjail_tab, Append To Array, Last Created Entity);
		"FREEZE LINE"
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector((Global.xNegative1 - Global.xPositive1) / 2 + Global.xPositive1,
			Global.yBlockFreeze_1, Global.zBlockFreeze), Vector(Global.xNegative1, Global.yBlockFreeze_1, Global.zBlockFreeze), Color(
			Green), Visible To);
		"FREEZE LINE 2"
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector((Global.xNegative1 - Global.xPositive1) / 2 + Global.xPositive1,
			Global.yBlockFreeze_1, (Global.zNegative1 - Global.zPositive1) / 4 + Global.zBlockFreeze), Vector(Global.xNegative1,
			Global.yBlockFreeze_1, (Global.zNegative1 - Global.zPositive1) / 4 + Global.zBlockFreeze), Color(Green), Visible To);
		"FREEZE LINE 3"
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(Global.xPositive1, Global.yBlockFreeze_2, (
			Global.zNegative1 - Global.zPositive1) / 8 + Global.zBlockFreeze), Vector(Global.xNegative1, Global.yBlockFreeze_2, (
			Global.zNegative1 - Global.zPositive1) / 8 + Global.zBlockFreeze), Color(Green), Visible To);
	}
}

rule("Boundary Box Face Construction Subroutine")
{
	event
	{
		Subroutine;
		arenaSetupFace;
	}

	actions
	{
		"This subroutine creates the faces of the arena. (x,y,-z) -> (-x,y,z) (Face Y)"
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(Global.xPositive1, Global.yPositive1, Global.zNegative1), Vector(
			Global.xNegative1, Global.yPositive1, Global.zPositive1), Color(Red), Visible To);
		"(x,y,z) -> (-x,y,-z) (Face Y)"
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(Global.xPositive1, Global.yPositive1, Global.zPositive1), Vector(
			Global.xNegative1, Global.yPositive1, Global.zNegative1), Color(Red), Visible To);
		"(x,y,-z) -> (x,-y,z) (Face X)"
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(Global.xPositive1, Global.yPositive1, Global.zNegative1), Vector(
			Global.xPositive1, Global.yNegative1, Global.zPositive1), Color(Red), Visible To);
		"(x,y,z) -> (x,-y,-z) (Face X)"
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(Global.xPositive1, Global.yPositive1, Global.zPositive1), Vector(
			Global.xPositive1, Global.yNegative1, Global.zNegative1), Color(Red), Visible To);
		"(-x,y,-z) -> (-x,-y,z) (Face -X)"
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(Global.xNegative1, Global.yPositive1, Global.zNegative1), Vector(
			Global.xNegative1, Global.yNegative1, Global.zPositive1), Color(Red), Visible To);
		"(-x,y,z) -> (-x,-y,-z) (Face -X)"
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(Global.xNegative1, Global.yPositive1, Global.zPositive1), Vector(
			Global.xNegative1, Global.yNegative1, Global.zNegative1), Color(Red), Visible To);
		"(x,y,z) -> (-x,-y,z) (Face Z)"
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(Global.xPositive1, Global.yPositive1, Global.zPositive1), Vector(
			Global.xNegative1, Global.yNegative1, Global.zPositive1), Color(Red), Visible To);
		"(-x,y,z) -> (x,-y,z) (Face Z)"
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(Global.xNegative1, Global.yPositive1, Global.zPositive1), Vector(
			Global.xPositive1, Global.yNegative1, Global.zPositive1), Color(Red), Visible To);
		"(x,-y,z) -> (-x,-y,-z) (Face -Y)"
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(Global.xPositive1, Global.yNegative1, Global.zPositive1), Vector(
			Global.xNegative1, Global.yNegative1, Global.zNegative1), Color(Red), Visible To);
		"(x,-y,-z) -> (-x,-y,z) (Face -Y)"
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(Global.xPositive1, Global.yNegative1, Global.zNegative1), Vector(
			Global.xNegative1, Global.yNegative1, Global.zPositive1), Color(Red), Visible To);
		"(x,y,-z) -> (-x,-y,-z) (Face -Z)"
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(Global.xPositive1, Global.yPositive1, Global.zNegative1), Vector(
			Global.xNegative1, Global.yNegative1, Global.zNegative1), Color(Red), Visible To);
		"(-x,y,-z) -> (x,-y,-z) (Face -Z)"
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(Global.xNegative1, Global.yPositive1, Global.zNegative1), Vector(
			Global.xPositive1, Global.yNegative1, Global.zNegative1), Color(Red), Visible To);
		"MIDPOINT FACE HORIZONTAL: (x,midpoint,-z) -> (-x,midpoint,-z) (Face -Z)"
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(Global.xPositive1, (Global.yPositive1 + Global.yNegative1) / 2,
			Global.zNegative1), Vector(Global.xNegative1, (Global.yPositive1 + Global.yNegative1) / 2, Global.zNegative1), Color(Red),
			Visible To);
		"(x,midpoint,z) -> (-x,midpoint,z) (Face Z)"
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(Global.xPositive1, (Global.yPositive1 + Global.yNegative1) / 2,
			Global.zPositive1), Vector(Global.xNegative1, (Global.yPositive1 + Global.yNegative1) / 2, Global.zPositive1), Color(Red),
			Visible To);
		"(x,midpoint,-z) -> (x,midpoint,z) (Face X)"
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(Global.xPositive1, (Global.yPositive1 + Global.yNegative1) / 2,
			Global.zNegative1), Vector(Global.xPositive1, (Global.yPositive1 + Global.yNegative1) / 2, Global.zPositive1), Color(Red),
			Visible To);
		"(-x,midpoint,-z) -> (-x,midpoint,z) (Face -X)"
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(Global.xNegative1, (Global.yPositive1 + Global.yNegative1) / 2,
			Global.zNegative1), Vector(Global.xNegative1, (Global.yPositive1 + Global.yNegative1) / 2, Global.zPositive1), Color(Red),
			Visible To);
		"MIDPOINT FACE VERTICAL: (midpoint,y,z) -> (midpoint,-y,z) (Face Z)"
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector((Global.xPositive1 + Global.xNegative1) / 2 + 0.001,
			Global.yPositive1, Global.zPositive1), Vector((Global.xPositive1 + Global.xNegative1) / 2, Global.yNegative1,
			Global.zPositive1), Color(Red), Visible To);
		"(midpoint,y,-z) -> (midpoint,-y,-z) (Face -Z)"
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector((Global.xPositive1 + Global.xNegative1) / 2 + 0.001,
			Global.yPositive1, Global.zNegative1), Vector((Global.xPositive1 + Global.xNegative1) / 2, Global.yNegative1,
			Global.zNegative1), Color(Red), Visible To);
		"(x,y,midpoint) -> (x,-y,midpoint) (Face X)"
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(Global.xPositive1, Global.yPositive1, (
			Global.zPositive1 + Global.zNegative1) / 2 + 0.001), Vector(Global.xPositive1, Global.yNegative1, (
			Global.zPositive1 + Global.zNegative1) / 2), Color(Red), Visible To);
		"(-x,y,midpoint) -> (-x,-y,midpoint) (Face -X)"
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(Global.xNegative1, Global.yPositive1, (
			Global.zPositive1 + Global.zNegative1) / 2 + 0.001), Vector(Global.xNegative1, Global.yNegative1, (
			Global.zPositive1 + Global.zNegative1) / 2), Color(Red), Visible To);
		"(x,y,midpoint) -> (x,-y,midpoint) (Face X)"
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(Global.xPositive1, Global.yPositive1, ((
			Global.zPositive1 + Global.zNegative1) / 2 + Global.zNegative1) / 2 + 0.001), Vector(Global.xPositive1, Global.yNegative1, ((
			Global.zPositive1 + Global.zNegative1) / 2 + Global.zNegative1) / 2), Color(Red), Visible To);
		"(-x,y,midpoint) -> (-x,-y,midpoint) (Face -X)"
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(Global.xNegative1, Global.yPositive1, ((
			Global.zPositive1 + Global.zNegative1) / 2 + Global.zNegative1) / 2 + 0.001), Vector(Global.xNegative1, Global.yNegative1, ((
			Global.zPositive1 + Global.zNegative1) / 2 + Global.zNegative1) / 2), Color(Red), Visible To);
		"(x,y,midpoint) -> (x,-y,midpoint) (Face X)"
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(Global.xPositive1, Global.yPositive1, ((
			Global.zNegative1 + Global.zPositive1) / 2 + Global.zPositive1) / 2 + 0.001), Vector(Global.xPositive1, Global.yNegative1, ((
			Global.zNegative1 + Global.zPositive1) / 2 + Global.zPositive1) / 2), Color(Red), Visible To);
		"(-x,y,midpoint) -> (-x,-y,midpoint) (Face -X)"
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(Global.xNegative1, Global.yPositive1, ((
			Global.zNegative1 + Global.zPositive1) / 2 + Global.zPositive1) / 2 + 0.001), Vector(Global.xNegative1, Global.yNegative1, ((
			Global.zNegative1 + Global.zPositive1) / 2 + Global.zPositive1) / 2), Color(Red), Visible To);
	}
}

rule("Boundary Box Edge Construction Subroutine2")
{
	event
	{
		Subroutine;
		arenaSetupEdge2;
	}

	actions
	{
		"BOX EDGES: (x,y,z) -> (x,-y,z)"
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(Global.xPositive2, Global.yPositive2, Global.zPositive2), Vector(
			Global.xPositive2, Global.yNegative2, 0.001 + Global.zPositive2), Color(Green), Visible To);
		disabled Modify Global Variable(toxicjail_tab, Append To Array, Last Created Entity);
		"(x,y,-z) -> (x,-y,-z)"
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(Global.xPositive2, Global.yPositive2, Global.zNegative2), Vector(
			Global.xPositive2, Global.yNegative2, 0.001 + Global.zNegative2), Color(Green), Visible To);
		disabled Modify Global Variable(toxicjail_tab, Append To Array, Last Created Entity);
		"(-x,y,-z) -> (-x,-y,-z)"
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(Global.xNegative2, Global.yPositive2, Global.zNegative2), Vector(
			Global.xNegative2, Global.yNegative2, 0.001 + Global.zNegative2), Color(Green), Visible To);
		disabled Modify Global Variable(toxicjail_tab, Append To Array, Last Created Entity);
		"(-x,y,z) -> (-x,-y,z)"
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(Global.xNegative2, Global.yPositive2, Global.zPositive2), Vector(
			Global.xNegative2, Global.yNegative2, 0.001 + Global.zPositive2), Color(Green), Visible To);
		disabled Modify Global Variable(toxicjail_tab, Append To Array, Last Created Entity);
		"(x,y,z) -> (-x,y,z)"
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(Global.xPositive2, Global.yPositive2, Global.zPositive2), Vector(
			Global.xNegative2, Global.yPositive2, Global.zPositive2), Color(Green), Visible To);
		disabled Modify Global Variable(toxicjail_tab, Append To Array, Last Created Entity);
		"(x,-y,z) -> (-x,-y,z)"
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(Global.xPositive2, Global.yNegative2, Global.zPositive2), Vector(
			Global.xNegative2, Global.yNegative2, Global.zPositive2), Color(Green), Visible To);
		disabled Modify Global Variable(toxicjail_tab, Append To Array, Last Created Entity);
		"(x,y,-z) -> (-x,y,-z)"
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(Global.xPositive2, Global.yPositive2, Global.zNegative2), Vector(
			Global.xNegative2, Global.yPositive2, Global.zNegative2), Color(Green), Visible To);
		disabled Modify Global Variable(toxicjail_tab, Append To Array, Last Created Entity);
		"(x,-y,-z) -> (-x,-y,-z)"
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(Global.xPositive2, Global.yNegative2, Global.zNegative2), Vector(
			Global.xNegative2, Global.yNegative2, Global.zNegative2), Color(Green), Visible To);
		disabled Modify Global Variable(toxicjail_tab, Append To Array, Last Created Entity);
		"(x,y,z) -> (x,y,-z)"
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(Global.xPositive2, Global.yPositive2, Global.zPositive2), Vector(
			Global.xPositive2, Global.yPositive2, Global.zNegative2), Color(Green), Visible To);
		disabled Modify Global Variable(toxicjail_tab, Append To Array, Last Created Entity);
		"(x,-y,z) -> (x,-y,-z)"
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(Global.xPositive2, Global.yNegative2, Global.zPositive2), Vector(
			Global.xPositive2, Global.yNegative2, Global.zNegative2), Color(Green), Visible To);
		disabled Modify Global Variable(toxicjail_tab, Append To Array, Last Created Entity);
		"(-x,y,z) -> (-x,y,-z)"
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(Global.xNegative2, Global.yPositive2, Global.zPositive2), Vector(
			Global.xNegative2, Global.yPositive2, Global.zNegative2), Color(Green), Visible To);
		disabled Modify Global Variable(toxicjail_tab, Append To Array, Last Created Entity);
		"(-x,-y,z) -> (-x,-y,-z)"
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(Global.xNegative2, Global.yNegative2, Global.zPositive2), Vector(
			Global.xNegative2, Global.yNegative2, Global.zNegative2), Color(Green), Visible To);
		disabled Modify Global Variable(toxicjail_tab, Append To Array, Last Created Entity);
		"FREEZE LINE"
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector((Global.xNegative2 - Global.xPositive2) / 2 + Global.xPositive2,
			Global.yBlockFreeze_1, Global.zBlockFreeze), Vector(Global.xNegative2, Global.yBlockFreeze_1, Global.zBlockFreeze), Color(
			Green), Visible To);
		"FREEZE LINE 2"
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector((Global.xNegative2 - Global.xPositive2) / 2 + Global.xPositive2,
			Global.yBlockFreeze_1, (Global.zNegative2 - Global.zPositive2) / 4 + Global.zBlockFreeze), Vector(Global.xNegative2,
			Global.yBlockFreeze_1, (Global.zNegative2 - Global.zPositive2) / 4 + Global.zBlockFreeze), Color(Green), Visible To);
		"FREEZE LINE 3"
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(Global.xPositive2, Global.yBlockFreeze_2, (
			Global.zNegative2 - Global.zPositive2) / 8 + Global.zBlockFreeze), Vector(Global.xNegative2, Global.yBlockFreeze_2, (
			Global.zNegative2 - Global.zPositive2) / 8 + Global.zBlockFreeze), Color(Green), Visible To);
	}
}

rule("Boundary Box Face Construction Subroutine 2")
{
	event
	{
		Subroutine;
		arenaSetupFace2;
	}

	actions
	{
		"This subroutine creates the faces of the arena. (x,y,-z) -> (-x,y,z) (Face Y)"
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(Global.xPositive2, Global.yPositive2, Global.zNegative2), Vector(
			Global.xNegative2, Global.yPositive2, Global.zPositive2), Color(Red), Visible To);
		"(x,y,z) -> (-x,y,-z) (Face Y)"
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(Global.xPositive2, Global.yPositive2, Global.zPositive2), Vector(
			Global.xNegative2, Global.yPositive2, Global.zNegative2), Color(Red), Visible To);
		"(x,y,-z) -> (x,-y,z) (Face X)"
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(Global.xPositive2, Global.yPositive2, Global.zNegative2), Vector(
			Global.xPositive2, Global.yNegative2, Global.zPositive2), Color(Red), Visible To);
		"(x,y,z) -> (x,-y,-z) (Face X)"
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(Global.xPositive2, Global.yPositive2, Global.zPositive2), Vector(
			Global.xPositive2, Global.yNegative2, Global.zNegative2), Color(Red), Visible To);
		"(-x,y,-z) -> (-x,-y,z) (Face -X)"
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(Global.xNegative2, Global.yPositive2, Global.zNegative2), Vector(
			Global.xNegative2, Global.yNegative2, Global.zPositive2), Color(Red), Visible To);
		"(-x,y,z) -> (-x,-y,-z) (Face -X)"
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(Global.xNegative2, Global.yPositive2, Global.zPositive2), Vector(
			Global.xNegative2, Global.yNegative2, Global.zNegative2), Color(Red), Visible To);
		"(x,y,z) -> (-x,-y,z) (Face Z)"
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(Global.xPositive2, Global.yPositive2, Global.zPositive2), Vector(
			Global.xNegative2, Global.yNegative2, Global.zPositive2), Color(Red), Visible To);
		"(-x,y,z) -> (x,-y,z) (Face Z)"
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(Global.xNegative2, Global.yPositive2, Global.zPositive2), Vector(
			Global.xPositive2, Global.yNegative2, Global.zPositive2), Color(Red), Visible To);
		"(x,-y,z) -> (-x,-y,-z) (Face -Y)"
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(Global.xPositive2, Global.yNegative2, Global.zPositive2), Vector(
			Global.xNegative2, Global.yNegative2, Global.zNegative2), Color(Red), Visible To);
		"(x,-y,-z) -> (-x,-y,z) (Face -Y)"
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(Global.xPositive2, Global.yNegative2, Global.zNegative2), Vector(
			Global.xNegative2, Global.yNegative2, Global.zPositive2), Color(Red), Visible To);
		"(x,y,-z) -> (-x,-y,-z) (Face -Z)"
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(Global.xPositive2, Global.yPositive2, Global.zNegative2), Vector(
			Global.xNegative2, Global.yNegative2, Global.zNegative2), Color(Red), Visible To);
		"(-x,y,-z) -> (x,-y,-z) (Face -Z)"
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(Global.xNegative2, Global.yPositive2, Global.zNegative2), Vector(
			Global.xPositive2, Global.yNegative2, Global.zNegative2), Color(Red), Visible To);
		"MIDPOINT FACE HORIZONTAL: (x,midpoint,-z) -> (-x,midpoint,-z) (Face -Z)"
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(Global.xPositive2, (Global.yPositive2 + Global.yNegative2) / 2,
			Global.zNegative2), Vector(Global.xNegative2, (Global.yPositive2 + Global.yNegative2) / 2, Global.zNegative2), Color(Red),
			Visible To);
		"(x,midpoint,z) -> (-x,midpoint,z) (Face Z)"
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(Global.xPositive2, (Global.yPositive2 + Global.yNegative2) / 2,
			Global.zPositive2), Vector(Global.xNegative2, (Global.yPositive2 + Global.yNegative2) / 2, Global.zPositive2), Color(Red),
			Visible To);
		"(x,midpoint,-z) -> (x,midpoint,z) (Face X)"
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(Global.xPositive2, (Global.yPositive2 + Global.yNegative2) / 2,
			Global.zNegative2), Vector(Global.xPositive2, (Global.yPositive2 + Global.yNegative2) / 2, Global.zPositive2), Color(Red),
			Visible To);
		"(-x,midpoint,-z) -> (-x,midpoint,z) (Face -X)"
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(Global.xNegative2, (Global.yPositive2 + Global.yNegative2) / 2,
			Global.zNegative2), Vector(Global.xNegative2, (Global.yPositive2 + Global.yNegative2) / 2, Global.zPositive2), Color(Red),
			Visible To);
		"MIDPOINT FACE VERTICAL: (midpoint,y,z) -> (midpoint,-y,z) (Face Z)"
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector((Global.xPositive2 + Global.xNegative2) / 2 + 0.001,
			Global.yPositive2, Global.zPositive2), Vector((Global.xPositive2 + Global.xNegative2) / 2, Global.yNegative2,
			Global.zPositive2), Color(Red), Visible To);
		"(midpoint,y,-z) -> (midpoint,-y,-z) (Face -Z)"
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector((Global.xPositive2 + Global.xNegative2) / 2 + 0.001,
			Global.yPositive2, Global.zNegative2), Vector((Global.xPositive2 + Global.xNegative2) / 2, Global.yNegative2,
			Global.zNegative2), Color(Red), Visible To);
		"(x,y,midpoint) -> (x,-y,midpoint) (Face X)"
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(Global.xPositive2, Global.yPositive2, (
			Global.zPositive2 + Global.zNegative2) / 2 + 0.001), Vector(Global.xPositive2, Global.yNegative2, (
			Global.zPositive2 + Global.zNegative2) / 2), Color(Red), Visible To);
		"(-x,y,midpoint) -> (-x,-y,midpoint) (Face -X)"
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(Global.xNegative2, Global.yPositive2, (
			Global.zPositive2 + Global.zNegative2) / 2 + 0.001), Vector(Global.xNegative2, Global.yNegative2, (
			Global.zPositive2 + Global.zNegative2) / 2), Color(Red), Visible To);
		"(x,y,midpoint) -> (x,-y,midpoint) (Face X)"
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(Global.xPositive2, Global.yPositive2, ((
			Global.zPositive2 + Global.zNegative2) / 2 + Global.zNegative2) / 2 + 0.001), Vector(Global.xPositive2, Global.yNegative2, ((
			Global.zPositive2 + Global.zNegative2) / 2 + Global.zNegative2) / 2), Color(Red), Visible To);
		"(-x,y,midpoint) -> (-x,-y,midpoint) (Face -X)"
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(Global.xNegative2, Global.yPositive2, ((
			Global.zPositive2 + Global.zNegative2) / 2 + Global.zNegative2) / 2 + 0.001), Vector(Global.xNegative2, Global.yNegative2, ((
			Global.zPositive2 + Global.zNegative2) / 2 + Global.zNegative2) / 2), Color(Red), Visible To);
		"(x,y,midpoint) -> (x,-y,midpoint) (Face X)"
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(Global.xPositive2, Global.yPositive2, ((
			Global.zNegative2 + Global.zPositive2) / 2 + Global.zPositive2) / 2 + 0.001), Vector(Global.xPositive2, Global.yNegative2, ((
			Global.zNegative2 + Global.zPositive2) / 2 + Global.zPositive2) / 2), Color(Red), Visible To);
		"(-x,y,midpoint) -> (-x,-y,midpoint) (Face -X)"
		Create Beam Effect(All Players(All Teams), Grapple Beam, Vector(Global.xNegative2, Global.yPositive2, ((
			Global.zNegative2 + Global.zPositive2) / 2 + Global.zPositive2) / 2 + 0.001), Vector(Global.xNegative2, Global.yNegative2, ((
			Global.zNegative2 + Global.zPositive2) / 2 + Global.zPositive2) / 2), Color(Red), Visible To);
	}
}

rule("ToxicPlayer die")
{
	event
	{
		Player Died;
		All;
		All;
	}

	conditions
	{
		Event Player == True;
	}

	actions
	{
		Destroy Icon(Event Player.ToxicPlayerIcon);
		Destroy Icon(Event Player.iconCampingSpawn);
	}
}

rule("Kill Player Subroutine")
{
	event
	{
		Subroutine;
		toxic_freeze;
	}

	actions
	{
		Destroy Icon(Event Player.ToxicPlayerIcon);
		Wait(0.100, Ignore Condition);
		Set Status(Event Player, Null, Frozen, 10);
		Play Effect(All Players(All Teams), Good Explosion, Color(Green), Position Of(Event Player), 5);
		Create Icon(All Players(All Teams), Event Player, Radioactive, Visible To and Position, Color(Green), False);
		Event Player.ToxicPlayerIcon = Last Created Entity;
	}
}

rule("test block kill 1")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Ray Cast Hit Player(Vector((Global.xNegative1 - Global.xPositive1) / 2 + Global.xPositive1, Global.yBlockFreeze_1,
			Global.zBlockFreeze), Vector(Global.xNegative1, Global.yBlockFreeze_1, Global.zBlockFreeze), Event Player, Null, True) == True;
		Event Player == Is Alive(Event Player);
	}

	actions
	{
		Call Subroutine(toxic_freeze);
	}
}

rule("test block kill 2")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Ray Cast Hit Player(Vector((Global.xNegative1 - Global.xPositive1) / 2 + Global.xPositive1, Global.yBlockFreeze_1, (
			Global.zNegative1 - Global.zPositive1) / 4 + Global.zBlockFreeze), Vector(Global.xNegative1, Global.yBlockFreeze_1, (
			Global.zNegative1 - Global.zPositive1) / 4 + Global.zBlockFreeze), Event Player, Null, True) == True;
		Event Player == Is Alive(Event Player);
	}

	actions
	{
		Call Subroutine(toxic_freeze);
	}
}

rule("test block kill 3")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Ray Cast Hit Player(Vector(Global.xPositive1, Global.yBlockFreeze_2, (Global.zNegative1 - Global.zPositive1)
			/ 8 + Global.zBlockFreeze), Vector(Global.xNegative1, Global.yBlockFreeze_2, (Global.zNegative1 - Global.zPositive1)
			/ 8 + Global.zBlockFreeze), Event Player, Null, True) == True;
		Event Player == Is Alive(Event Player);
	}

	actions
	{
		Call Subroutine(toxic_freeze);
	}
}

rule("test block kill 4")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Ray Cast Hit Player(Vector((Global.xNegative2 - Global.xPositive2) / 2 + Global.xPositive2, Global.yBlockFreeze_1,
			Global.zBlockFreeze), Vector(Global.xNegative2, Global.yBlockFreeze_1, Global.zBlockFreeze), Event Player, Null, True) == True;
		Event Player == Is Alive(Event Player);
	}

	actions
	{
		Call Subroutine(toxic_freeze);
	}
}

rule("test block kill 5")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Ray Cast Hit Player(Vector((Global.xNegative2 - Global.xPositive2) / 2 + Global.xPositive2, Global.yBlockFreeze_1, (
			Global.zNegative2 - Global.zPositive2) / 4 + Global.zBlockFreeze), Vector(Global.xNegative2, Global.yBlockFreeze_1, (
			Global.zNegative2 - Global.zPositive2) / 4 + Global.zBlockFreeze), Event Player, Null, True) == True;
		Event Player == Is Alive(Event Player);
	}

	actions
	{
		Call Subroutine(toxic_freeze);
	}
}

rule("test block kill 6")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Ray Cast Hit Player(Vector(Global.xPositive2, Global.yBlockFreeze_2, (Global.zNegative2 - Global.zPositive2)
			/ 8 + Global.zBlockFreeze), Vector(Global.xNegative2, Global.yBlockFreeze_2, (Global.zNegative2 - Global.zPositive2)
			/ 8 + Global.zBlockFreeze), Event Player, Null, True) == True;
		Event Player == Is Alive(Event Player);
	}

	actions
	{
		Call Subroutine(toxic_freeze);
	}
}

rule("iconCampingSpawn subroutine")
{
	event
	{
		Subroutine;
		campingSpawn;
	}

	actions
	{
		Damage(Event Player, Null, 5.287);
		Destroy Icon(Event Player.iconCampingSpawn);
		Set Status(Event Player, Null, Burning, 9999);
		Create Icon(All Players(All Teams), Event Player, No, Visible To and Position, Color(Red), True);
		Event Player.iconCampingSpawn = Last Created Entity;
		Destroy Icon(Event Player.iconCampingSpawn);
		Wait(0.557, Ignore Condition);
		Loop If Condition Is True;
		Clear Status(Event Player, Burning);
		Destroy Icon(Event Player.iconCampingSpawn);
	}
}

rule("When someone is in a spawn (-xTeam2< >+xTeam1)")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Match Time <= 190;
		Event Player == Is Alive(Event Player);
		(X Component Of(Position Of(Event Player)) <= Global.varPosSpawnAreaNX || X Component Of(Position Of(Event Player))
			>= Global.varPosSpawnAreaPX) == True;
		disabled (Horizontal Angle Towards(Event Player, Global.varAnglePosXp) || Horizontal Angle Towards(Event Player, Global.varAnglePosXn))
			== True;
	}

	actions
	{
		Call Subroutine(campingSpawn);
	}
}

rule("When someone is in a spawn (-zTeam2< >+zTeam1)")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Match Time <= 190;
		Event Player == Is Alive(Event Player);
		(Z Component Of(Position Of(Event Player)) <= Global.varPosSpawnAreaNZ || Z Component Of(Position Of(Event Player))
			>= Global.varPosSpawnAreaPZ) == True;
		disabled (Horizontal Angle Towards(Event Player, Global.varAnglePosZp) || Horizontal Angle Towards(Event Player, Global.varAnglePosZn))
			<= Angle Difference(-60, 120);
		disabled Angle Between Vectors(Global.varAnglePosZp, Event Player) == True;
		disabled ((Z Component Of(Position Of(Event Player)) <= Global.varPosSpawnAreaNZ && Horizontal Angle Towards(Event Player, Vector(-151.269,
			-94.990, 91.922))) || (Z Component Of(Position Of(Event Player)) >= Global.varPosSpawnAreaPZ && Horizontal Angle Towards(
			Event Player, Vector(-151.269, -94.990, 91.922)))) == True;
	}

	actions
	{
		Call Subroutine(campingSpawn);
	}
}

rule("Start camera when spawn")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Stop Camera(Event Player);
		Start Camera(Event Player, Ray Cast Hit Position(Event Player, Eye Position(Event Player) + World Vector Of(Vector(0, -1.180,
			0.055), Event Player, Rotation) + Up * 1.500 + Facing Direction Of(Event Player) * -1.800, Null, Event Player, True),
			Event Player + Facing Direction Of(Event Player) * 1000, 76.288);
		If(Hero Of(Event Player) == Hero(Orisa) || Hero Of(Event Player) == Hero(Bastion) || Hero Of(Event Player) == Hero(Sigma)
			|| Hero Of(Event Player) == Hero(Reinhardt));
			Start Camera(Event Player, Ray Cast Hit Position(Event Player, Eye Position(Event Player) + World Vector Of(Vector(0, -1.180,
				-0.728), Event Player, Rotation) + Up * 2.008 + Facing Direction Of(Event Player) * -1.800, Null, Event Player, True),
				Event Player + Facing Direction Of(Event Player) * 1000, 76.288);
		End;
	}
}

disabled rule("varWallDetection#0 = Detection Radius")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Reaper;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Reaper);
	}

	actions
	{
		Event Player.varWallDetection[0] = 1;
	}
}

disabled rule("varWallDetection#1 = 1 / 0 (on/off Wall)")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Reaper;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Reaper);
		(Is In Line of Sight(Eye Position(Event Player), Eye Position(Event Player) + Direction From Angles(0, 0)
			* Event Player.varWallDetection[0], Barriers Do Not Block LOS) && Is In Line of Sight(Eye Position(Event Player), Eye Position(
			Event Player) + Direction From Angles(22.500, 0) * Event Player.varWallDetection[0], Barriers Do Not Block LOS)
			&& Is In Line of Sight(Eye Position(Event Player), Eye Position(Event Player) + Direction From Angles(45, 0)
			* Event Player.varWallDetection[0], Barriers Do Not Block LOS) && Is In Line of Sight(Eye Position(Event Player), Eye Position(
			Event Player) + Direction From Angles(67.500, 0) * Event Player.varWallDetection[0], Barriers Do Not Block LOS)
			&& Is In Line of Sight(Eye Position(Event Player), Eye Position(Event Player) + Direction From Angles(90, 0)
			* Event Player.varWallDetection[0], Barriers Do Not Block LOS) && Is In Line of Sight(Eye Position(Event Player), Eye Position(
			Event Player) + Direction From Angles(112.500, 0) * Event Player.varWallDetection[0], Barriers Do Not Block LOS)
			&& Is In Line of Sight(Eye Position(Event Player), Eye Position(Event Player) + Direction From Angles(135, 0)
			* Event Player.varWallDetection[0], Barriers Do Not Block LOS) && Is In Line of Sight(Eye Position(Event Player), Eye Position(
			Event Player) + Direction From Angles(157.500, 0) * Event Player.varWallDetection[0], Barriers Do Not Block LOS)
			&& Is In Line of Sight(Eye Position(Event Player), Eye Position(Event Player) + Direction From Angles(180, 0)
			* Event Player.varWallDetection[0], Barriers Do Not Block LOS) && Is In Line of Sight(Eye Position(Event Player), Eye Position(
			Event Player) + Direction From Angles(202.500, 0) * Event Player.varWallDetection[0], Barriers Do Not Block LOS)
			&& Is In Line of Sight(Eye Position(Event Player), Eye Position(Event Player) + Direction From Angles(225, 0)
			* Event Player.varWallDetection[0], Barriers Do Not Block LOS) && Is In Line of Sight(Eye Position(Event Player), Eye Position(
			Event Player) + Direction From Angles(247.500, 0) * Event Player.varWallDetection[0], Barriers Do Not Block LOS)
			&& Is In Line of Sight(Eye Position(Event Player), Eye Position(Event Player) + Direction From Angles(270, 0)
			* Event Player.varWallDetection[0], Barriers Do Not Block LOS) && Is In Line of Sight(Eye Position(Event Player), Eye Position(
			Event Player) + Direction From Angles(292.500, 0) * Event Player.varWallDetection[0], Barriers Do Not Block LOS)
			&& Is In Line of Sight(Eye Position(Event Player), Eye Position(Event Player) + Direction From Angles(315, 0)
			* Event Player.varWallDetection[0], Barriers Do Not Block LOS) && Is In Line of Sight(Eye Position(Event Player), Eye Position(
			Event Player) + Direction From Angles(337.500, 0) * Event Player.varWallDetection[0], Barriers Do Not Block LOS)) == False;
	}

	actions
	{
		Event Player.varWallDetection[1] = 1;
		Wait(0.016, Restart When True);
		Loop If Condition Is True;
		Event Player.varWallDetection[1] = 0;
		Loop If Condition Is True;
	}
}

disabled rule("varWallDetection#2 = Normal Vector of Detected Wall")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Reaper;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Reaper);
		Event Player.varWallDetection[1] == 1;
		Is Moving(Event Player) == True;
	}

	actions
	{
		Skip If((Is In Line of Sight(Eye Position(Event Player), Eye Position(Event Player) + Direction From Angles(0, 0)
			* Event Player.varWallDetection[0], Barriers Do Not Block LOS) && Is In Line of Sight(Eye Position(Event Player), Eye Position(
			Event Player) + Direction From Angles(22.500, 0) * Event Player.varWallDetection[0], Barriers Do Not Block LOS)
			&& Is In Line of Sight(Eye Position(Event Player), Eye Position(Event Player) + Direction From Angles(45, 0)
			* Event Player.varWallDetection[0], Barriers Do Not Block LOS) && Is In Line of Sight(Eye Position(Event Player), Eye Position(
			Event Player) + Direction From Angles(67.500, 0) * Event Player.varWallDetection[0], Barriers Do Not Block LOS)
			&& Is In Line of Sight(Eye Position(Event Player), Eye Position(Event Player) + Direction From Angles(90, 0)
			* Event Player.varWallDetection[0], Barriers Do Not Block LOS) && Is In Line of Sight(Eye Position(Event Player), Eye Position(
			Event Player) + Direction From Angles(112.500, 0) * Event Player.varWallDetection[0], Barriers Do Not Block LOS)
			&& Is In Line of Sight(Eye Position(Event Player), Eye Position(Event Player) + Direction From Angles(135, 0)
			* Event Player.varWallDetection[0], Barriers Do Not Block LOS) && Is In Line of Sight(Eye Position(Event Player), Eye Position(
			Event Player) + Direction From Angles(157.500, 0) * Event Player.varWallDetection[0], Barriers Do Not Block LOS)) == True, 35);
		Skip If((Is In Line of Sight(Eye Position(Event Player), Eye Position(Event Player) + Direction From Angles(0, 0)
			* Event Player.varWallDetection[0], Barriers Do Not Block LOS) && Is In Line of Sight(Eye Position(Event Player), Eye Position(
			Event Player) + Direction From Angles(22.500, 0) * Event Player.varWallDetection[0], Barriers Do Not Block LOS)
			&& Is In Line of Sight(Eye Position(Event Player), Eye Position(Event Player) + Direction From Angles(45, 0)
			* Event Player.varWallDetection[0], Barriers Do Not Block LOS) && Is In Line of Sight(Eye Position(Event Player), Eye Position(
			Event Player) + Direction From Angles(67.500, 0) * Event Player.varWallDetection[0], Barriers Do Not Block LOS)) == True, 17);
		Skip If((Is In Line of Sight(Eye Position(Event Player), Eye Position(Event Player) + Direction From Angles(0, 0)
			* Event Player.varWallDetection[0], Barriers Do Not Block LOS) && Is In Line of Sight(Eye Position(Event Player), Eye Position(
			Event Player) + Direction From Angles(22.500, 0) * Event Player.varWallDetection[0], Barriers Do Not Block LOS)) == True, 8);
		Skip If(Is In Line of Sight(Eye Position(Event Player), Eye Position(Event Player) + Direction From Angles(0, 0)
			* Event Player.varWallDetection[0], Barriers Do Not Block LOS) == True, 2);
		Event Player.varWallDetection[2] = Ray Cast Hit Normal(Eye Position(Event Player), Eye Position(Event Player)
			+ Direction From Angles(0, 0) * (Event Player.varWallDetection[0] + 1), Null, Event Player, True);
		Skip(2);
		Skip If(Is In Line of Sight(Eye Position(Event Player), Eye Position(Event Player) + Direction From Angles(22.500, 0)
			* Event Player.varWallDetection[0], Barriers Do Not Block LOS), 1);
		Event Player.varWallDetection[2] = Ray Cast Hit Normal(Eye Position(Event Player), Eye Position(Event Player)
			+ Direction From Angles(22.500, 0) * (Global.varWallDetection[0] + 1), Null, Event Player, True);
		Wait(0, Restart When True);
		Loop If Condition Is True;
		Skip(71);
		Skip If(Is In Line of Sight(Eye Position(Event Player), Eye Position(Event Player) + Direction From Angles(45, 0)
			* Event Player.varWallDetection[0], Barriers Do Not Block LOS) == True, 2);
		Event Player.varWallDetection[2] = Ray Cast Hit Normal(Eye Position(Event Player), Eye Position(Event Player)
			+ Direction From Angles(45, 0) * (Event Player.varWallDetection[0] + 1), Null, Event Player, True);
		Skip(2);
		Skip If(Is In Line of Sight(Eye Position(Event Player), Eye Position(Event Player) + Direction From Angles(67.500, 0)
			* Event Player.varWallDetection[0], Barriers Do Not Block LOS), 1);
		Event Player.varWallDetection[2] = Ray Cast Hit Normal(Eye Position(Event Player), Eye Position(Event Player)
			+ Direction From Angles(67.500, 0) * (Event Player.varWallDetection[0] + 1), Null, Event Player, True);
		Wait(0, Restart When True);
		Loop If Condition Is True;
		Skip(49);
		Skip If((Is In Line of Sight(Eye Position(Event Player), Eye Position(Event Player) + Direction From Angles(90, 0)
			* Event Player.varWallDetection[0], Barriers Do Not Block LOS) && Is In Line of Sight(Eye Position(Event Player), Eye Position(
			Event Player) + Direction From Angles(112.500, 0) * Event Player.varWallDetection[0], Barriers Do Not Block LOS)) == True, 8);
		Skip If(Is In Line of Sight(Eye Position(Event Player), Eye Position(Event Player) + Direction From Angles(90, 0)
			* Event Player.varWallDetection[0], Barriers Do Not Block LOS) == True, 2);
		Event Player.varWallDetection[2] = Ray Cast Hit Normal(Eye Position(Event Player), Eye Position(Event Player)
			+ Direction From Angles(90, 0) * (Event Player.varWallDetection[0] + 1), Null, Event Player, True);
		Skip(2);
		Skip If(Is In Line of Sight(Eye Position(Event Player), Eye Position(Event Player) + Direction From Angles(112.500, 0)
			* Event Player.varWallDetection[0], Barriers Do Not Block LOS), 1);
		Event Player.varWallDetection[2] = Ray Cast Hit Normal(Eye Position(Event Player), Eye Position(Event Player)
			+ Direction From Angles(112.500, 0) * (Event Player.varWallDetection[0] + 1), Null, Event Player, True);
		Wait(0, Restart When True);
		Loop If Condition Is True;
		Skip(40);
		Skip If(Is In Line of Sight(Eye Position(Event Player), Eye Position(Event Player) + Direction From Angles(135, 0)
			* Event Player.varWallDetection[0], Barriers Do Not Block LOS) == True, 2);
		Event Player.varWallDetection[2] = Ray Cast Hit Normal(Eye Position(Event Player), Eye Position(Event Player)
			+ Direction From Angles(135, 0) * (Event Player.varWallDetection[0] + 1), Null, Event Player, True);
		Skip(2);
		Skip If(Is In Line of Sight(Eye Position(Event Player), Eye Position(Event Player) + Direction From Angles(157.500, 0)
			* Event Player.varWallDetection[0], Barriers Do Not Block LOS), 1);
		Event Player.varWallDetection[2] = Ray Cast Hit Normal(Eye Position(Event Player), Eye Position(Event Player)
			+ Direction From Angles(157.500, 0) * (Event Player.varWallDetection[0] + 1), Null, Event Player, True);
		Wait(0, Restart When True);
		Loop If Condition Is True;
		Skip(32);
		Skip If((Is In Line of Sight(Eye Position(Event Player), Eye Position(Event Player) + Direction From Angles(180, 0)
			* Event Player.varWallDetection[0], Barriers Do Not Block LOS) && Is In Line of Sight(Eye Position(Event Player), Eye Position(
			Event Player) + Direction From Angles(202.500, 0) * Event Player.varWallDetection[0], Barriers Do Not Block LOS)
			&& Is In Line of Sight(Eye Position(Event Player), Eye Position(Event Player) + Direction From Angles(225, 0)
			* Event Player.varWallDetection[0], Barriers Do Not Block LOS) && Is In Line of Sight(Eye Position(Event Player), Eye Position(
			Event Player) + Direction From Angles(247.500, 0) * Event Player.varWallDetection[0], Barriers Do Not Block LOS)) == True, 17);
		Skip If((Is In Line of Sight(Eye Position(Event Player), Eye Position(Event Player) + Direction From Angles(180, 0)
			* Event Player.varWallDetection[0], Barriers Do Not Block LOS) && Is In Line of Sight(Eye Position(Event Player), Eye Position(
			Event Player) + Direction From Angles(202.500, 0) * Event Player.varWallDetection[0], Barriers Do Not Block LOS)) == True, 8);
		Skip If(Is In Line of Sight(Eye Position(Event Player), Eye Position(Event Player) + Direction From Angles(180, 0)
			* Event Player.varWallDetection[0], Barriers Do Not Block LOS) == True, 2);
		Event Player.varWallDetection[2] = Ray Cast Hit Normal(Eye Position(Event Player), Eye Position(Event Player)
			+ Direction From Angles(180, 0) * (Event Player.varWallDetection[0] + 1), Null, Event Player, True);
		Skip(2);
		Skip If(Is In Line of Sight(Eye Position(Event Player), Eye Position(Event Player) + Direction From Angles(202.500, 0)
			* Event Player.varWallDetection[0], Barriers Do Not Block LOS), 1);
		Event Player.varWallDetection[2] = Ray Cast Hit Normal(Eye Position(Event Player), Eye Position(Event Player)
			+ Direction From Angles(202.500, 0) * (Event Player.varWallDetection[0] + 1), Null, Event Player, True);
		Wait(0, Restart When True);
		Loop If Condition Is True;
		Skip(22);
		Skip If(Is In Line of Sight(Eye Position(Event Player), Eye Position(Event Player) + Direction From Angles(225, 0)
			* Event Player.varWallDetection[0], Barriers Do Not Block LOS) == True, 2);
		Event Player.varWallDetection[2] = Ray Cast Hit Normal(Eye Position(Event Player), Eye Position(Event Player)
			+ Direction From Angles(225, 0) * (Event Player.varWallDetection[0] + 1), Null, Event Player, True);
		Skip(2);
		Skip If(Is In Line of Sight(Eye Position(Event Player), Eye Position(Event Player) + Direction From Angles(247.500, 0)
			* Event Player.varWallDetection[0], Barriers Do Not Block LOS), 1);
		Event Player.varWallDetection[2] = Ray Cast Hit Normal(Eye Position(Event Player), Eye Position(Event Player)
			+ Direction From Angles(247.500, 0) * (Event Player.varWallDetection[0] + 1), Null, Event Player, True);
		Wait(0, Restart When True);
		Loop If Condition Is True;
		Skip(14);
		Skip If((Is In Line of Sight(Eye Position(Event Player), Eye Position(Event Player) + Direction From Angles(270, 0)
			* Event Player.varWallDetection[0], Barriers Do Not Block LOS) && Is In Line of Sight(Eye Position(Event Player), Eye Position(
			Event Player) + Direction From Angles(292.500, 0) * Event Player.varWallDetection[0], Barriers Do Not Block LOS)) == True, 8);
		Skip If(Is In Line of Sight(Eye Position(Event Player), Eye Position(Event Player) + Direction From Angles(270, 0)
			* Event Player.varWallDetection[2], Barriers Do Not Block LOS) == True, 2);
		Event Player.varWallDetection[2] = Ray Cast Hit Normal(Eye Position(Event Player), Eye Position(Event Player)
			+ Direction From Angles(270, 0) * (Event Player.varWallDetection[0] + 1), Null, Event Player, True);
		Skip(2);
		Skip If(Is In Line of Sight(Eye Position(Event Player), Eye Position(Event Player) + Direction From Angles(292.500, 0)
			* Event Player.varWallDetection[0], Barriers Do Not Block LOS), 1);
		Event Player.varWallDetection[2] = Ray Cast Hit Normal(Eye Position(Event Player), Eye Position(Event Player)
			+ Direction From Angles(292.500, 0) * (Event Player.varWallDetection[0] + 1), Null, Event Player, True);
		Wait(0, Restart When True);
		Loop If Condition Is True;
		Skip(5);
		Skip If(Is In Line of Sight(Eye Position(Event Player), Eye Position(Event Player) + Direction From Angles(315, 0)
			* Event Player.varWallDetection[0], Barriers Do Not Block LOS) == True, 2);
		Event Player.varWallDetection[2] = Ray Cast Hit Normal(Eye Position(Event Player), Eye Position(Event Player)
			+ Direction From Angles(315, 0) * (Event Player.varWallDetection[0] + 1), Null, Event Player, True);
		Skip(2);
		Skip If(Is In Line of Sight(Eye Position(Event Player), Eye Position(Event Player) + Direction From Angles(337.500, 0)
			* Event Player.varWallDetection[0], Barriers Do Not Block LOS), 1);
		Event Player.varWallDetection[2] = Ray Cast Hit Normal(Eye Position(Event Player), Eye Position(Event Player)
			+ Direction From Angles(337.500, 0) * (Event Player.varWallDetection[0] + 1), Null, Event Player, True);
		Wait(0, Restart When True);
		Loop If Condition Is True;
	}
}

disabled rule("###################################### DEBUG ######################################")
{
	event
	{
		Ongoing - Global;
	}
}

disabled rule("Reload kill allie")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Reload)) == True;
	}

	actions
	{
		Kill(Closest Player To(Event Player, Team 1), Null);
	}
}

disabled rule("punch kill enemy")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Melee)) == True;
	}

	actions
	{
		Kill(Closest Player To(Event Player, Team 2), Null);
	}
}

disabled rule("move forward bot")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Start Forcing Throttle(Event Player, 1, 2, 0, 0, 0, 0);
	}
}

disabled rule("HUD x, y, z + Angle°")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		Create HUD Text(Event Player, String("{0} {1} {2}", String("{0}: {1}", Custom String("X"), X Component Of(Position Of(
			Event Player))), String("{0}:{1}", Custom String("Y"), Y Component Of(Position Of(Event Player))), String("{0}:{1}",
			Custom String("Z"), Z Component Of(Position Of(Event Player)))), Null, Null, Top, 0.050, Color(White), Color(White), Color(
			White), String, Default Visibility);
		Create HUD Text(Event Player, Vertical Facing Angle Of(Event Player) * -1, Null, Null, Top, 0.100, Color(Green), Color(White),
			Color(White), String, Default Visibility);
		Create HUD Text(Event Player, Horizontal Facing Angle Of(Event Player), Null, Null, Top, 0.100, Color(Red), Color(White), Color(
			White), String, Default Visibility);
	}
}

disabled rule("BOT")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create Dummy Bot(Hero(Reinhardt), Team 2, -1, Vector(0, 0, 0), Vector(0, 0, 0));
		Create Dummy Bot(Hero(Sigma), Team 2, -2, Vector(0, 0, 0), Vector(0, 0, 0));
		Create Dummy Bot(Hero(Orisa), Team 1, 1, Vector(31.697, 2.002, -6.637), Vector(0, 0, 0));
		Create Dummy Bot(Hero(Baptiste), Team 1, 2, Vector(16.376, 1.098, -2.790), Vector(0, 0, 0));
		Create Dummy Bot(Hero(Baptiste), Team 1, 3, Vector(0, 0, 0), Vector(0, 0, 0));
		Create Dummy Bot(Hero(Orisa), Team 1, 4, Vector(16.376, 1.098, -2.790), Vector(0, 0, 0));
		Create Dummy Bot(Hero(D.Va), Team 1, 5, Vector(0, 0, 0), Vector(0, 0, 0));
		Create Dummy Bot(Hero(Brigitte), Team 1, 0, Vector(22.772, 5.102, 11.226), Vector(0, 0, 0));
	}
}

disabled rule("show dmg")
{
	event
	{
		Player Dealt Damage;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) != True;
		Event Was Critical Hit != True;
	}

	actions
	{
		Destroy In-World Text(Last Text ID);
		Create In-World Text(Event Player, Round To Integer(Event Damage, To Nearest), Ray Cast Hit Position(Event Player, Victim,
			All Players(All Teams), Event Player, True), 1.600, Clip Against Surfaces, Visible To and String, Color(White),
			Default Visibility);
	}
}

disabled rule("show dmg if critical")
{
	event
	{
		Player Dealt Damage;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) != True;
		Event Was Critical Hit == True;
	}

	actions
	{
		Destroy In-World Text(Last Text ID);
		Create In-World Text(Event Player, Round To Integer(Event Damage, To Nearest), Ray Cast Hit Position(Event Player, Victim,
			All Players(All Teams), Event Player, True), 2.100, Clip Against Surfaces, Visible To and String, Color(Lime Green),
			Default Visibility);
	}
}

disabled rule("HUD TEXT / DEBug")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		Zenyatta;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Create HUD Text(Event Player, Event Player.varWallDetection[1], String("Wall"), Null, Left, 0, Color(Yellow), Color(Yellow), Color(
			White), Visible To and String, Default Visibility);
		Create HUD Text(Event Player, Event Player.varWallDetection[2], String("Normal"), Null, Left, 0, Color(Green), Color(Green), Color(
			White), Visible To and String, Default Visibility);
	}
}

disabled rule("SPAWN BOT WHERE I LOOK PLACE 1")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Melee)) == True;
	}

	actions
	{
		Create Dummy Bot(Hero(Orisa), Team 1, 1, Event Player, Facing Direction Of(Event Player));
	}
}

disabled rule("REMOVE THE BOT PLACE 1")
{
	event
	{
		Ongoing - Each Player;
		Team 1;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Primary Fire)) == True;
	}

	actions
	{
		Destroy Dummy Bot(Team 1, 1);
	}
}

rule("|I|I|I|I|I|I|I|I|")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Event Player.Bay = Custom String("{0}", Event Player);
	}
}

rule("|I|I|I|I|I|I|I|I|I|")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Bay == Custom String("Oni");
		(Is Button Held(Event Player, Button(Crouch)) && Is Button Held(Event Player, Button(Jump))) == True;
		Event Player.Bay_Button == True;
	}

	actions
	{
		Wait(0.094, Abort When False);
		Destroy HUD Text(Event Player.Bay_Text);
		Event Player.Bay_Button = False;
	}
}

rule("|I|I|I|I|I|I|I|I|I|I|")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Bay == Custom String("Oni");
		(Is Button Held(Event Player, Button(Crouch)) && Is Button Held(Event Player, Button(Jump))) == True;
		Event Player.Bay_Button == False;
	}

	actions
	{
		Wait(0.094, Abort When False);
		Create HUD Text(Event Player, Custom String("Bay, je t'aime ♥"), Null, Null, Right, 99, Color(Lime Green), Color(Green), Color(
			Red), Visible To and String, Visible Never);
		Event Player.Bay_Text = Last Text ID;
		Event Player.Bay_Button = True;
	}
}

rule("|I|I|I|I|I|I|I|I|I|I||I||I||I|")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Event Player.Phil = Custom String("{0}", Event Player);
	}
}

rule("|I||I||I||I||I||I||I||I||I||I||I||I||I||I||I|")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Phil == Custom String("Philmer");
		(Is Button Held(Event Player, Button(Crouch)) && Is Button Held(Event Player, Button(Jump))) == True;
		Event Player.Phil_Button == True;
	}

	actions
	{
		Wait(0.094, Abort When False);
		Destroy HUD Text(Event Player.Phil_Text);
		Event Player.Phil_Button = False;
	}
}

rule("|I||I||I||I||I||I||I||I||I||I||I||I||I||I||I||I||I|")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Phil == Custom String("Philmer");
		(Is Button Held(Event Player, Button(Crouch)) && Is Button Held(Event Player, Button(Jump))) == True;
		Event Player.Phil_Button == False;
	}

	actions
	{
		Wait(0.094, Abort When False);
		Create HUD Text(Event Player, Custom String("Oni's Slave ♥"), Null, Null, Right, 99, Color(Lime Green), Color(Green), Color(Red),
			Visible To and String, Visible Never);
		Event Player.Phil_Text = Last Text ID;
		Event Player.Phil_Button = True;
	}
}