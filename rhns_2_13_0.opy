settings {
    "main": {
        "description": "[RUN\\HIDE AND SEEK ♣ 2.13.0 : 214Z1 - Philmer#2681]  For the [3D]view to [FPS]view it's Crouch+Interact(CTRL+F)  Press RELOAD + MELEE to know what do your character  JOIN MVC !  Don't use unfair spot!  /!\\ Friends have priority /!\\"
    },
    "lobby": {
        "enableMatchVoiceChat": true,
        "spectatorSlots": 12,
        "team1Slots": 6,
        "team2Slots": 2,
        "returnToLobby": "never",
        "swapTeamsAfterMatch": false,
        "useExperimentalUpdate": true
    },
    "gamemodes": {
        "elimination": {
            "enabledMaps": [
                "ayutthaya",
                "lijiangControlCenterLny",
                "lijiangGardenLny",
                "lijiangNightMarketLny",
                "necropolis",
                "nepalSanctum",
                "nepalShrine",
                "nepalVillage",
                "oasisCityCenter",
                "oasisGardens",
                "oasisUniversity"
            ]
        },
        "general": {
            "enableTiebreaker": false,
            "drawTime": 200,
            "enableEnemyHealthBars": false,
            "gamemodeStartTrigger": "manual",
            "heroLimit": "2PerTeam",
            "heroPoolSize": "teamSize",
            "respawnTime%": 0,
            "wallhackEnabledTime": 170,
            "scoreToWin": 4,
            "spawnHealthPacks": "disabled"
        }
    },
    "heroes": {
        "team1": {
            "baptiste": {
                "damageDealt%": 10,
                "damageReceived%": 500,
                "healingDealt%": 10,
                "healingReceived%": 10,
                "health%": 333,
                "ability2Cooldown%": 40,
                "jumpVerticalSpeed%": 230,
                "movementGravity%": 135,
                "movementSpeed%": 230,
                "enableInfiniteAmmo": true,
                "projectileSpeed%": 500,
                "ability1Cooldown%": 7,
                "combatUltGen%": 500,
                "passiveUltGen%": 500,
                "ultGen%": 500
            },
            "bastion": {
                "ultKb%": 70,
                "damageDealt%": 10,
                "damageReceived%": 500,
                "healingDealt%": 140,
                "healingReceived%": 10,
                "health%": 222,
                "jumpVerticalSpeed%": 220,
                "movementGravity%": 135,
                "movementSpeed%": 230,
                "enableInfiniteAmmo": true,
                "enableSpawningWithUlt": true,
                "ultDuration%": 187,
                "combatUltGen%": 500,
                "passiveUltGen%": 500,
                "ultGen%": 500
            },
            "brigitte": {
                "secondaryFireCooldown%": 55,
                "secondaryFireRechargeRate%": 280,
                "damageDealt%": 10,
                "damageReceived%": 444,
                "healingDealt%": 10,
                "healingReceived%": 10,
                "health%": 333,
                "jumpVerticalSpeed%": 230,
                "movementGravity%": 135,
                "movementSpeed%": 230,
                "ability2Cooldown%": 0,
                "enableAbility3": false,
                "shieldBashKb%": 25,
                "combatUltGen%": 280,
                "passiveUltGen%": 280,
                "ultGen%": 280,
                "ability1Cooldown%": 255,
                "ability1Kb%": 155
            },
            "reinhardt": {
                "secondaryFireCooldown%": 500,
                "ability1Cooldown%": 0,
                "ability1Kb%": 0,
                "damageDealt%": 10,
                "damageReceived%": 500,
                "ability2Cooldown%": 55,
                "healingReceived%": 10,
                "health%": 121,
                "jumpVerticalSpeed%": 235,
                "movementGravity%": 135,
                "movementSpeed%": 230,
                "projectileSpeed%": 500,
                "passiveUltGen%": 280,
                "ultGen%": 280
            },
            "roadhog": {
                "ability1Cooldown%": 200,
                "damageDealt%": 10,
                "damageReceived%": 300,
                "healingDealt%": 10,
                "healingReceived%": 10,
                "health%": 111,
                "jumpVerticalSpeed%": 210,
                "movementGravity%": 135,
                "movementSpeed%": 230,
                "enableInfiniteAmmo": true,
                "enableAbility2": false,
                "enableUlt": false
            },
            "sigma": {
                "ability2Cooldown%": 55,
                "damageDealt%": 200,
                "damageReceived%": 500,
                "enableSecondaryFire": false,
                "health%": 166,
                "jumpVerticalSpeed%": 235,
                "ability1Cooldown%": 55,
                "movementGravity%": 135,
                "movementSpeed%": 230,
                "projectileSpeed%": 500,
                "combatUltGen%": 287,
                "passiveUltGen%": 287,
                "ultGen%": 287
            },
            "soldier": {
                "ability2Cooldown%": 0,
                "damageDealt%": 10,
                "damageReceived%": 500,
                "healingDealt%": 10,
                "healingReceived%": 10,
                "health%": 333,
                "secondaryFireCooldown%": 70,
                "secondaryFireKb%": 155,
                "jumpVerticalSpeed%": 230,
                "movementGravity%": 135,
                "movementSpeed%": 230,
                "enableInfiniteAmmo": true,
                "projectileSpeed%": 500,
                "enableAbility1": false,
                "ultDuration%": 201,
                "combatUltGen%": 407,
                "passiveUltGen%": 407,
                "ultGen%": 407
            },
            "zarya": {
                "ammoClipSize%": 50,
                "damageDealt%": 10,
                "damageReceived%": 500,
                "healingReceived%": 10,
                "health%": 166,
                "jumpVerticalSpeed%": 220,
                "movementGravity%": 135,
                "movementSpeed%": 230,
                "secondaryFireKb%": 140,
                "ability2Cooldown%": 62,
                "projectileSpeed%": 500,
                "combatUltGen%": 328,
                "passiveUltGen%": 355,
                "ultGen%": 280
            }
        },
        "team2": {
            "baptiste": {
                "damageDealt%": 10,
                "damageReceived%": 500,
                "healingDealt%": 10,
                "healingReceived%": 10,
                "ability2Cooldown%": 40,
                "jumpVerticalSpeed%": 230,
                "movementGravity%": 135,
                "enableInfiniteAmmo": true,
                "ability1Cooldown%": 7,
                "combatUltGen%": 500,
                "passiveUltGen%": 500,
                "ultGen%": 500
            },
            "bastion": {
                "ultKb%": 70,
                "damageDealt%": 10,
                "healingReceived%": 10,
                "health%": 222,
                "jumpVerticalSpeed%": 220,
                "enableSpawningWithUlt": true,
                "ultDuration%": 187,
                "combatUltGen%": 500,
                "passiveUltGen%": 500,
                "ultGen%": 500
            },
            "brigitte": {
                "secondaryFireCooldown%": 55,
                "secondaryFireRechargeRate%": 280,
                "damageDealt%": 10,
                "damageReceived%": 444,
                "healingDealt%": 10,
                "healingReceived%": 10,
                "jumpVerticalSpeed%": 230,
                "ability2Cooldown%": 0,
                "enableAbility3": false,
                "shieldBashKb%": 25,
                "ability1Cooldown%": 255,
                "ability1Kb%": 155
            },
            "reinhardt": {
                "secondaryFireCooldown%": 500,
                "secondaryFireRechargeRate%": 500,
                "ability1Cooldown%": 0,
                "ability1Kb%": 300,
                "damageDealt%": 181,
                "damageReceived%": 14,
                "ability2Cooldown%": 83,
                "healingReceived%": 10,
                "health%": 500,
                "jumpVerticalSpeed%": 230,
                "movementGravity%": 135,
                "movementSpeed%": 210,
                "projectileSpeed%": 207,
                "enableUlt": false
            },
            "roadhog": {
                "ability1Cooldown%": 62,
                "damageDealt%": 240,
                "damageReceived%": 10,
                "healingDealt%": 10,
                "healingReceived%": 500,
                "health%": 500,
                "jumpVerticalSpeed%": 230,
                "movementGravity%": 135,
                "movementSpeed%": 210,
                "enableInfiniteAmmo": true,
                "enablePrimaryFire": false,
                "projectileSpeed%": 0,
                "enableSecondaryFire": false,
                "ability2Cooldown%": 62,
                "enableUlt": false
            },
            "sigma": {
                "ability2Cooldown%": 55,
                "damageDealt%": 200,
                "damageReceived%": 14,
                "enableSecondaryFire": false,
                "healingReceived%": 10,
                "health%": 500,
                "jumpVerticalSpeed%": 200,
                "ability1Cooldown%": 28,
                "movementGravity%": 135,
                "movementSpeed%": 210,
                "enablePrimaryFire": false,
                "projectileSpeed%": 133,
                "combatUltGen%": 75,
                "passiveUltGen%": 0
            },
            "soldier": {
                "ability2Cooldown%": 0,
                "jumpVerticalSpeed%": 230,
                "ultDuration%": 201,
                "combatUltGen%": 407,
                "passiveUltGen%": 407,
                "ultGen%": 407
            },
            "zarya": {
                "ammoClipSize%": 25,
                "damageDealt%": 10,
                "damageReceived%": 500,
                "healingReceived%": 10,
                "health%": 166,
                "jumpVerticalSpeed%": 215,
                "movementGravity%": 135,
                "movementSpeed%": 230,
                "secondaryFireKb%": 130,
                "ability2Cooldown%": 62,
                "projectileSpeed%": 500,
                "combatUltGen%": 328,
                "passiveUltGen%": 355,
                "ultGen%": 280
            },
            "enabledHeroes": [
                "reinhardt",
                "roadhog",
                "sigma"
            ]
        },
        "allTeams": {
            "ana": {
                "ability2Cooldown%": 55,
                "damageDealt%": 10,
                "damageReceived%": 500,
                "healingDealt%": 10,
                "healingReceived%": 10,
                "health%": 333,
                "jumpVerticalSpeed%": 200,
                "movementGravity%": 135,
                "movementSpeed%": 230,
                "enableInfiniteAmmo": true,
                "projectileSpeed%": 150,
                "ability1Cooldown%": 120,
                "combatUltGen%": 55,
                "passiveUltGen%": 500,
                "ultGen%": 500
            },
            "ashe": {
                "ability1EnemyKb%": 155,
                "ability1SelfKb%": 155,
                "damageDealt%": 10,
                "damageReceived%": 500,
                "ability2Cooldown%": 28,
                "ability2FuseTime%": 55,
                "healingReceived%": 10,
                "health%": 333,
                "jumpVerticalSpeed%": 240,
                "movementGravity%": 135,
                "movementSpeed%": 230,
                "enableInfiniteAmmo": true,
                "ultDuration%": 280,
                "combatUltGen%": 500,
                "passiveUltGen%": 500,
                "ultGen%": 500
            },
            "dva": {
                "damageDealt%": 10,
                "damageReceived%": 500,
                "healingReceived%": 10,
                "health%": 444,
                "jumpVerticalSpeed%": 287,
                "movementGravity%": 135,
                "movementSpeed%": 230,
                "projectileSpeed%": 500,
                "spawnWithoutMech": true,
                "enableUlt": false
            },
            "doomfist": {
                "damageDealt%": 10,
                "damageReceived%": 500,
                "healingReceived%": 10,
                "health%": 266,
                "jumpVerticalSpeed%": 230,
                "ultKb%": 155,
                "movementGravity%": 130,
                "movementSpeed%": 230,
                "enableInfiniteAmmo": true,
                "projectileSpeed%": 500,
                "ability1Cooldown%": 66,
                "ability1Kb%": 194,
                "enableSecondaryFire": false,
                "secondaryFireKb%": 116,
                "ability2Cooldown%": 167,
                "enableUlt": false,
                "ultDuration%": 55
            },
            "echo": {
                "damageDealt%": 10,
                "damageReceived%": 500,
                "ability1Cooldown%": 167,
                "enableAbility2": false,
                "enablePassive": false,
                "healingReceived%": 10,
                "health%": 333,
                "jumpVerticalSpeed%": 233,
                "movementGravity%": 130,
                "movementSpeed%": 230,
                "enablePrimaryFire": false,
                "projectileSpeed%": 500,
                "combatUltGen%": 355,
                "passiveUltGen%": 355,
                "ultGen%": 355
            },
            "genji": {
                "damageDealt%": 10,
                "damageReceived%": 500,
                "ability2Cooldown%": 87,
                "healingReceived%": 10,
                "health%": 333,
                "jumpVerticalSpeed%": 135,
                "movementGravity%": 135,
                "movementSpeed%": 210,
                "enableInfiniteAmmo": true,
                "projectileSpeed%": 500,
                "ability1Cooldown%": 188,
                "ultDuration%": 28,
                "combatUltGen%": 255,
                "passiveUltGen%": 328,
                "ultGen%": 255
            },
            "hanzo": {
                "damageDealt%": 10,
                "damageReceived%": 500,
                "healingReceived%": 10,
                "health%": 333,
                "jumpVerticalSpeed%": 240,
                "ability3Cooldown%": 140,
                "ability3Distance%": 194,
                "movementGravity%": 135,
                "movementSpeed%": 230,
                "projectileSpeed%": 500,
                "ability1Cooldown%": 28,
                "enableSpawningWithUlt": true,
                "ability2Cooldown%": 55,
                "ability2Quantity%": 4,
                "combatUltGen%": 328,
                "passiveUltGen%": 355,
                "ultGen%": 355
            },
            "junkrat": {
                "ability1Cooldown%": 120,
                "ability1Kb%": 50,
                "damageDealt%": 10,
                "damageReceived%": 500,
                "primaryFireKb%": 400,
                "healingReceived%": 10,
                "health%": 333,
                "enableInfiniteUlt": true,
                "jumpVerticalSpeed%": 210,
                "movementGravity%": 135,
                "movementSpeed%": 230,
                "enableInfiniteAmmo": true,
                "projectileSpeed%": 500,
                "ability2Cooldown%": 70,
                "ultDuration%": 200,
                "combatUltGen%": 280,
                "passiveUltGen%": 280,
                "ultGen%": 280
            },
            "lucio": {
                "enableAbility2": false,
                "damageDealt%": 10,
                "damageReceived%": 500,
                "healingDealt%": 10,
                "healingReceived%": 10,
                "health%": 333,
                "jumpVerticalSpeed%": 230,
                "movementGravity%": 135,
                "movementSpeed%": 230,
                "enableInfiniteAmmo": true,
                "projectileSpeed%": 500,
                "secondaryFireCooldown%": 125,
                "secondaryFireKb%": 128,
                "combatUltGen%": 399,
                "passiveUltGen%": 399,
                "ultGen%": 399
            },
            "mccree": {
                "ability1Cooldown%": 250,
                "damageDealt%": 10,
                "damageReceived%": 500,
                "healingReceived%": 10,
                "health%": 296,
                "jumpVerticalSpeed%": 230,
                "movementGravity%": 135,
                "movementSpeed%": 230,
                "enableInfiniteAmmo": true,
                "projectileSpeed%": 500,
                "combatUltGen%": 355,
                "passiveUltGen%": 355,
                "ultGen%": 355
            },
            "mei": {
                "ammoClipSize%": 55,
                "ultFreezeRate%": 50,
                "ability1Cooldown%": 125,
                "damageDealt%": 10,
                "damageReceived%": 500,
                "healingDealt%": 10,
                "healingReceived%": 10,
                "health%": 266,
                "ability2Cooldown%": 125,
                "jumpVerticalSpeed%": 235,
                "movementGravity%": 135,
                "movementSpeed%": 230,
                "projectileSpeed%": 500,
                "enableUlt": false,
                "primaryFireFreezeRate%": 55
            },
            "mercy": {
                "damageDealt%": 10,
                "damageReceived%": 500,
                "ability1Cooldown%": 200,
                "healingDealt%": 55,
                "healingReceived%": 10,
                "health%": 333,
                "jumpVerticalSpeed%": 235,
                "movementGravity%": 135,
                "movementSpeed%": 230,
                "enableInfiniteAmmo": true,
                "projectileSpeed%": 500,
                "ability2Cooldown%": 500,
                "enableSpawningWithUlt": true,
                "enableUlt": false
            },
            "moira": {
                "primaryFireMaximumTime%": 500,
                "primaryFireRechargeRate%": 500,
                "ability2Cooldown%": 55,
                "ability2MaxDamage%": 10,
                "ability2MaxHealing%": 10,
                "damageDealt%": 10,
                "damageReceived%": 500,
                "ability1Cooldown%": 200,
                "healingDealt%": 10,
                "healingReceived%": 10,
                "health%": 333,
                "jumpVerticalSpeed%": 235,
                "movementGravity%": 135,
                "movementSpeed%": 230,
                "projectileSpeed%": 55,
                "enableSecondaryFire": false,
                "enableUlt": false
            },
            "orisa": {
                "damageDealt%": 10,
                "damageReceived%": 280,
                "ability1Cooldown%": 55,
                "secondaryFireCooldown%": 62,
                "healingReceived%": 10,
                "health%": 148,
                "jumpVerticalSpeed%": 280,
                "movementGravity%": 145,
                "movementSpeed%": 230,
                "projectileSpeed%": 70,
                "ability2Cooldown%": 50,
                "enableUlt": false
            },
            "pharah": {
                "ammoClipSize%": 55,
                "ability2Cooldown%": 111,
                "ability2Kb%": 155,
                "damageDealt%": 10,
                "damageReceived%": 500,
                "healingReceived%": 10,
                "health%": 333,
                "enableSecondaryFire": false,
                "ability1Acceleration%": 70,
                "ability1Cooldown%": 55,
                "jumpVerticalSpeed%": 210,
                "movementGravity%": 135,
                "movementSpeed%": 230,
                "projectileSpeed%": 128,
                "primaryFireKb%": 55,
                "enableUlt": false
            },
            "reaper": {
                "damageDealt%": 10,
                "damageReceived%": 500,
                "healingDealt%": 10,
                "healingReceived%": 10,
                "health%": 266,
                "jumpVerticalSpeed%": 230,
                "movementGravity%": 135,
                "movementSpeed%": 230,
                "combatUltGen%": 500,
                "passiveUltGen%": 500,
                "ultGen%": 500,
                "ability1Cooldown%": 125
            },
            "sombra": {
                "damageDealt%": 10,
                "damageReceived%": 500,
                "secondaryFireCooldown%": 155,
                "healingReceived%": 10,
                "health%": 333,
                "jumpVerticalSpeed%": 235,
                "movementGravity%": 135,
                "movementSpeed%": 230,
                "enableInfiniteAmmo": true,
                "projectileSpeed%": 107,
                "enableAbility1": false,
                "ability2Cooldown%": 155,
                "combatUltGen%": 500,
                "passiveUltGen%": 355,
                "ultGen%": 355
            },
            "symmetra": {
                "damageDealt%": 10,
                "damageReceived%": 500,
                "healingReceived%": 10,
                "health%": 296,
                "jumpVerticalSpeed%": 236,
                "movementGravity%": 135,
                "movementSpeed%": 230,
                "enableInfiniteAmmo": true,
                "projectileSpeed%": 500,
                "ability1Cooldown%": 14,
                "ability2Cooldown%": 40,
                "enableUlt": false
            },
            "torbjorn": {
                "damageDealt%": 10,
                "damageReceived%": 500,
                "ability1Cooldown%": 70,
                "healingReceived%": 10,
                "health%": 266,
                "enableInfiniteUlt": true,
                "jumpVerticalSpeed%": 210,
                "movementGravity%": 135,
                "movementSpeed%": 230,
                "enableInfiniteAmmo": true,
                "ability2Cooldown%": 94,
                "ability2Duration%": 70,
                "ultDuration%": 280,
                "combatUltGen%": 500,
                "passiveUltGen%": 500,
                "ultGen%": 500,
                "weaponsEnabled": "hammer"
            },
            "tracer": {
                "enableAbility1": false,
                "damageDealt%": 10,
                "damageReceived%": 500,
                "healingReceived%": 10,
                "health%": 444,
                "jumpVerticalSpeed%": 230,
                "movementGravity%": 135,
                "movementSpeed%": 210,
                "enableInfiniteAmmo": true,
                "projectileSpeed%": 500,
                "ability2Cooldown%": 125,
                "combatUltGen%": 325,
                "passiveUltGen%": 355,
                "ultGen%": 355
            },
            "widowmaker": {
                "damageDealt%": 10,
                "damageReceived%": 500,
                "ability1Cooldown%": 70,
                "healingReceived%": 10,
                "health%": 333,
                "jumpVerticalSpeed%": 230,
                "movementGravity%": 135,
                "movementSpeed%": 230,
                "enableInfiniteAmmo": true,
                "projectileSpeed%": 500,
                "ultDuration%": 155,
                "combatUltGen%": 200,
                "passiveUltGen%": 255,
                "ultGen%": 200,
                "ability2Cooldown%": 33
            },
            "winston": {
                "damageDealt%": 10,
                "damageReceived%": 500,
                "healingReceived%": 10,
                "health%": 133,
                "ability1Acceleration%": 128,
                "ability1Cooldown%": 155,
                "ability1Kb%": 400,
                "jumpVerticalSpeed%": 210,
                "movementGravity%": 135,
                "movementSpeed%": 230,
                "enableInfiniteAmmo": true,
                "ultKb%": 25,
                "enableUlt": false
            },
            "hammond": {
                "damageDealt%": 10,
                "damageReceived%": 500,
                "enableSecondaryFire": false,
                "healingReceived%": 10,
                "health%": 111,
                "enableInfiniteUlt": true,
                "jumpVerticalSpeed%": 245,
                "ultKb%": 200,
                "movementGravity%": 135,
                "movementSpeed%": 140,
                "enableInfiniteAmmo": true,
                "projectileSpeed%": 28,
                "enableRollOnly": true,
                "enableSpawningWithUlt": true,
                "ultDuration%": 128,
                "combatUltGen%": 500,
                "passiveUltGen%": 500,
                "ultGen%": 500
            },
            "zenyatta": {
                "damageDealt%": 10,
                "damageReceived%": 500,
                "healingDealt%": 10,
                "healingReceived%": 10,
                "health%": 333,
                "jumpVerticalSpeed%": 235,
                "movementGravity%": 135,
                "movementSpeed%": 230,
                "enableInfiniteAmmo": true,
                "projectileSpeed%": 500,
                "combatUltGen%": 250,
                "passiveUltGen%": 250,
                "ultGen%": 250
            }
        }
    }
}

#Global variables

globalvar hider_win_time 0
globalvar solo_seeker_speed 1
globalvar doomfist_max_speed 2
globalvar reveal_time 3
globalvar speed_rule_lock 4
globalvar shield_location 5
globalvar toxicjail_tab 6
globalvar xPositive2 7
globalvar xNegative2 8
globalvar yPositive2 9
globalvar yNegative2 10
globalvar zPositive2 11
globalvar zNegative2 12
globalvar xPositive1 13
globalvar xNegative1 14
globalvar yPositive1 15
globalvar yNegative1 16
globalvar yBlockFreeze_1 17
globalvar yBlockFreeze_2 18
globalvar zBlockFreeze 19
globalvar zPositive1 20
globalvar zNegative1 21
globalvar varPosSpawnAreaNX 22
globalvar varPosSpawnAreaPX 23
globalvar varPosSpawnAreaNZ 24
globalvar varPosSpawnAreaPZ 25
globalvar varAnglePosXp 26
globalvar varAnglePosZp 27
globalvar varAnglePosXn 28
globalvar varAnglePosZn 29
globalvar varWallDetection 30
globalvar varDeploy_center 31
globalvar varSigmaAntiKamikazeN_Y 32
globalvar varSigmaAntiKamikazePos_Y 33


#Player variables

playervar tbag_flag 0
playervar rng_punch_message 1
playervar player_camera 2
playervar winstonBubbleTAB 3
playervar kill_hider_loop 4
playervar player_effects 5
playervar brigvar1 6
playervar brigvar2 7
playervar brigvar3 8
playervar genji_pos_sphere 9
playervar Rein_Msg 10
playervar genji_allplayer_sphere 11
playervar Hanzo_smiley 12
playervar Hammond_varPgrap 13
playervar reaper_ultdmg_icon 14
playervar Moira_icon_purplesphere 15
playervar var_player_dead 16
playervar vartext_player_dead 17
playervar genji_player_sphere 18
playervar genji_text_ZW 19
playervar genji_tab_sphere 20
playervar nani_text_genji_ZW 21
playervar Rez_actif 22
playervar dva_res_text_int 23
playervar torb_smiley 24
playervar EchoSlowBomb 25
playervar varOrisaKnight 26
playervar ToxicPlayerIcon 27
playervar varOrisaMount 28
playervar iconCampingSpawn 29
playervar varRein1 30
playervar varTxtH_S 31
playervar varTxt_id 32
playervar varSigmaScreamer 33
playervar varSigmaScreamerMsg 34
playervar varKickMsgZen 35
playervar varWallDetection 36
playervar varVisualize_front 37
playervar varVisualize_side 38
playervar varDeploy_pos 39
playervar varDuration 40
playervar varWelcomeTextInstruction 41
playervar varButtonWTI 42
playervar Bay 43
playervar Bay_Button 44
playervar Bay_Text 45
playervar varVisualFrontBapt 46
playervar varVisualSideBapt 47
playervar varVisualWallEffectBapt 48
playervar varWidowHS 49
playervar varWidowHSmsg 50
playervar varTxtUpdate 51
playervar varButtonUpdate 52
playervar Phil 53
playervar Phil_Button 54
playervar Phil_Text 55


#Subroutine names

subroutine customStringPicker 0
subroutine arenaSetupEdge 1
subroutine arenaSetupFace 2
subroutine mapSetupLijangMarket 3
subroutine mapSetupOasisCity 4
subroutine mapSetupExpan 5
subroutine mapSetupOasisGarden 6
subroutine mapSetupLijangMarket2 7
subroutine arenaSetupEdge2 8
subroutine arenaSetupFace2 9
subroutine campingSpawn 10
subroutine subAreaSpawnTeam 11
subroutine mapSetupAyutthaya 12
subroutine arenaSetup 13
subroutine mapCheck 14
subroutine toxic_freeze 15
subroutine mapSetupCastillo 16
subroutine mapSetupEcolab 17
subroutine mapSetupBlackForest 18
subroutine mapSetupIliosLightHouse 19
subroutine mapSetupIliosWell 20
subroutine mapSetupIliosRuins 21
subroutine mapSetupIsland 22
subroutine mapSetupLijiangControl 23
subroutine mapSetupNecropolis 24
subroutine mapSetupNepalShrine 25
subroutine mapSetupNepalSanctuary 26
subroutine mapSetupNepalVillage 27
subroutine mapSetupLijiangGarden 28
subroutine mapSetupOasisUniversity 29
subroutine mapSetupWorkshopRoom 30
subroutine zenKickRNGMSG 31
subroutine subRemoveVisualFrontBapt 34
subroutine subRemoveVisualSideBapt 35
subroutine subRemoveEveryEffectBapt 36
subroutine subRemoveVisualWallEffectBapt 37


rule "───────────────┤RUN\\HIDE AND SEEK - VERSION 2.13.0 ♣ - 214Z1 - Philmer#2681├───────────────────────────":
    @Event eachPlayer
    @Hero all
    @Condition eventPlayer.hasSpawned() == true
    
    hudSubtext(eventPlayer, "[R\\H&S - VERSION 2.13.0 ♣]", HudPosition.RIGHT, 0, Color.YELLOW, HudReeval.VISIBILITY_AND_STRING, SpecVisibility.DEFAULT)
    hudSubheader(eventPlayer, "(interact + reload)\r\n ", HudPosition.RIGHT, 1, Color.GREEN, HudReeval.VISIBILITY_AND_STRING, SpecVisibility.DEFAULT)
    hudSubtext(eventPlayer, "{0} : Reload + Melee".format(iconString(Icon.QUESTION_MARK)), HudPosition.LEFT, 0, Color.SKY_BLUE, HudReeval.VISIBILITY_AND_STRING, SpecVisibility.DEFAULT)
    hudSubtext(eventPlayer, "{1} Time Remaining: {0}".format(getMatchTime(), iconString(Icon.EYE)), HudPosition.LEFT, 1, Color.PURPLE, HudReeval.VISIBILITY_AND_STRING, SpecVisibility.DEFAULT)
    hudSubtext(eventPlayer, "{1} Speed: {0}".format(eventPlayer.getHorizontalSpeed(), iconString(Icon.BOLT)), HudPosition.LEFT, 3, Color.ORANGE, HudReeval.VISIBILITY_AND_STRING, SpecVisibility.DEFAULT)


rule "####### <Remove - UPDATE TEXT> #######":
    @Event eachPlayer
    @Hero all
    #@Condition (eventPlayer.isHoldingButton(Button.RELOAD) and eventPlayer.isHoldingButton(Button.CROUCH) and eventPlayer.isHoldingButton(Button.MELEE)) == true
    @Condition (eventPlayer.isHoldingButton(Button.INTERACT) and eventPlayer.isHoldingButton(Button.RELOAD)) == true
    @Condition eventPlayer.varButtonUpdate == true
    
    wait(0.094, Wait.ABORT_WHEN_FALSE)
    destroyHudText(eventPlayer.varTxtUpdate[0])
    destroyHudText(eventPlayer.varTxtUpdate[1])
    destroyHudText(eventPlayer.varTxtUpdate[2])
    destroyHudText(eventPlayer.varTxtUpdate[3])
    #destroyHudText(eventPlayer.varTxtUpdate[4])
    eventPlayer.varButtonUpdate = false


rule "####### <UPDATE TEXT> #######":
    @Event eachPlayer
    @Hero all
    #@Condition (eventPlayer.isHoldingButton(Button.RELOAD) and eventPlayer.isHoldingButton(Button.CROUCH) and eventPlayer.isHoldingButton(Button.MELEE)) == true
    @Condition (eventPlayer.isHoldingButton(Button.INTERACT) and eventPlayer.isHoldingButton(Button.RELOAD)) == true
    @Condition eventPlayer.varButtonUpdate == false
    
    wait(0.094, Wait.ABORT_WHEN_FALSE)
    hudHeader(eventPlayer, " {0}      GENERAL UPDATE       {0} ".format(iconString(Icon.BOLT)), HudPosition.RIGHT, 40, Color.BLUE, HudReeval.VISIBILITY_AND_STRING, SpecVisibility.DEFAULT)
    eventPlayer.varTxtUpdate[0] = getLastCreatedText()
    hudSubtext(eventPlayer, " \r\n   - Mercy can't rez if the seeker is alone        \r\n   - Doomfist lose is ultimate\r\n   - Doomfist is invincible with his E\r\n", HudPosition.RIGHT, 41, Color.WHITE, HudReeval.VISIBILITY_AND_STRING, SpecVisibility.DEFAULT)
    eventPlayer.varTxtUpdate[1] = getLastCreatedText()
    hudHeader(eventPlayer, " {0}            BUG FIXES               {0} ".format(iconString(Icon.PLUS)), HudPosition.RIGHT, 42, Color.AQUA, HudReeval.VISIBILITY_AND_STRING, SpecVisibility.DEFAULT)
    eventPlayer.varTxtUpdate[2] = getLastCreatedText()
    hudSubtext(eventPlayer, " \r\n   - Setting primary/secondary fire                  \r\n", HudPosition.RIGHT, 43, Color.WHITE, HudReeval.VISIBILITY_AND_STRING, SpecVisibility.DEFAULT)
    eventPlayer.varTxtUpdate[3] = getLastCreatedText()
    #hudHeader(eventPlayer, "                                                           ", HudPosition.RIGHT, 44, Color.BLUE, HudReeval.VISIBILITY_AND_STRING, SpecVisibility.DEFAULT)
    #eventPlayer.varTxtUpdate[4] = getLastCreatedText()
    eventPlayer.varButtonUpdate = true


rule "####### <Remove - Welcome Instruction Message> #######":
    @Event eachPlayer
    @Hero all
    @Condition (eventPlayer.isHoldingButton(Button.PRIMARY_FIRE) and eventPlayer.isHoldingButton(Button.RELOAD)) == true
    @Condition eventPlayer.varButtonWTI == true
    
    wait(0.094, Wait.ABORT_WHEN_FALSE)
    destroyHudText(eventPlayer.varWelcomeTextInstruction[0])
    destroyHudText(eventPlayer.varWelcomeTextInstruction[1])
    destroyHudText(eventPlayer.varWelcomeTextInstruction[2])
    destroyHudText(eventPlayer.varWelcomeTextInstruction[3])
    destroyHudText(eventPlayer.varWelcomeTextInstruction[4])
    destroyHudText(eventPlayer.varWelcomeTextInstruction[5])
    destroyHudText(eventPlayer.varWelcomeTextInstruction[6])
    destroyHudText(eventPlayer.varWelcomeTextInstruction[21])
    destroyHudText(eventPlayer.varWelcomeTextInstruction[22])
    eventPlayer.varButtonWTI = false


rule "####### <Welcome Instruction Message> #######":
    @Event eachPlayer
    @Hero all
    @Condition eventPlayer.hasSpawned() == true
    @Condition getMatchRound() <= 1
    #@Condition (eventPlayer.isHoldingButton(Button.PRIMARY_FIRE) and eventPlayer.isHoldingButton(Button.RELOAD)) == true
    #@Condition eventPlayer.varButtonWTI == false
    
    wait(0.094, Wait.ABORT_WHEN_FALSE)
    hudHeader(eventPlayer, " ♣                 [RUN\\HIDE & SEEK]                 ♣ ", HudPosition.RIGHT, 2, Color.YELLOW, HudReeval.VISIBILITY_AND_STRING, SpecVisibility.DEFAULT)
    eventPlayer.varWelcomeTextInstruction[0] = getLastCreatedText()
    hudSubtext(eventPlayer, " \r\nWelcome {0}, have fun {1}                                    \r\n ".format(eventPlayer, iconString(Icon.HAPPY)), HudPosition.RIGHT, 3, Color.BLUE, HudReeval.VISIBILITY_AND_STRING, SpecVisibility.DEFAULT)
    eventPlayer.varWelcomeTextInstruction[1] = getLastCreatedText()
    hudSubtext(eventPlayer, " \r\n- {1} To know what do your character press RELOAD + MELEE            ".format(null, iconString(Icon.QUESTION_MARK)), HudPosition.RIGHT, 4, Color.WHITE, HudReeval.VISIBILITY_AND_STRING, SpecVisibility.DEFAULT)
    eventPlayer.varWelcomeTextInstruction[2] = getLastCreatedText()
    hudSubtext(eventPlayer, "- {1} JOIN MVC !                                                                                                    ".format(null, iconString(Icon.HEART)), HudPosition.RIGHT, 5, Color.WHITE, HudReeval.VISIBILITY_AND_STRING, SpecVisibility.DEFAULT)
    eventPlayer.varWelcomeTextInstruction[3] = getLastCreatedText()
    #hudSubtext(eventPlayer, "- {1} Don't use unfair spots.                                                                            ".format(null, iconString(Icon.CROSS)), HudPosition.RIGHT, 6, Color.WHITE, HudReeval.VISIBILITY_AND_STRING, SpecVisibility.DEFAULT)
    hudSubtext(eventPlayer, "- {1} Don't use unfair spots. Don't exploit and play fair.                     ".format(null, iconString(Icon.CROSS)), HudPosition.RIGHT, 6, Color.WHITE, HudReeval.VISIBILITY_AND_STRING, SpecVisibility.DEFAULT)
    eventPlayer.varWelcomeTextInstruction[4] = getLastCreatedText()
    hudSubtext(eventPlayer, "- {1} For the [3D]view to [FPS]view it's crouch+interact (CTRL+F)         \r\n ".format(eventPlayer, iconString(Icon.EYE)), HudPosition.RIGHT, 7, Color.WHITE, HudReeval.VISIBILITY_AND_STRING, SpecVisibility.DEFAULT)
    eventPlayer.varWelcomeTextInstruction[5] = getLastCreatedText()
    hudSubtext(eventPlayer, " \r\n{0} Friends have a priority {0}                                     \r\n ".format(iconString(Icon.WARNING)), HudPosition.RIGHT, 8, Color.RED, HudReeval.VISIBILITY_AND_STRING, SpecVisibility.DEFAULT)
    eventPlayer.varWelcomeTextInstruction[6] = getLastCreatedText()
    hudHeader(eventPlayer, " ♣  {0}  CODE : 214Z1 | {1} Philmer#2681  ♣ ".format(iconString(Icon.WARNING), iconString(Icon.QUESTION_MARK)), HudPosition.RIGHT, 21, Color.YELLOW, HudReeval.VISIBILITY_AND_STRING, SpecVisibility.DEFAULT)
    eventPlayer.varWelcomeTextInstruction[21] = getLastCreatedText()
    hudSubtext(eventPlayer, "(Primary fire + Reload)                                             ", HudPosition.RIGHT, 22, Color.WHITE, HudReeval.VISIBILITY_AND_STRING, SpecVisibility.DEFAULT)
    eventPlayer.varWelcomeTextInstruction[22] = getLastCreatedText()
    eventPlayer.varButtonWTI = true


/*
rule "────────────────────────────┤INTERFACE ├─────────────────────────────────":
*/

rule "#Remove interface instruction":
    @Event eachPlayer
    @Hero all
    #@Condition (eventPlayer.isHoldingButton(Button.RELOAD) and eventPlayer.isHoldingButton(Button.CROUCH) and eventPlayer.isHoldingButton(Button.MELEE)) == true
    @Condition (eventPlayer.isHoldingButton(Button.MELEE) and eventPlayer.isHoldingButton(Button.RELOAD)) == true
    @Condition eventPlayer.varTxtH_S == true
    
    wait(0.094, Wait.ABORT_WHEN_FALSE)
    destroyHudText(eventPlayer.varTxt_id)
    eventPlayer.varTxtH_S = false


rule "#TRACER":
    @Event eachPlayer
    @Team 1
    @Hero tracer
    #@Condition (eventPlayer.isHoldingButton(Button.RELOAD) and eventPlayer.isHoldingButton(Button.CROUCH) and eventPlayer.isHoldingButton(Button.MELEE)) == true
    #@Condition (eventPlayer.isHoldingButton(Button.MELEE) and eventPlayer.isHoldingButton(Button.RELOAD)) == true
    @Condition (eventPlayer.hasSpawned() and getMatchTime() == 0 or eventPlayer.isHoldingButton(Button.MELEE) and eventPlayer.isHoldingButton(Button.RELOAD)) == true
    @Condition eventPlayer.varTxtH_S == false
    
    wait(0.094, Wait.ABORT_WHEN_FALSE)
    hudHeader(eventPlayer, "┌\r\n\r\n  {0} : \"punch/melee\" a seeker when you have your ultimate to knock down him  \r\n\r\n└".format(abilityIconString(Hero.TRACER, Button.ULTIMATE)), HudPosition.TOP, 3, Color.GREEN, HudReeval.VISIBILITY_AND_STRING, SpecVisibility.DEFAULT)
    eventPlayer.varTxt_id = getLastCreatedText()
    eventPlayer.varTxtH_S = true


rule "#GENJI":
    @Event eachPlayer
    @Team 1
    @Hero genji
    #@Condition (eventPlayer.isHoldingButton(Button.RELOAD) and eventPlayer.isHoldingButton(Button.CROUCH) and eventPlayer.isHoldingButton(Button.MELEE)) == true
    #@Condition (eventPlayer.isHoldingButton(Button.MELEE) and eventPlayer.isHoldingButton(Button.RELOAD)) == true
    @Condition (eventPlayer.hasSpawned() and getMatchTime() == 0 or eventPlayer.isHoldingButton(Button.MELEE) and eventPlayer.isHoldingButton(Button.RELOAD)) == true
    @Condition eventPlayer.varTxtH_S == false
    
    wait(0.094, Wait.ABORT_WHEN_FALSE)
    hudHeader(eventPlayer, "┌\r\n\r\n  ZA WARUDO !\r\n  {0} : BE CLOSE TO A SEEKER TO STOP HIM AND SLOW HIS PROJECTILES  \r\n\r\n└".format(abilityIconString(Hero.GENJI, Button.ULTIMATE)), HudPosition.TOP, 3, Color.GREEN, HudReeval.VISIBILITY_AND_STRING, SpecVisibility.DEFAULT)
    eventPlayer.varTxt_id = getLastCreatedText()
    eventPlayer.varTxtH_S = true


rule "#HAMMOND":
    @Event eachPlayer
    @Team 1
    @Hero hammond
    #@Condition (eventPlayer.isHoldingButton(Button.RELOAD) and eventPlayer.isHoldingButton(Button.CROUCH) and eventPlayer.isHoldingButton(Button.MELEE)) == true
    #@Condition (eventPlayer.isHoldingButton(Button.MELEE) and eventPlayer.isHoldingButton(Button.RELOAD)) == true
    @Condition (eventPlayer.hasSpawned() and getMatchTime() == 0 or eventPlayer.isHoldingButton(Button.MELEE) and eventPlayer.isHoldingButton(Button.RELOAD)) == true
    @Condition eventPlayer.varTxtH_S == false
    
    wait(0.094, Wait.ABORT_WHEN_FALSE)
    hudHeader(eventPlayer, "┌\r\n\r\n  {0} : PILE DRIVE TO BE INVISIBLE/INVINCIBLE FOR 1.8s\r\n  {1} : USE YOUR E TO BE TELEPORTED TO THE HEAD OF A SEEKER  \r\n\r\n".format(abilityIconString(Hero.HAMMOND, Button.CROUCH), abilityIconString(Hero.HAMMOND, Button.ABILITY_2)), HudPosition.TOP, 3, Color.GREEN, HudReeval.VISIBILITY_AND_STRING, SpecVisibility.DEFAULT)
    eventPlayer.varTxt_id = getLastCreatedText()
    eventPlayer.varTxtH_S = true


rule "#D.VA":
    @Event eachPlayer
    @Team 1
    @Hero dva
    #@Condition (eventPlayer.isHoldingButton(Button.RELOAD) and eventPlayer.isHoldingButton(Button.CROUCH) and eventPlayer.isHoldingButton(Button.MELEE)) == true
    #@Condition (eventPlayer.isHoldingButton(Button.MELEE) and eventPlayer.isHoldingButton(Button.RELOAD)) == true
    @Condition (eventPlayer.hasSpawned() and getMatchTime() == 0 or eventPlayer.isHoldingButton(Button.MELEE) and eventPlayer.isHoldingButton(Button.RELOAD)) == true
    @Condition eventPlayer.varTxtH_S == false
    
    wait(0.094, Wait.ABORT_WHEN_FALSE)
    hudHeader(eventPlayer, "┌\r\n\r\n  {0} : EMOTE ON A \"SOUL\" TO RESURRECT HIM (YOU CAN'T IF SOLO SEEKER)  \r\n\r\n└".format(iconString(Icon.SKULL)), HudPosition.TOP, 3, Color.GREEN, HudReeval.VISIBILITY_AND_STRING, SpecVisibility.DEFAULT)
    eventPlayer.varTxt_id = getLastCreatedText()
    eventPlayer.varTxtH_S = true


rule "#ORISA":
    @Event eachPlayer
    @Team 1
    @Hero orisa
    #@Condition (eventPlayer.isHoldingButton(Button.RELOAD) and eventPlayer.isHoldingButton(Button.CROUCH) and eventPlayer.isHoldingButton(Button.MELEE)) == true
    #@Condition (eventPlayer.isHoldingButton(Button.MELEE) and eventPlayer.isHoldingButton(Button.RELOAD)) == true
    @Condition (eventPlayer.hasSpawned() and getMatchTime() == 0 or eventPlayer.isHoldingButton(Button.MELEE) and eventPlayer.isHoldingButton(Button.RELOAD)) == true
    @Condition eventPlayer.varTxtH_S == false
    
    wait(0.094, Wait.ABORT_WHEN_FALSE)
    hudHeader(eventPlayer, "┌\r\n\r\n  {0} : PEOPLE CAN MOUNT YOU SO ENJOY TO BE A HORSE {1}  \r\n\r\n└".format(heroIcon(Hero.ORISA), iconString(Icon.HEART)), HudPosition.TOP, 3, Color.GREEN, HudReeval.VISIBILITY_AND_STRING, SpecVisibility.DEFAULT)
    eventPlayer.varTxt_id = getLastCreatedText()
    eventPlayer.varTxtH_S = true


rule "#REIN TEAM 1":
    @Event eachPlayer
    @Team 1
    @Hero reinhardt
    #@Condition (eventPlayer.isHoldingButton(Button.RELOAD) and eventPlayer.isHoldingButton(Button.CROUCH) and eventPlayer.isHoldingButton(Button.MELEE)) == true
    #@Condition (eventPlayer.isHoldingButton(Button.MELEE) and eventPlayer.isHoldingButton(Button.RELOAD)) == true
    @Condition (eventPlayer.hasSpawned() and getMatchTime() == 0 or eventPlayer.isHoldingButton(Button.MELEE) and eventPlayer.isHoldingButton(Button.RELOAD)) == true
    @Condition eventPlayer.varTxtH_S == false
    
    wait(0.094, Wait.ABORT_WHEN_FALSE)
    hudHeader(eventPlayer, "┌\r\n\r\n  {0} : \"HOLD\" YOUR SHIELD TO BE INVISIBLE FOR 3S, CD TOP LEFT  \r\n\r\n└".format(abilityIconString(Hero.REINHARDT, Button.SECONDARY_FIRE)), HudPosition.TOP, 3, Color.GREEN, HudReeval.VISIBILITY_AND_STRING, SpecVisibility.DEFAULT)
    eventPlayer.varTxt_id = getLastCreatedText()
    eventPlayer.varTxtH_S = true


rule "#REIN TEAM 2":
    @Event eachPlayer
    @Team 2
    @Hero reinhardt
    #@Condition (eventPlayer.isHoldingButton(Button.RELOAD) and eventPlayer.isHoldingButton(Button.CROUCH) and eventPlayer.isHoldingButton(Button.MELEE)) == true
    #@Condition (eventPlayer.isHoldingButton(Button.MELEE) and eventPlayer.isHoldingButton(Button.RELOAD)) == true
    @Condition (eventPlayer.hasSpawned() and getMatchTime() == 0 or eventPlayer.isHoldingButton(Button.MELEE) and eventPlayer.isHoldingButton(Button.RELOAD)) == true
    @Condition eventPlayer.varTxtH_S == false
    
    wait(0.094, Wait.ABORT_WHEN_FALSE)
    hudHeader(eventPlayer, "┌\r\n\r\n  {0} : FIRESTRIKE ONE SHOT  \r\n  [TIPS] : USE IT ON MEI WALL  \r\n\r\n└".format(abilityIconString(Hero.REINHARDT, Button.ABILITY_2)), HudPosition.TOP, 3, Color.GREEN, HudReeval.VISIBILITY_AND_STRING, SpecVisibility.DEFAULT)
    eventPlayer.varTxt_id = getLastCreatedText()
    eventPlayer.varTxtH_S = true


rule "#ROADHOG TEAM 1":
    @Event eachPlayer
    @Team 1
    @Hero roadhog
    #@Condition (eventPlayer.isHoldingButton(Button.RELOAD) and eventPlayer.isHoldingButton(Button.CROUCH) and eventPlayer.isHoldingButton(Button.MELEE)) == true
    #@Condition (eventPlayer.isHoldingButton(Button.MELEE) and eventPlayer.isHoldingButton(Button.RELOAD)) == true
    @Condition (eventPlayer.hasSpawned() and getMatchTime() == 0 or eventPlayer.isHoldingButton(Button.MELEE) and eventPlayer.isHoldingButton(Button.RELOAD)) == true
    @Condition eventPlayer.varTxtH_S == false
    
    wait(0.094, Wait.ABORT_WHEN_FALSE)
    hudHeader(eventPlayer, "┌\r\n\r\n  {0} : WORK IN PROGRESS, IF YOU HAVE AN IDEA MP ME  \r\n\r\n└".format(iconString(Icon.WARNING)), HudPosition.TOP, 3, Color.GREEN, HudReeval.VISIBILITY_AND_STRING, SpecVisibility.DEFAULT)
    eventPlayer.varTxt_id = getLastCreatedText()
    eventPlayer.varTxtH_S = true


rule "#ROADHOG TEAM 2":
    @Event eachPlayer
    @Team 2
    @Hero roadhog
    #@Condition (eventPlayer.isHoldingButton(Button.RELOAD) and eventPlayer.isHoldingButton(Button.CROUCH) and eventPlayer.isHoldingButton(Button.MELEE)) == true
    #@Condition (eventPlayer.isHoldingButton(Button.MELEE) and eventPlayer.isHoldingButton(Button.RELOAD)) == true
    @Condition (eventPlayer.hasSpawned() and getMatchTime() == 0 or eventPlayer.isHoldingButton(Button.MELEE) and eventPlayer.isHoldingButton(Button.RELOAD)) == true
    @Condition eventPlayer.varTxtH_S == false
    
    wait(0.094, Wait.ABORT_WHEN_FALSE)
    hudHeader(eventPlayer, "┌\r\n\r\n  {0} : USE YOUR \"E\" TO BE UNPHASED + SPEEDBOOST  \r\n  [TIPS] : USE IT IN GRAV FOR EXAMPLE\r\n\r\n└".format(abilityIconString(Hero.ROADHOG, Button.ABILITY_2)), HudPosition.TOP, 3, Color.GREEN, HudReeval.VISIBILITY_AND_STRING, SpecVisibility.DEFAULT)
    eventPlayer.varTxt_id = getLastCreatedText()
    eventPlayer.varTxtH_S = true


rule "#SIGMA TEAM 1":
    @Event eachPlayer
    @Team 1
    @Hero sigma
    #@Condition (eventPlayer.isHoldingButton(Button.RELOAD) and eventPlayer.isHoldingButton(Button.CROUCH) and eventPlayer.isHoldingButton(Button.MELEE)) == true
    #@Condition (eventPlayer.isHoldingButton(Button.MELEE) and eventPlayer.isHoldingButton(Button.RELOAD)) == true
    @Condition (eventPlayer.hasSpawned() and getMatchTime() == 0 or eventPlayer.isHoldingButton(Button.MELEE) and eventPlayer.isHoldingButton(Button.RELOAD)) == true
    @Condition eventPlayer.varTxtH_S == false
    
    wait(0.094, Wait.ABORT_WHEN_FALSE)
    hudHeader(eventPlayer, "┌\r\n\r\n  {0} : USE YOUR \"E\" (ROCK) ON TO GET A JUMPBOOST  \r\n        [ANGLE -28°]\r\n\r\n└".format(abilityIconString(Hero.SIGMA, Button.ABILITY_2)), HudPosition.TOP, 3, Color.GREEN, HudReeval.VISIBILITY_AND_STRING, SpecVisibility.DEFAULT)
    eventPlayer.varTxt_id = getLastCreatedText()
    eventPlayer.varTxtH_S = true


rule "#SIGMA TEAM 2":
    @Event eachPlayer
    @Team 2
    @Hero sigma
    #@Condition (eventPlayer.isHoldingButton(Button.RELOAD) and eventPlayer.isHoldingButton(Button.CROUCH) and eventPlayer.isHoldingButton(Button.MELEE)) == true
    #@Condition (eventPlayer.isHoldingButton(Button.MELEE) and eventPlayer.isHoldingButton(Button.RELOAD)) == true
    @Condition (eventPlayer.hasSpawned() and getMatchTime() == 0 or eventPlayer.isHoldingButton(Button.MELEE) and eventPlayer.isHoldingButton(Button.RELOAD)) == true
    @Condition eventPlayer.varTxtH_S == false
    
    wait(0.094, Wait.ABORT_WHEN_FALSE)
    hudHeader(eventPlayer, "┌\r\n\r\n  {0} : USE YOUR \"E\" (ROCK) TO GET A JUMPBOOST [-28°]\r\n  {1} : RELOAD TO BE A SCREAMER ! TIME < 180s (CD : 20s)  \r\n\r\n└".format(abilityIconString(Hero.SIGMA, Button.ABILITY_2), iconString(Icon.HAPPY)), HudPosition.TOP, 3, Color.GREEN, HudReeval.VISIBILITY_AND_STRING, SpecVisibility.DEFAULT)
    eventPlayer.varTxt_id = getLastCreatedText()
    eventPlayer.varTxtH_S = true


rule "#WINSTON":
    @Event eachPlayer
    @Team 1
    @Hero winston
    #@Condition (eventPlayer.isHoldingButton(Button.RELOAD) and eventPlayer.isHoldingButton(Button.CROUCH) and eventPlayer.isHoldingButton(Button.MELEE)) == true
    #@Condition (eventPlayer.isHoldingButton(Button.MELEE) and eventPlayer.isHoldingButton(Button.RELOAD)) == true
    @Condition (eventPlayer.hasSpawned() and getMatchTime() == 0 or eventPlayer.isHoldingButton(Button.MELEE) and eventPlayer.isHoldingButton(Button.RELOAD)) == true
    @Condition eventPlayer.varTxtH_S == false
    
    wait(0.094, Wait.ABORT_WHEN_FALSE)
    hudHeader(eventPlayer, "┌\r\n\r\n  {0} : USE YOUR \"E\" (BUBBLE) TO \"TRAP/SLOW\" A SEEKER  \r\n\r\n└".format(abilityIconString(Hero.WINSTON, Button.ABILITY_2)), HudPosition.TOP, 3, Color.GREEN, HudReeval.VISIBILITY_AND_STRING, SpecVisibility.DEFAULT)
    eventPlayer.varTxt_id = getLastCreatedText()
    eventPlayer.varTxtH_S = true


rule "#ZARYA":
    @Event eachPlayer
    @Team 1
    @Hero zarya
    #@Condition (eventPlayer.isHoldingButton(Button.RELOAD) and eventPlayer.isHoldingButton(Button.CROUCH) and eventPlayer.isHoldingButton(Button.MELEE)) == true
    #@Condition (eventPlayer.isHoldingButton(Button.MELEE) and eventPlayer.isHoldingButton(Button.RELOAD)) == true
    @Condition (eventPlayer.hasSpawned() and getMatchTime() == 0 or eventPlayer.isHoldingButton(Button.MELEE) and eventPlayer.isHoldingButton(Button.RELOAD)) == true
    @Condition eventPlayer.varTxtH_S == false
    
    wait(0.094, Wait.ABORT_WHEN_FALSE)
    hudHeader(eventPlayer, "┌\r\n\r\n  {0} : WORK IN PROGRESS\r\n\r\n└".format(iconString(Icon.WARNING)), HudPosition.TOP, 3, Color.GREEN, HudReeval.VISIBILITY_AND_STRING, SpecVisibility.DEFAULT)
    eventPlayer.varTxt_id = getLastCreatedText()
    eventPlayer.varTxtH_S = true


rule "#ASHE":
    @Event eachPlayer
    @Team 1
    @Hero ashe
    #@Condition (eventPlayer.isHoldingButton(Button.RELOAD) and eventPlayer.isHoldingButton(Button.CROUCH) and eventPlayer.isHoldingButton(Button.MELEE)) == true
    #@Condition (eventPlayer.isHoldingButton(Button.MELEE) and eventPlayer.isHoldingButton(Button.RELOAD)) == true
    @Condition (eventPlayer.hasSpawned() and getMatchTime() == 0 or eventPlayer.isHoldingButton(Button.MELEE) and eventPlayer.isHoldingButton(Button.RELOAD)) == true
    @Condition eventPlayer.varTxtH_S == false
    
    wait(0.094, Wait.ABORT_WHEN_FALSE)
    hudHeader(eventPlayer, "┌\r\n\r\n  {0} : WORK IN PROGRESS\r\n\r\n└".format(iconString(Icon.WARNING)), HudPosition.TOP, 3, Color.GREEN, HudReeval.VISIBILITY_AND_STRING, SpecVisibility.DEFAULT)
    eventPlayer.varTxt_id = getLastCreatedText()
    eventPlayer.varTxtH_S = true


rule "#BASTION":
    @Event eachPlayer
    @Team 1
    @Hero bastion
    #@Condition (eventPlayer.isHoldingButton(Button.RELOAD) and eventPlayer.isHoldingButton(Button.CROUCH) and eventPlayer.isHoldingButton(Button.MELEE)) == true
    #@Condition (eventPlayer.isHoldingButton(Button.MELEE) and eventPlayer.isHoldingButton(Button.RELOAD)) == true
    @Condition (eventPlayer.hasSpawned() and getMatchTime() == 0 or eventPlayer.isHoldingButton(Button.MELEE) and eventPlayer.isHoldingButton(Button.RELOAD)) == true
    @Condition eventPlayer.varTxtH_S == false
    
    wait(0.094, Wait.ABORT_WHEN_FALSE)
    hudHeader(eventPlayer, "┌\r\n\r\n  {0} : HEALING YOURSELF MAKING YOU FASTER \r\n\r\n└".format(abilityIconString(Hero.BASTION, Button.SECONDARY_FIRE)), HudPosition.TOP, 3, Color.GREEN, HudReeval.VISIBILITY_AND_STRING, SpecVisibility.DEFAULT)
    eventPlayer.varTxt_id = getLastCreatedText()
    eventPlayer.varTxtH_S = true


rule "#JUNKRAT":
    @Event eachPlayer
    @Team 1
    @Hero junkrat
    #@Condition (eventPlayer.isHoldingButton(Button.RELOAD) and eventPlayer.isHoldingButton(Button.CROUCH) and eventPlayer.isHoldingButton(Button.MELEE)) == true
    #@Condition (eventPlayer.isHoldingButton(Button.MELEE) and eventPlayer.isHoldingButton(Button.RELOAD)) == true
    @Condition (eventPlayer.hasSpawned() and getMatchTime() == 0 or eventPlayer.isHoldingButton(Button.MELEE) and eventPlayer.isHoldingButton(Button.RELOAD)) == true
    @Condition eventPlayer.varTxtH_S == false
    
    wait(0.094, Wait.ABORT_WHEN_FALSE)
    hudHeader(eventPlayer, "┌\r\n\r\n  {0} : USE YOUR ULTIMATE TO STUN A SEEKER FOR 3S  \r\n\r\n└".format(abilityIconString(Hero.JUNKRAT, Button.ULTIMATE)), HudPosition.TOP, 3, Color.GREEN, HudReeval.VISIBILITY_AND_STRING, SpecVisibility.DEFAULT)
    eventPlayer.varTxt_id = getLastCreatedText()
    eventPlayer.varTxtH_S = true


rule "#DOOMFIST":
    @Event eachPlayer
    @Team 1
    @Hero doomfist
    #@Condition (eventPlayer.isHoldingButton(Button.RELOAD) and eventPlayer.isHoldingButton(Button.CROUCH) and eventPlayer.isHoldingButton(Button.MELEE)) == true
    #@Condition (eventPlayer.isHoldingButton(Button.MELEE) and eventPlayer.isHoldingButton(Button.RELOAD)) == true
    @Condition (eventPlayer.hasSpawned() and getMatchTime() == 0 or eventPlayer.isHoldingButton(Button.MELEE) and eventPlayer.isHoldingButton(Button.RELOAD)) == true
    @Condition eventPlayer.varTxtH_S == false
    
    wait(0.094, Wait.ABORT_WHEN_FALSE)
    hudHeader(eventPlayer, "┌\r\n\r\n  {0} : 0.7S INVINCIBLE WHEN YOU USE YOUR UPPERCUT  \r\n  {1} : 0.7S INVINCIBLE WHEN YOU TOUCH A SEEKER \r\n\r\n└".format(abilityIconString(Hero.DOOMFIST, Button.ABILITY_1), abilityIconString(Hero.DOOMFIST, Button.ABILITY_2)), HudPosition.TOP, 3, Color.GREEN, HudReeval.VISIBILITY_AND_STRING, SpecVisibility.DEFAULT)
    eventPlayer.varTxt_id = getLastCreatedText()
    eventPlayer.varTxtH_S = true


rule "#WIDOW":
    @Event eachPlayer
    @Team 1
    @Hero widowmaker
    #@Condition (eventPlayer.isHoldingButton(Button.RELOAD) and eventPlayer.isHoldingButton(Button.CROUCH) and eventPlayer.isHoldingButton(Button.MELEE)) == true
    #@Condition (eventPlayer.isHoldingButton(Button.MELEE) and eventPlayer.isHoldingButton(Button.RELOAD)) == true
    @Condition (eventPlayer.hasSpawned() and getMatchTime() == 0 or eventPlayer.isHoldingButton(Button.MELEE) and eventPlayer.isHoldingButton(Button.RELOAD)) == true
    @Condition eventPlayer.varTxtH_S == false
    
    wait(0.094, Wait.ABORT_WHEN_FALSE)
    hudHeader(eventPlayer, "┌\r\n\r\n  {0} : MAKES A HEADSHOT TO A SEEKER TO KNOCKDOWN HIM FOR 2s  \r\n        [CD : 5s]\r\n\r\n└".format(iconString(Icon.DIZZY)), HudPosition.TOP, 3, Color.GREEN, HudReeval.VISIBILITY_AND_STRING, SpecVisibility.DEFAULT)
    eventPlayer.varTxt_id = getLastCreatedText()
    eventPlayer.varTxtH_S = true


rule "#MEI":
    @Event eachPlayer
    @Team 1
    @Hero mei
    #@Condition (eventPlayer.isHoldingButton(Button.RELOAD) and eventPlayer.isHoldingButton(Button.CROUCH) and eventPlayer.isHoldingButton(Button.MELEE)) == true
    #@Condition (eventPlayer.isHoldingButton(Button.MELEE) and eventPlayer.isHoldingButton(Button.RELOAD)) == true
    @Condition (eventPlayer.hasSpawned() and getMatchTime() == 0 or eventPlayer.isHoldingButton(Button.MELEE) and eventPlayer.isHoldingButton(Button.RELOAD)) == true
    @Condition eventPlayer.varTxtH_S == false
    
    wait(0.094, Wait.ABORT_WHEN_FALSE)
    hudHeader(eventPlayer, "┌\r\n\r\n  {0} : MEI FREEZE SEEKER AROUND FOR 1s WHEN SHE USE HER SHIFT  \r\n\r\n└".format(abilityIconString(Hero.MEI, Button.ABILITY_1)), HudPosition.TOP, 3, Color.GREEN, HudReeval.VISIBILITY_AND_STRING, SpecVisibility.DEFAULT)
    eventPlayer.varTxt_id = getLastCreatedText()
    eventPlayer.varTxtH_S = true


rule "#PHARAH":
    @Event eachPlayer
    @Team 1
    @Hero pharah
    #@Condition (eventPlayer.isHoldingButton(Button.RELOAD) and eventPlayer.isHoldingButton(Button.CROUCH) and eventPlayer.isHoldingButton(Button.MELEE)) == true
    #@Condition (eventPlayer.isHoldingButton(Button.MELEE) and eventPlayer.isHoldingButton(Button.RELOAD)) == true
    @Condition (eventPlayer.hasSpawned() and getMatchTime() == 0 or eventPlayer.isHoldingButton(Button.MELEE) and eventPlayer.isHoldingButton(Button.RELOAD)) == true
    @Condition eventPlayer.varTxtH_S == false
    
    wait(0.094, Wait.ABORT_WHEN_FALSE)
    hudHeader(eventPlayer, "┌\r\n\r\n  {0} : WORK IN PROGRESS\r\n\r\n└".format(iconString(Icon.WARNING)), HudPosition.TOP, 3, Color.GREEN, HudReeval.VISIBILITY_AND_STRING, SpecVisibility.DEFAULT)
    eventPlayer.varTxt_id = getLastCreatedText()
    eventPlayer.varTxtH_S = true


rule "#SOLDIER - 76":
    @Event eachPlayer
    @Team 1
    @Hero soldier
    #@Condition (eventPlayer.isHoldingButton(Button.RELOAD) and eventPlayer.isHoldingButton(Button.CROUCH) and eventPlayer.isHoldingButton(Button.MELEE)) == true
    #@Condition (eventPlayer.isHoldingButton(Button.MELEE) and eventPlayer.isHoldingButton(Button.RELOAD)) == true
    @Condition (eventPlayer.hasSpawned() and getMatchTime() == 0 or eventPlayer.isHoldingButton(Button.MELEE) and eventPlayer.isHoldingButton(Button.RELOAD)) == true
    @Condition eventPlayer.varTxtH_S == false
    
    wait(0.094, Wait.ABORT_WHEN_FALSE)
    hudHeader(eventPlayer, "┌\r\n\r\n  {0} : USE YOUR ULT TO FORCE SEEKER TO \"JUMP\"  \r\n\r\n└".format(abilityIconString(Hero.SOLDIER, Button.ULTIMATE)), HudPosition.TOP, 3, Color.GREEN, HudReeval.VISIBILITY_AND_STRING, SpecVisibility.DEFAULT)
    eventPlayer.varTxt_id = getLastCreatedText()
    eventPlayer.varTxtH_S = true


rule "#ECHO":
    @Event eachPlayer
    @Team 1
    @Hero echo
    #@Condition (eventPlayer.isHoldingButton(Button.RELOAD) and eventPlayer.isHoldingButton(Button.CROUCH) and eventPlayer.isHoldingButton(Button.MELEE)) == true
    #@Condition (eventPlayer.isHoldingButton(Button.MELEE) and eventPlayer.isHoldingButton(Button.RELOAD)) == true
    @Condition (eventPlayer.hasSpawned() and getMatchTime() == 0 or eventPlayer.isHoldingButton(Button.MELEE) and eventPlayer.isHoldingButton(Button.RELOAD)) == true
    @Condition eventPlayer.varTxtH_S == false
    
    wait(0.094, Wait.ABORT_WHEN_FALSE)
    hudHeader(eventPlayer, "┌\r\n\r\n  {0} : USE YOUR MINES/BOMBS (RMB) TO SLOW A SEEKER  \r\n\r\n└".format(abilityIconString(Hero.ECHO, Button.SECONDARY_FIRE)), HudPosition.TOP, 3, Color.GREEN, HudReeval.VISIBILITY_AND_STRING, SpecVisibility.DEFAULT)
    eventPlayer.varTxt_id = getLastCreatedText()
    eventPlayer.varTxtH_S = true


rule "#REAPER":
    @Event eachPlayer
    @Team 1
    @Hero reaper
    #@Condition (eventPlayer.isHoldingButton(Button.RELOAD) and eventPlayer.isHoldingButton(Button.CROUCH) and eventPlayer.isHoldingButton(Button.MELEE)) == true
    #@Condition (eventPlayer.isHoldingButton(Button.MELEE) and eventPlayer.isHoldingButton(Button.RELOAD)) == true
    @Condition (eventPlayer.hasSpawned() and getMatchTime() == 0 or eventPlayer.isHoldingButton(Button.MELEE) and eventPlayer.isHoldingButton(Button.RELOAD)) == true
    @Condition eventPlayer.varTxtH_S == false
    
    wait(0.094, Wait.ABORT_WHEN_FALSE)
    hudHeader(eventPlayer, "┌\r\n\r\n  {0} : YOU ARE UNPHASED WHEN YOU CAST YOUR \"E\" TP\r\n  {1] : REAPER CAN WALK THROUGH WALLS WITH HIS ULT  \r\n\r\n└".format(abilityIconString(Hero.REAPER, Button.ABILITY_2)), HudPosition.TOP, 3, Color.GREEN, HudReeval.VISIBILITY_AND_STRING, SpecVisibility.DEFAULT)
    eventPlayer.varTxt_id = getLastCreatedText()
    eventPlayer.varTxtH_S = true


rule "#HANZO":
    @Event eachPlayer
    @Team 1
    @Hero hanzo
    #@Condition (eventPlayer.isHoldingButton(Button.RELOAD) and eventPlayer.isHoldingButton(Button.CROUCH) and eventPlayer.isHoldingButton(Button.MELEE)) == true
    #@Condition (eventPlayer.isHoldingButton(Button.MELEE) and eventPlayer.isHoldingButton(Button.RELOAD)) == true
    @Condition (eventPlayer.hasSpawned() and getMatchTime() == 0 or eventPlayer.isHoldingButton(Button.MELEE) and eventPlayer.isHoldingButton(Button.RELOAD)) == true
    @Condition eventPlayer.varTxtH_S == false
    
    wait(0.094, Wait.ABORT_WHEN_FALSE)
    hudHeader(eventPlayer, "┌\r\n\r\n  {0} : YOU'RE CUPID SO MAKE LOVE WITH YOUR DMG  \r\n\r\n└".format(iconString(Icon.HEART)), HudPosition.TOP, 3, Color.GREEN, HudReeval.VISIBILITY_AND_STRING, SpecVisibility.DEFAULT)
    eventPlayer.varTxt_id = getLastCreatedText()
    eventPlayer.varTxtH_S = true


rule "#MCREE":
    @Event eachPlayer
    @Team 1
    @Hero mccree
    #@Condition (eventPlayer.isHoldingButton(Button.RELOAD) and eventPlayer.isHoldingButton(Button.CROUCH) and eventPlayer.isHoldingButton(Button.MELEE)) == true
    #@Condition (eventPlayer.isHoldingButton(Button.MELEE) and eventPlayer.isHoldingButton(Button.RELOAD)) == true
    @Condition (eventPlayer.hasSpawned() and getMatchTime() == 0 or eventPlayer.isHoldingButton(Button.MELEE) and eventPlayer.isHoldingButton(Button.RELOAD)) == true
    @Condition eventPlayer.varTxtH_S == false
    
    wait(0.094, Wait.ABORT_WHEN_FALSE)
    hudHeader(eventPlayer, "┌\r\n\r\n  {0} : YOU'RE INVINCIBLE WHEN YOU ROLL\r\n  {1} : HIT A SEEKER WITH UR ULT TO GET UNPHASED FOR 1S  \r\n\r\n└".format(abilityIconString(Hero.MCCREE, Button.ABILITY_1), abilityIconString(Hero.MCCREE, Button.ULTIMATE)), HudPosition.TOP, 3, Color.GREEN, HudReeval.VISIBILITY_AND_STRING, SpecVisibility.DEFAULT)
    eventPlayer.varTxt_id = getLastCreatedText()
    eventPlayer.varTxtH_S = true


rule "#TORBJORN":
    @Event eachPlayer
    @Team 1
    @Hero torbjorn
    #@Condition (eventPlayer.isHoldingButton(Button.RELOAD) and eventPlayer.isHoldingButton(Button.CROUCH) and eventPlayer.isHoldingButton(Button.MELEE)) == true
    #@Condition (eventPlayer.isHoldingButton(Button.MELEE) and eventPlayer.isHoldingButton(Button.RELOAD)) == true
    @Condition (eventPlayer.hasSpawned() and getMatchTime() == 0 or eventPlayer.isHoldingButton(Button.MELEE) and eventPlayer.isHoldingButton(Button.RELOAD)) == true
    @Condition eventPlayer.varTxtH_S == false
    
    wait(0.094, Wait.ABORT_WHEN_FALSE)
    hudHeader(eventPlayer, "┌\r\n\r\n  {0} : USE YOUR ULTIMATE TO SLOW A SEEKER  \r\n\r\n└".format(abilityIconString(Hero.TORBJORN, Button.ULTIMATE)), HudPosition.TOP, 3, Color.GREEN, HudReeval.VISIBILITY_AND_STRING, SpecVisibility.DEFAULT)
    eventPlayer.varTxt_id = getLastCreatedText()
    eventPlayer.varTxtH_S = true


rule "#ANA":
    @Event eachPlayer
    @Team 1
    @Hero ana
    #@Condition (eventPlayer.isHoldingButton(Button.RELOAD) and eventPlayer.isHoldingButton(Button.CROUCH) and eventPlayer.isHoldingButton(Button.MELEE)) == true
    #@Condition (eventPlayer.isHoldingButton(Button.MELEE) and eventPlayer.isHoldingButton(Button.RELOAD)) == true
    @Condition (eventPlayer.hasSpawned() and getMatchTime() == 0 or eventPlayer.isHoldingButton(Button.MELEE) and eventPlayer.isHoldingButton(Button.RELOAD)) == true
    @Condition eventPlayer.varTxtH_S == false
    
    wait(0.094, Wait.ABORT_WHEN_FALSE)
    hudHeader(eventPlayer, "┌\r\n\r\n  {0} : YOU'RE TP TO THE SEEKER THAT YOU SLEEP  \r\n  {1} : SMALL JUMPBOOST\r\n\r\n└".format(abilityIconString(Hero.ANA, Button.ABILITY_1), abilityIconString(Hero.ANA, Button.ABILITY_2)), HudPosition.TOP, 3, Color.GREEN, HudReeval.VISIBILITY_AND_STRING, SpecVisibility.DEFAULT)
    eventPlayer.varTxt_id = getLastCreatedText()
    eventPlayer.varTxtH_S = true


rule "#BRIGITTE":
    @Event eachPlayer
    @Team 1
    @Hero brigitte
    #@Condition (eventPlayer.isHoldingButton(Button.RELOAD) and eventPlayer.isHoldingButton(Button.CROUCH) and eventPlayer.isHoldingButton(Button.MELEE)) == true
    #@Condition (eventPlayer.isHoldingButton(Button.MELEE) and eventPlayer.isHoldingButton(Button.RELOAD)) == true
    @Condition (eventPlayer.hasSpawned() and getMatchTime() == 0 or eventPlayer.isHoldingButton(Button.MELEE) and eventPlayer.isHoldingButton(Button.RELOAD)) == true
    @Condition eventPlayer.varTxtH_S == false
    
    wait(0.094, Wait.ABORT_WHEN_FALSE)
    hudHeader(eventPlayer, "┌\r\n\r\n  {0} : HITS THE SKY WITH YOUR WHIPS TO GET A JUMPBOOST  \r\n\r\n└".format(abilityIconString(Hero.BRIGITTE, Button.ABILITY_1)), HudPosition.TOP, 3, Color.GREEN, HudReeval.VISIBILITY_AND_STRING, SpecVisibility.DEFAULT)
    eventPlayer.varTxt_id = getLastCreatedText()
    eventPlayer.varTxtH_S = true


rule "#LUCIO":
    @Event eachPlayer
    @Team 1
    @Hero lucio
    #@Condition (eventPlayer.isHoldingButton(Button.RELOAD) and eventPlayer.isHoldingButton(Button.CROUCH) and eventPlayer.isHoldingButton(Button.MELEE)) == true
    #@Condition (eventPlayer.isHoldingButton(Button.MELEE) and eventPlayer.isHoldingButton(Button.RELOAD)) == true
    @Condition (eventPlayer.hasSpawned() and getMatchTime() == 0 or eventPlayer.isHoldingButton(Button.MELEE) and eventPlayer.isHoldingButton(Button.RELOAD)) == true
    @Condition eventPlayer.varTxtH_S == false
    
    wait(0.094, Wait.ABORT_WHEN_FALSE)
    hudHeader(eventPlayer, "┌\r\n\r\n  {0} : JUMP AND BOOP THE FLOOR TO GET A JUMPBOOST  \r\n\r\n└".format(abilityIconString(Hero.LUCIO, Button.SECONDARY_FIRE)), HudPosition.TOP, 3, Color.GREEN, HudReeval.VISIBILITY_AND_STRING, SpecVisibility.DEFAULT)
    eventPlayer.varTxt_id = getLastCreatedText()
    eventPlayer.varTxtH_S = true


rule "#MOIRA":
    @Event eachPlayer
    @Team 1
    @Hero moira
    #@Condition (eventPlayer.isHoldingButton(Button.RELOAD) and eventPlayer.isHoldingButton(Button.CROUCH) and eventPlayer.isHoldingButton(Button.MELEE)) == true
    #@Condition (eventPlayer.isHoldingButton(Button.MELEE) and eventPlayer.isHoldingButton(Button.RELOAD)) == true
    @Condition (eventPlayer.hasSpawned() and getMatchTime() == 0 or eventPlayer.isHoldingButton(Button.MELEE) and eventPlayer.isHoldingButton(Button.RELOAD)) == true
    @Condition eventPlayer.varTxtH_S == false
    
    wait(0.094, Wait.ABORT_WHEN_FALSE)
    hudHeader(eventPlayer, "┌\r\n\r\n  {0} : USE YOUR \"E\" (PURPLE ORB) TO \"SLOW\" A SEEKER  \r\n\r\n└".format(abilityIconString(Hero.MOIRA, Button.ABILITY_2)), HudPosition.TOP, 3, Color.GREEN, HudReeval.VISIBILITY_AND_STRING, SpecVisibility.DEFAULT)
    eventPlayer.varTxt_id = getLastCreatedText()
    eventPlayer.varTxtH_S = true


rule "#SOMBRA":
    @Event eachPlayer
    @Team 1
    @Hero sombra
    #@Condition (eventPlayer.isHoldingButton(Button.RELOAD) and eventPlayer.isHoldingButton(Button.CROUCH) and eventPlayer.isHoldingButton(Button.MELEE)) == true
    #@Condition (eventPlayer.isHoldingButton(Button.MELEE) and eventPlayer.isHoldingButton(Button.RELOAD)) == true
    @Condition (eventPlayer.hasSpawned() and getMatchTime() == 0 or eventPlayer.isHoldingButton(Button.MELEE) and eventPlayer.isHoldingButton(Button.RELOAD)) == true
    @Condition eventPlayer.varTxtH_S == false
    
    wait(0.094, Wait.ABORT_WHEN_FALSE)
    hudHeader(eventPlayer, "┌\r\n\r\n  {0} : WORK IN PROGRESS\r\n\r\n└".format(iconString(Icon.WARNING)), HudPosition.TOP, 3, Color.GREEN, HudReeval.VISIBILITY_AND_STRING, SpecVisibility.DEFAULT)
    eventPlayer.varTxt_id = getLastCreatedText()
    eventPlayer.varTxtH_S = true


rule "#SYMMETRA":
    @Event eachPlayer
    @Team 1
    @Hero symmetra
    #@Condition (eventPlayer.isHoldingButton(Button.RELOAD) and eventPlayer.isHoldingButton(Button.CROUCH) and eventPlayer.isHoldingButton(Button.MELEE)) == true
    #@Condition (eventPlayer.isHoldingButton(Button.MELEE) and eventPlayer.isHoldingButton(Button.RELOAD)) == true
    @Condition (eventPlayer.hasSpawned() and getMatchTime() == 0 or eventPlayer.isHoldingButton(Button.MELEE) and eventPlayer.isHoldingButton(Button.RELOAD)) == true
    @Condition eventPlayer.varTxtH_S == false
    
    wait(0.094, Wait.ABORT_WHEN_FALSE)
    hudHeader(eventPlayer, "┌\r\n\r\n  {0} : WORK IN PROGRESS\r\n\r\n└".format(iconString(Icon.WARNING)), HudPosition.TOP, 3, Color.GREEN, HudReeval.VISIBILITY_AND_STRING, SpecVisibility.DEFAULT)
    eventPlayer.varTxt_id = getLastCreatedText()
    eventPlayer.varTxtH_S = true


rule "#MERCY":
    @Event eachPlayer
    @Team 1
    @Hero mercy
    #@Condition (eventPlayer.isHoldingButton(Button.RELOAD) and eventPlayer.isHoldingButton(Button.CROUCH) and eventPlayer.isHoldingButton(Button.MELEE)) == true
    #@Condition (eventPlayer.isHoldingButton(Button.MELEE) and eventPlayer.isHoldingButton(Button.RELOAD)) == true
    @Condition (eventPlayer.hasSpawned() and getMatchTime() == 0 or eventPlayer.isHoldingButton(Button.MELEE) and eventPlayer.isHoldingButton(Button.RELOAD)) == true
    @Condition eventPlayer.varTxtH_S == false
    
    wait(0.094, Wait.ABORT_WHEN_FALSE)
    hudHeader(eventPlayer, "┌\r\n\r\n  {0} : WORK IN PROGRESS\r\n\r\n└".format(iconString(Icon.WARNING)), HudPosition.TOP, 3, Color.GREEN, HudReeval.VISIBILITY_AND_STRING, SpecVisibility.DEFAULT)
    eventPlayer.varTxt_id = getLastCreatedText()
    eventPlayer.varTxtH_S = true


rule "#BAPTISTO":
    @Event eachPlayer
    @Team 1
    @Hero baptiste
    #@Condition (eventPlayer.isHoldingButton(Button.RELOAD) and eventPlayer.isHoldingButton(Button.CROUCH) and eventPlayer.isHoldingButton(Button.MELEE)) == true
    #@Condition (eventPlayer.isHoldingButton(Button.MELEE) and eventPlayer.isHoldingButton(Button.RELOAD)) == true
    @Condition (eventPlayer.hasSpawned() and getMatchTime() == 0 or eventPlayer.isHoldingButton(Button.MELEE) and eventPlayer.isHoldingButton(Button.RELOAD)) == true
    @Condition eventPlayer.varTxtH_S == false
    
    wait(0.094, Wait.ABORT_WHEN_FALSE)
    hudHeader(eventPlayer, "┌\r\n\r\n  {0} : BAPTISTE CAN MAKE A WALL FOR 10s WITH HIS ULT  \r\n         (LIMITED BY 1 IN THE SAME TIME)\r\n\r\n└".format(abilityIconString(Hero.BAPTISTE, Button.ULTIMATE)), HudPosition.TOP, 3, Color.GREEN, HudReeval.VISIBILITY_AND_STRING, SpecVisibility.DEFAULT)
    eventPlayer.varTxt_id = getLastCreatedText()
    eventPlayer.varTxtH_S = true


rule "#ZENYATTA":
    @Event eachPlayer
    @Team 1
    @Hero zenyatta
    #@Condition (eventPlayer.isHoldingButton(Button.RELOAD) and eventPlayer.isHoldingButton(Button.CROUCH) and eventPlayer.isHoldingButton(Button.MELEE)) == true
    #@Condition (eventPlayer.isHoldingButton(Button.MELEE) and eventPlayer.isHoldingButton(Button.RELOAD)) == true
    @Condition (eventPlayer.hasSpawned() and getMatchTime() == 0 or eventPlayer.isHoldingButton(Button.MELEE) and eventPlayer.isHoldingButton(Button.RELOAD)) == true
    @Condition eventPlayer.varTxtH_S == false
    
    wait(0.094, Wait.ABORT_WHEN_FALSE)
    hudHeader(eventPlayer, "┌\r\n\r\n  {0} : [ZENYATTA || KUNG-FU MASTER]\r\n  {1} : Kick someone to get a frame of invincibility  \r\n\r\n└".format(heroIcon(Hero.ZENYATTA), abilityIconString(Hero.ZENYATTA, Button.MELEE)), HudPosition.TOP, 3, Color.GREEN, HudReeval.VISIBILITY_AND_STRING, SpecVisibility.DEFAULT)
    eventPlayer.varTxt_id = getLastCreatedText()
    eventPlayer.varTxtH_S = true


rule "####### <Remove abilities instruction when start> #######":
    @Event eachPlayer
    @Hero all
    @Condition isGameInProgress() == true
    @Condition getMatchTime() >= 195
    
    destroyHudText(eventPlayer.varTxt_id)
    eventPlayer.varTxtH_S = false


/*
rule "───────────────────────────┤Settings├────────────────────────────────────":
*/

rule "Player Settings":
    @Event eachPlayer
    @Hero all
    @Condition isAssemblingHeroes() == true
    
    eventPlayer.allowButton(Button.JUMP)
    eventPlayer.allowButton(Button.ABILITY_1)


rule "Settings":
    hider_win_time = abs(10.999)
    solo_seeker_speed = 110
    doomfist_max_speed = 100
    reveal_time = 30
    varDeploy_center = 0
    shield_location[0] = vect(0, -287, 0)
    shield_location[1] = vect(0, -287, 0)


rule "Reveal Hiders at 30 seconds left":
    @Event eachPlayer
    @Team 1
    @Hero all
    @Condition isGameInProgress() == true
    @Condition getMatchTime() <= reveal_time
    @Condition eventPlayer.isAlive() == true
    @Condition eventPlayer.hasSpawned() == true
    
    createIcon(getPlayers(Team.2), eventPlayer, Icon.ARROW_DOWN, IconReeval.VISIBILITY_AND_POSITION, Color.WHITE, true)
    eventPlayer.player_effects[2] = getLastCreatedEntity()
    bigMessage(getAllPlayers(), "The hiders have been revealed!")


rule "Reset everything between matches":
    @Event eachPlayer
    @Hero all
    @Condition isAssemblingHeroes() == true
    
    speed_rule_lock = false
    getLivingPlayers(Team.ALL).setMoveSpeed(100)
    destroyEffect(eventPlayer.player_effects[0])
    destroyIcon(eventPlayer.player_effects[1])
    destroyIcon(eventPlayer.player_effects[2])
    destroyIcon(eventPlayer.ToxicPlayerIcon)
    eventPlayer.setInvisibility(Invis.NONE)
    eventPlayer.stopScalingSize()
    destroyHudText(eventPlayer.varTxt_id)
    eventPlayer.varTxtH_S = false


rule "Victory settings for hiders":
    @Condition isGameInProgress() == true
    @Condition getNumberOfLivingPlayers(Team.1) >= 1
    @Condition getMatchTime() <= hider_win_time
    
    getLivingPlayers(Team.2).setStatusEffect(null, Status.FROZEN, 10)
    bigMessage(getAllPlayers(), "The hiders win!")
    wait(3)
    declareRoundVictory(Team.1)


rule "3rd person camera Orisa, Rein, Sigma & Bastion":
    @Event eachPlayer
    @Hero all
    @Condition (eventPlayer.getCurrentHero() == Hero.ORISA or eventPlayer.getCurrentHero() == Hero.REINHARDT or eventPlayer.getCurrentHero() == Hero.BASTION or eventPlayer.getCurrentHero() == Hero.SIGMA) == true
    @Condition (eventPlayer.isHoldingButton(Button.INTERACT) and eventPlayer.isHoldingButton(Button.CROUCH)) == true
    
    if eventPlayer.player_camera != 1:
        goto lbl_0
    eventPlayer.startCamera(raycast(eventPlayer, eventPlayer.getEyePosition() + worldVector(vect(0, -1.18, -0.728), eventPlayer, Transform.ROTATION) + Vector.UP * 2.008 + eventPlayer.getFacingDirection() * -1.8, null, eventPlayer, true).getHitPosition(), eventPlayer + eventPlayer.getFacingDirection() * 1000, 76.288)
    eventPlayer.player_camera = 0
    return
    lbl_0:
    if eventPlayer.player_camera != 0:
        goto lbl_1
    eventPlayer.stopCamera()
    eventPlayer.player_camera = 1
    return
    lbl_1:


rule "3rd person camera":
    @Event eachPlayer
    @Hero all
    @Condition (eventPlayer.getCurrentHero() == Hero.ORISA or eventPlayer.getCurrentHero() == Hero.REINHARDT or eventPlayer.getCurrentHero() == Hero.BASTION or eventPlayer.getCurrentHero() == Hero.SIGMA) == false
    @Condition (eventPlayer.isHoldingButton(Button.INTERACT) and eventPlayer.isHoldingButton(Button.CROUCH)) == true
    
    if eventPlayer.player_camera != 1:
        goto lbl_0
    eventPlayer.startCamera(raycast(eventPlayer, eventPlayer.getEyePosition() + worldVector(vect(0, -1.18, 0.055), eventPlayer, Transform.ROTATION) + Vector.UP * 1.5 + eventPlayer.getFacingDirection() * -1.8, null, eventPlayer, true).getHitPosition(), eventPlayer + eventPlayer.getFacingDirection() * 1000, 76.288)
    eventPlayer.player_camera = 0
    return
    lbl_0:
    if eventPlayer.player_camera != 0:
        goto lbl_1
    eventPlayer.stopCamera()
    eventPlayer.player_camera = 1
    return
    lbl_1:


rule "Unreveal Dead Hiders":
    @Event eachPlayer
    @Team 1
    @Hero all
    @Condition isGameInProgress() == true
    @Condition eventPlayer.isDead() == true
    
    destroyIcon(eventPlayer.player_effects[2])
    eventPlayer.stopForcingOutlineFor(getAllPlayers())


rule "Announce the speed increase":
    @Condition speed_rule_lock == true
    @Condition isGameInProgress() == true
    
    bigMessage(getAllPlayers(), "Run, the seeker is faster!")


rule "Delete all HUD":
    @Event eachPlayer
    @Hero all
    @Condition isAssemblingHeroes() == true
    
    destroyAllHudTexts()


/*
rule "────────────────────────────┤HUD Timers├───────────────────────────────":
*/

rule "All Timers":
    @Event eachPlayer
    @Hero all
    @Condition eventPlayer.hasSpawned() == true
    
    if eventPlayer.getCurrentHero() == Hero.REINHARDT and eventPlayer.getTeam() == Team.1:
        eventPlayer.Rein_Msg = iconString(Icon.HAPPY)
        hudHeader(eventPlayer, l"{0}: {1}".format(heroIcon(Hero.REINHARDT), eventPlayer.Rein_Msg), HudPosition.LEFT, 2, Color.WHITE, HudReeval.VISIBILITY_AND_STRING, SpecVisibility.DEFAULT)
    elif eventPlayer.getCurrentHero() == Hero.SIGMA and eventPlayer.getTeam() == Team.2:
        hudHeader(eventPlayer, l"{0}: {1}".format(heroIcon(Hero.SIGMA), eventPlayer.varSigmaScreamerMsg), HudPosition.LEFT, 2, Color.WHITE, HudReeval.VISIBILITY_AND_STRING, SpecVisibility.DEFAULT)
    elif eventPlayer.getCurrentHero() == Hero.WIDOWMAKER and eventPlayer.getTeam() == Team.1:
        hudHeader(eventPlayer, l"{0}: {1}".format(heroIcon(Hero.WIDOWMAKER), eventPlayer.varWidowHSmsg), HudPosition.LEFT, 2, Color.WHITE, HudReeval.VISIBILITY_AND_STRING, SpecVisibility.DEFAULT)


/*
rule "──────────────────────────┤Seeker Modifications├─────────────────────────":
*/

rule "Increase the speed of solo seekers":
    @Event eachPlayer
    @Team 2
    @Hero all
    #@Condition isGameInProgress() == true
    #@Condition speed_rule_lock == false
    @Condition getNumberOfLivingPlayers(Team.2) == 1
    #@Condition getNumberOfPlayers(Team.1) >= 3
    @Condition eventPlayer.isAlive() == true
    
    speed_rule_lock = true
    eventPlayer.setMoveSpeed(solo_seeker_speed)
    #createEffect(getPlayers(Team.1), Effect.SPARKLES, Color.RED, eventPlayer, 1, EffectReeval.VISIBILITY_POSITION_AND_RADIUS)
    #eventPlayer.player_effects[0] = getLastCreatedEntity()
    wait(2.25)
    if RULE_CONDITION:
        goto RULE_START


rule "Sigma location pinger when he kills a hider":
    @Event playerDealtFinalBlow
    @Team 2
    @Hero sigma
    
    createIcon(getPlayers(Team.1), eventPlayer, Icon.EXCLAMATION_MARK, IconReeval.VISIBILITY_AND_POSITION, Color.RED, true)
    eventPlayer.player_effects[1] = getLastCreatedEntity()
    wait(2)
    destroyIcon(eventPlayer.player_effects[1])


rule "Sigma accretion speed boost":
    @Event eachPlayer
    @Team 2
    @Hero sigma
    @Condition eventPlayer.isUsingAbility2() == true
    
    eventPlayer.setDamageDealt(100)
    eventPlayer.setMoveSpeed(300)
    wait(0.65)
    eventPlayer.setMoveSpeed(100)


rule "Sigma buff dmg":
    @Event eachPlayer
    @Team 2
    @Hero sigma
    @Condition eventPlayer.isUsingAbility2() == false
    @Condition Button.MELEE == true
    
    eventPlayer.setDamageDealt(255.287)
    #wait(0.5)
    #eventPlayer.setDamageDealt(100)


rule "SIGMA SEEKER SCREAMER":
    @Event eachPlayer
    @Team 2
    @Hero sigma
    @Condition isGameInProgress() == true
    @Condition getMatchTime() <= 180
    @Condition getMatchTime() >= 15
    @Condition eventPlayer.isHoldingButton(Button.RELOAD) == true
    @Condition eventPlayer.varSigmaScreamer == null
    
    eventPlayer.varSigmaScreamer = true
    wait(0.114)
    if getMatchTime() >= 15:
        eventPlayer.setStatusEffect(null, Status.PHASED_OUT, 9999)
    eventPlayer.setStatusEffect(null, Status.HACKED, 9999)
    eventPlayer.setInvisibility(Invis.ENEMIES)
    eventPlayer.disallowButton(Button.MELEE)
    eventPlayer.disallowButton(Button.ABILITY_2)
    wait(0.557)
    eventPlayer.attachTo(random.choice(getLivingPlayers(Team.1)), vect(0, 0, 1))
    wait(0.124)
    eventPlayer.communicate(Comms.HELLO)
    wait(2.876)
    eventPlayer.detach()
    if eventPlayer.getVerticalFacingAngle() >= 28:
        eventPlayer.teleport(nearestWalkablePosition(eventPlayer.getPosition() + vect(0, 0, 14)))
    else:
        #Change the 14.287 to Increase or Shorten the TP distance.
        eventPlayer.teleport(nearestWalkablePosition(raycast(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + eventPlayer.getFacingDirection() * 14.287, getAllPlayers(), eventPlayer, true).getHitPosition()))
    eventPlayer.allowButton(Button.MELEE)
    eventPlayer.allowButton(Button.ABILITY_2)
    eventPlayer.clearStatusEffect(Status.HACKED)
    eventPlayer.setInvisibility(Invis.NONE)
    eventPlayer.clearStatusEffect(Status.PHASED_OUT)
    eventPlayer.varSigmaScreamerMsg = 20
    chase(eventPlayer.varSigmaScreamerMsg, 0, rate=1, ChaseReeval.DESTINATION_AND_RATE)
    wait(20)
    eventPlayer.varSigmaScreamer = null


rule "SIGMA SEEKER ANTI-KAMIKAZE WHEN HE BE A SCREAMER":
    @Event eachPlayer
    @Team 2
    @Hero sigma
    @Condition eventPlayer.varSigmaScreamer == true
    @Condition (eventPlayer.getPosition().y <= varSigmaAntiKamikazeN_Y or eventPlayer.getPosition().y >= varSigmaAntiKamikazePos_Y) == true
    
    eventPlayer.detach()
    eventPlayer.teleport(nearestWalkablePosition(eventPlayer.getPosition() + vect(18, 0, 18)))


rule "Roadhog buff dmg":
    @Event eachPlayer
    @Team 2
    @Hero roadhog
    @Condition eventPlayer.isUsingAbility1() == false
    @Condition Button.MELEE == true
    
    eventPlayer.setDamageDealt(255.287)


rule "Roadhog modify/buff dmg HOOK":
    @Event eachPlayer
    @Team 2
    @Hero roadhog
    @Condition eventPlayer.isUsingAbility1() == true
    
    eventPlayer.setDamageDealt(100)


rule "Roadhog SEEKER Unphased when he \"take a breather\" + speedboost":
    @Event eachPlayer
    @Team 2
    @Hero roadhog
    @Condition getMatchTime() >= 13
    @Condition eventPlayer.isUsingAbility2() == true
    
    eventPlayer.setStatusEffect(null, Status.PHASED_OUT, 2.5)
    eventPlayer.setMoveSpeed(110)
    wait(2.5)
    eventPlayer.setMoveSpeed(100)


/*
rule "────────────────────────────┤Hider Modifications├─────────────────────────":
*/

rule "Lucio Jump":
    @Event eachPlayer
    @Team 1
    @Hero lucio
    @Condition (eventPlayer.isMeleeing() == false and eventPlayer.isHoldingButton(Button.SECONDARY_FIRE) == true) == true
    
    eventPlayer.applyImpulse(eventPlayer.getFacingDirection(), -17.288, Relativity.TO_WORLD, Impulse.CANCEL_CONTRARY_MOTION)
    wait(5)


rule "Lucio Wallride":
    @Event eachPlayer
    @Team 1
    @Hero lucio
    @Condition eventPlayer.getCurrentHero() == Hero.LUCIO
    @Condition eventPlayer.isHoldingButton(Button.JUMP) == true
    
    if eventPlayer.isInAir():
        eventPlayer.disallowButton(Button.JUMP)
    elif eventPlayer.isOnGround() == true:
        eventPlayer.allowButton(Button.JUMP)


rule "LUCIO wall climb 2":
    @Event eachPlayer
    @Team 1
    @Hero lucio
    @Condition (eventPlayer.isInAir() or eventPlayer.isOnWall()) == true
    
    if eventPlayer.isOnWall() == true:
        eventPlayer.applyImpulse(Vector.DOWN, 14, Relativity.TO_WORLD, Impulse.INCORPORATE_CONTRARY_MOTION)


rule "Lucio Disable Ability":
    @Event eachPlayer
    @Team 1
    @Hero lucio
    @Condition eventPlayer.getCurrentHero() == Hero.LUCIO
    @Condition eventPlayer.hasSpawned() == true
    
    eventPlayer.startForcingButton(Button.ABILITY_1)
    wait(0.055)
    eventPlayer.stopForcingButton(Button.ABILITY_1)
    wait(0.255)
    eventPlayer.disallowButton(Button.ABILITY_1)


rule "Baptisto exoboost neft":
    @Event eachPlayer
    @Team 1
    @Hero baptiste
    @Condition eventPlayer.isCrouching() == true
    @Condition eventPlayer.isOnGround() == true
    
    eventPlayer.setGravity(230)
    wait(0.25, Wait.RESTART_WHEN_TRUE)
    eventPlayer.setGravity(230)
    if RULE_CONDITION:
        goto RULE_START
    wait(1.25, Wait.RESTART_WHEN_TRUE)
    eventPlayer.setGravity(100)


rule "Moira fade nerf":
    @Event eachPlayer
    @Team 1
    @Hero moira
    @Condition eventPlayer.isUsingAbility1() == true
    
    eventPlayer.setMoveSpeed(55)
    wait(0.8)
    eventPlayer.setMoveSpeed(100)


rule "Disable Genji's double jump & wall climb":
    @Event eachPlayer
    @Team 1
    @Hero genji
    @Condition (eventPlayer.isInAir() or eventPlayer.isOnWall()) == true
    
    while (eventPlayer.isInAir() or eventPlayer.isOnWall()) == true:
        if eventPlayer.isOnWall() == true:
            #eventPlayer.setStatusEffect(null, Status.HACKED, 0.1)
            eventPlayer.applyImpulse(Vector.DOWN, 12, Relativity.TO_WORLD, Impulse.INCORPORATE_CONTRARY_MOTION)
            eventPlayer.disallowButton(Button.JUMP)
        wait(0.05)
        eventPlayer.allowButton(Button.JUMP)


rule "Remove Hanzo wall climb":
    @Event eachPlayer
    @Team 1
    @Hero hanzo
    @Condition eventPlayer.isOnWall() == true
    
    while eventPlayer.isOnWall() == true:
        eventPlayer.disallowButton(Button.JUMP)
        eventPlayer.setStatusEffect(null, Status.HACKED, 0.05)
        wait(0.05)
    eventPlayer.allowButton(Button.JUMP)


/*
rule "Bastion Ult form":
    @Event eachPlayer
    @Team 1
    @Hero bastion
    @Condition eventPlayer.isAlive() == true
    
    eventPlayer.setDamageDealt(0)
    eventPlayer.setUltCharge(100)
    wait(1)
    eventPlayer.forceButtonPress(Button.ULTIMATE)
*/

rule "Sombra translocator nerf":
    @Event eachPlayer
    @Team 1
    @Hero sombra
    @Condition eventPlayer.isUsingAbility2() == true
    
    wait(2, Wait.ABORT_WHEN_FALSE)
    eventPlayer.startForcingButton(Button.INTERACT)
    wait(1)
    eventPlayer.stopForcingButton(Button.INTERACT)


rule "Zenyatta ult nerf":
    @Event eachPlayer
    @Team 1
    @Hero zenyatta
    @Condition eventPlayer.isUsingUltimate() == true
    
    eventPlayer.setMoveSpeed(65)
    wait(6)
    eventPlayer.setMoveSpeed(100)


rule "Orisa increase speed while shooting":
    @Event eachPlayer
    @Team 1
    @Hero orisa
    @Condition eventPlayer.isFiringPrimaryFire() == true
    
    eventPlayer.setMoveSpeed(143)


rule "Orisa decrease speed while not shooting":
    @Event eachPlayer
    @Team 1
    @Hero orisa
    @Condition eventPlayer.isFiringPrimaryFire() == false
    
    eventPlayer.setMoveSpeed(100)


rule "Hider/Seeker damages itself heal":
    @Event playerTookDamage
    @Hero all
    @Condition attacker == eventPlayer
    
    heal(eventPlayer, null, 2000)


rule "Junkrat stun with his ultimate":
    @Event playerDealtDamage
    @Team 1
    @Hero junkrat
    @Condition eventPlayer.getCurrentHero() == Hero.JUNKRAT
    @Condition eventPlayer.isUsingUltimate() == true
    
    victim.setStatusEffect(null, Status.STUNNED, 2.87)


rule "Tracer knocked down ultimate ability":
    @Event playerDealtDamage
    @Team 1
    @Hero tracer
    @Condition teamHasHero(Hero.TRACER, Team.1) == attacker
    @Condition attacker.isUsingUltimate() == true
    
    victim.setStatusEffect(null, Status.KNOCKED_DOWN, 3.55)


rule "Roadhog hook speed buff":
    @Event eachPlayer
    @Team 1
    @Hero roadhog
    @Condition eventPlayer.isUsingAbility1() == true
    
    wait(0.25, Wait.RESTART_WHEN_TRUE)
    eventPlayer.setMoveSpeed(200)
    if RULE_CONDITION:
        goto RULE_START
    eventPlayer.setMoveSpeed(100)


rule "Mcree invincible dodge":
    @Event eachPlayer
    @Team 1
    @Hero mccree
    @Condition eventPlayer.isUsingAbility1() == true
    
    eventPlayer.setStatusEffect(null, Status.PHASED_OUT, 1.287)
    #eventPlayer.setInvisibility(Invis.ALL)
    eventPlayer.setMoveSpeed(128)
    wait(1.287)
    eventPlayer.setMoveSpeed(100)


rule "MCCREE HIGHNOON":
    @Event playerDealtDamage
    @Team 1
    @Hero mccree
    @Condition eventPlayer.getCurrentHero() == Hero.MCCREE
    @Condition eventPlayer.isUsingUltimate() == true
    
    eventPlayer.setStatusEffect(null, Status.PHASED_OUT, 1.557)


rule "Torb smiley damage":
    @Event playerDealtDamage
    @Team 1
    @Hero torbjorn
    
    createIcon(getPlayers(Team.1), victim, Icon.SAD, IconReeval.VISIBILITY_AND_POSITION, Color.ORANGE, true)
    eventPlayer.torb_smiley = getLastCreatedEntity()
    victim.setMoveSpeed(55)
    wait(1)
    victim.setMoveSpeed(100)
    destroyIcon(eventPlayer.torb_smiley)


rule "Torbjörn ONFIRE !":
    @Event eachPlayer
    @Team 1
    @Hero torbjorn
    @Condition Hero.TORBJORN == true
    @Condition eventPlayer.isUsingAbility2() == true
    
    eventPlayer.setStatusEffect(eventPlayer, Status.BURNING, 3)
    wait(0)
    return


rule "tracer ult on melee":
    @Event playerDealtDamage
    @Team 1
    @Hero tracer
    @Condition eventPlayer.isHoldingButton(Button.MELEE) == true
    @Condition eventPlayer.getUltCharge() == 100
    @Condition getPlayersInRadius(eventPlayer, 5, Team.2, LosCheck.OFF) == true
    
    eventPlayer.stopFacing()
    eventPlayer.startFacing(updateEveryTick(directionTowards(eventPlayer.getEyePosition(), getClosestPlayer(eventPlayer, Team.2).getEyePosition())), abs(9999999), Relativity.TO_WORLD, FacingReeval.DIRECTION_AND_TURN_RATE)
    #eventPlayer.startFacing(updateEveryTick(directionTowards(eventPlayer.getEyePosition(), getClosestPlayer(eventPlayer, Team.2).getEyePosition())), abs(9999999) + abs(9999999), Relativity.TO_WORLD, FacingReeval.DIRECTION_AND_TURN_RATE)
    #eventPlayer.startFacing(vectorTowards(eventPlayer.getEyePosition(), victim.getEyePosition() + worldVector(Vector.UP, victim, Transform.ROTATION) * -1 + worldVector(vect(victim.getSpeedInDirection(worldVector(Vector.LEFT, eventPlayer, Transform.ROTATION)) / abs(9999999) / 1, 0, 0), eventPlayer, Transform.ROTATION)), abs(9999999) + abs(9999999), Relativity.TO_WORLD, FacingReeval.DIRECTION_AND_TURN_RATE)
    wait(0.055)
    eventPlayer.forceButtonPress(Button.ULTIMATE)
    wait(0.287)
    eventPlayer.stopFacing()


rule "Winston trap effect":
    @Event eachPlayer
    @Team 1
    @Hero winston
    @Condition eventPlayer.isHoldingButton(Button.ABILITY_2) == true
    @Condition eventPlayer.isUsingAbility2() == true
    
    if shield_location[0] == vect(0, -287, 0):
        shield_location[0] = vect(eventPlayer.getPosition().x, nearestWalkablePosition(eventPlayer).y, eventPlayer.getPosition().z)
        createEffect(getAllPlayers(), Effect.SPHERE, Color.BLUE, shield_location[0], 5, EffectReeval.VISIBILITY_POSITION_AND_RADIUS)
        eventPlayer.winstonBubbleTAB[0] += getLastCreatedEntity()
        wait(9)
        destroyEffect(eventPlayer.winstonBubbleTAB[0])
        shield_location[0] = vect(0, -287, 0)
    else:
        shield_location[1] = vect(eventPlayer.getPosition().x, nearestWalkablePosition(eventPlayer).y, eventPlayer.getPosition().z)
        createEffect(getAllPlayers(), Effect.SPHERE, Color.BLUE, shield_location[1], 5, EffectReeval.VISIBILITY_POSITION_AND_RADIUS)
        eventPlayer.winstonBubbleTAB[1] += getLastCreatedEntity()
        wait(9)
        destroyEffect(eventPlayer.winstonBubbleTAB[1])
        shield_location[1] = vect(0, -287, 0)


rule "Winston trap debuff":
    @Event eachPlayer
    @Team 2
    @Hero all
    @Condition (eventPlayer in getPlayersInRadius(shield_location[0], 5, Team.ALL, LosCheck.OFF) or eventPlayer in getPlayersInRadius(shield_location[1], 5, Team.ALL, LosCheck.OFF)) == true
    @Condition shield_location != vect(0, -287, 0)
    
    while eventPlayer in getPlayersInRadius(shield_location[0], 5, Team.ALL, LosCheck.OFF) or eventPlayer in getPlayersInRadius(shield_location[1], 5, Team.ALL, LosCheck.OFF):
        eventPlayer.setMoveSpeed(10)
        eventPlayer.setGravity(300)
        wait(0.25)
    eventPlayer.setMoveSpeed(100)
    eventPlayer.setGravity(100)


rule "Echo Speed":
    @Event eachPlayer
    @Team 1
    @Hero echo
    @Condition eventPlayer.getCurrentHero() == Hero.ECHO
    @Condition eventPlayer.isUsingAbility1() == true
    @Condition Button.ABILITY_1 == true
    
    wait(0.75)
    eventPlayer.forceButtonPress(Button.ABILITY_1)
    eventPlayer.setStatusEffect(null, Status.HACKED, 0.557)


rule "Hanzo smiley damage":
    @Event playerDealtDamage
    @Team 1
    @Hero hanzo
    
    createIcon(getAllPlayers(), victim, Icon.HEART, IconReeval.VISIBILITY_AND_POSITION, Color.YELLOW, true)
    eventPlayer.Hanzo_smiley = getLastCreatedEntity()
    wait(1.728)
    destroyIcon(eventPlayer.Hanzo_smiley)


rule "genjiZW position sphere":
    @Event eachPlayer
    @Team 1
    @Hero genji
    @Condition eventPlayer.isUsingUltimate() == true
    
    destroyEffect(eventPlayer.genji_pos_sphere[8])
    eventPlayer.genji_player_sphere[3] = eventPlayer.getPosition()


rule "genjiZW Sphere":
    @Event eachPlayer
    @Team 1
    @Hero genji
    @Condition eventPlayer.genji_player_sphere[3] == true
    
    getPlayersInRadius(eventPlayer.genji_player_sphere[3], 10, Team.ALL, LosCheck.OFF).genji_allplayer_sphere = true
    createInWorldText(getAllPlayers(), "ZA WARUDO !", eventPlayer, 3, Clip.SURFACES, WorldTextReeval.VISIBILITY_POSITION_AND_STRING, Color.WHITE, SpecVisibility.DEFAULT)
    eventPlayer.genji_text_ZW = getLastCreatedText()
    createInWorldText(getAllPlayers(), "NANI ?!", getPlayersInRadius(eventPlayer, 10, Team.2, LosCheck.OFF), 3, Clip.SURFACES, WorldTextReeval.VISIBILITY_POSITION_AND_STRING, Color.WHITE, SpecVisibility.DEFAULT)
    eventPlayer.nani_text_genji_ZW = getLastCreatedText()
    wait()
    createEffect(null, Effect.SPHERE, Color.RED, eventPlayer.genji_player_sphere[3], 10, EffectReeval.NONE)
    eventPlayer.genji_tab_sphere[0] = getLastCreatedEntity()
    createInWorldText(null, "ZA WARUDO", eventPlayer.genji_player_sphere[3] + Vector.UP * 0.5, 1.5, Clip.NONE, WorldTextReeval.VISIBILITY_POSITION_AND_STRING, Color.WHITE, SpecVisibility.DEFAULT)
    eventPlayer.genji_tab_sphere[1] = getLastCreatedText()
    createIcon(null, eventPlayer.genji_player_sphere[3] + Vector.UP * 0.7, Icon.BOLT, IconReeval.VISIBILITY_AND_POSITION, Color.BLUE, false)
    eventPlayer.genji_tab_sphere[2] = getLastCreatedEntity()
    wait(3, Wait.ABORT_WHEN_FALSE)
    destroyEffect(eventPlayer.genji_tab_sphere[0])
    destroyInWorldText(eventPlayer.genji_tab_sphere[1])
    destroyIcon(eventPlayer.genji_tab_sphere[2])
    getAllPlayers().genji_allplayer_sphere = false
    eventPlayer.genji_player_sphere[3] = 0
    destroyInWorldText(eventPlayer.genji_text_ZW)
    destroyInWorldText(eventPlayer.nani_text_genji_ZW)


rule "genjiZW Trap effect":
    @Event eachPlayer
    @Hero all
    @Condition eventPlayer.genji_allplayer_sphere == true
    @Condition distance(eventPlayer, eventPlayer.genji_player_sphere[3]) >= 0
    
    #pauseMatchTime()
    eventPlayer.setGravity(0)
    eventPlayer.setProjectileSpeed(10)
    eventPlayer.setProjectileGravity(10)
    eventPlayer.setMoveSpeed(0)
    wait(0.055)
    if RULE_CONDITION:
        goto RULE_START
    #unpauseMatchTime()
    eventPlayer.setGravity(100)
    eventPlayer.setMoveSpeed(100)
    eventPlayer.setProjectileSpeed(100)
    eventPlayer.setProjectileGravity(100)


rule "genjiZW need a ennemy to ult":
    @Event eachPlayer
    @Team 1
    @Hero genji
    @Condition eventPlayer.getCurrentHero() == Hero.GENJI
    @Condition distance(eventPlayer, getClosestPlayer(eventPlayer, Team.2)) >= 10 == true
    
    eventPlayer.disallowButton(Button.ULTIMATE)
    wait(0.287)
    if RULE_CONDITION:
        goto RULE_START
    eventPlayer.allowButton(Button.ULTIMATE)


/*
rule "Hammond Hook":
    @Event eachPlayer
    @Team 1
    @Hero hammond
    @Condition eventPlayer.isFiringSecondaryFire() == true
    @Condition eventPlayer.isOnGround() == false
    @Condition eventPlayer.Hammond_varPgrap == null
    
    eventPlayer.brigvar1 = 0
    eventPlayer.Hammond_varPgrap = true
    chase(eventPlayer.brigvar1, 100, rate=10, ChaseReeval.DESTINATION_AND_RATE)
    wait(10)
    if eventPlayer.isFiringSecondaryFire() == false:
        goto lbl_0
    eventPlayer.setStatusEffect(null, Status.STUNNED, 0.001)
    smallMessage(eventPlayer, l"Stop")
    lbl_0:
    wait(0.25)
    eventPlayer.Hammond_varPgrap = null
*/

rule "Hammond TP on head":
    @Event eachPlayer
    @Team 1
    @Hero hammond
    @Condition eventPlayer.isUsingAbility2() == true
    
    eventPlayer.teleport(getClosestPlayer(eventPlayer, Team.2).getEyePosition() + vect(0, 2.1, 0))


rule "Hammond need a ennemy to TP":
    @Event eachPlayer
    @Team 1
    @Hero hammond
    @Condition eventPlayer.getCurrentHero() == Hero.HAMMOND
    @Condition distance(eventPlayer, getClosestPlayer(eventPlayer, Team.2)) >= 10 == true
    
    eventPlayer.disallowButton(Button.ABILITY_2)
    wait(0.055)
    if RULE_CONDITION:
        goto RULE_START
    eventPlayer.allowButton(Button.ABILITY_2)


rule "Hammond invincible PillDrive":
    @Event eachPlayer
    @Team 1
    @Hero hammond
    @Condition eventPlayer.isInAir() == true
    @Condition eventPlayer.isHoldingButton(Button.CROUCH) == true
    @Condition eventPlayer.getAltitude() >= 2
    
    eventPlayer.setStatusEffect(null, Status.INVINCIBLE, 1.8)
    eventPlayer.setInvisibility(Invis.ENEMIES)
    #createEffect(eventPlayer, Effect.SPARKLES, Color.WHITE, eventPlayer, 3, EffectReeval.VISIBILITY_POSITION_AND_RADIUS)
    eventPlayer.setMoveSpeed(130)
    wait(1.8)
    eventPlayer.setInvisibility(Invis.NONE)
    #destroyEffect(getLastCreatedEntity())
    eventPlayer.setMoveSpeed(100)
    wait(8.2)


rule "Reaper unPhase TP":
    @Event eachPlayer
    @Team 1
    @Hero reaper
    @Condition eventPlayer.isUsingAbility2() == true
    
    eventPlayer.setStatusEffect(null, Status.PHASED_OUT, 1.5)
    #eventPlayer.setInvisibility(Invis.ALL)
    eventPlayer.setMoveSpeed(128)
    wait(1.5)
    eventPlayer.setMoveSpeed(100)


rule "Reaper Shadowwraith nerf":
    @Event eachPlayer
    @Team 1
    @Hero reaper
    @Condition eventPlayer.isUsingAbility1() == true
    
    wait(1, Wait.ABORT_WHEN_FALSE)
    eventPlayer.forceButtonPress(Button.PRIMARY_FIRE)


rule "Reaper SpeedBoostUlt":
    @Event eachPlayer
    @Team 1
    @Hero reaper
    @Condition eventPlayer.isUsingUltimate() == true
    
    eventPlayer.setMoveSpeed(214)
    wait(3)
    eventPlayer.setMoveSpeed(100)


rule "Reaper IconDMG Ult":
    @Event playerDealtDamage
    @Team 1
    @Hero reaper
    @Condition eventPlayer.isUsingUltimate() == true
    
    createIcon(getAllPlayers(), victim, Icon.SKULL, IconReeval.VISIBILITY_AND_POSITION, Color.LIME_GREEN, true)
    eventPlayer.reaper_ultdmg_icon = getLastCreatedEntity()
    wait(3)
    destroyIcon(eventPlayer.reaper_ultdmg_icon)


rule "Moira purple sphere slow":
    @Event playerDealtDamage
    @Team 1
    @Hero moira
    @Condition eventPlayer.isHoldingButton(Button.MELEE) == false
    
    createIcon(getAllPlayers(), victim, Icon.POISON_2, IconReeval.VISIBILITY_AND_POSITION, Color.PURPLE, true)
    eventPlayer.Moira_icon_purplesphere = getLastCreatedEntity()
    victim.setMoveSpeed(55)
    wait(0.557)
    victim.setMoveSpeed(100)
    destroyIcon(eventPlayer.Moira_icon_purplesphere)


rule "Doomfist uppercut invincible":
    @Event eachPlayer
    @Team 1
    @Hero doomfist
    @Condition eventPlayer.isUsingAbility1() == true
    
    eventPlayer.setStatusEffect(null, Status.INVINCIBLE, 0.755)


rule "Doomfist choc invincible":
    @Event playerDealtDamage
    @Team 1
    @Hero doomfist
    @Condition eventPlayer.isUsingAbility2() == true
    
    eventPlayer.setStatusEffect(null, Status.INVINCIBLE, 0.755)


rule "Echo bomb slow":
    @Event playerDealtDamage
    @Team 1
    @Hero echo
    @Condition eventPlayer.isHoldingButton(Button.MELEE) == false
    
    createIcon(getAllPlayers(), victim, Icon.RECYCLE, IconReeval.VISIBILITY_AND_POSITION, Color.GREEN, true)
    eventPlayer.EchoSlowBomb = getLastCreatedEntity()
    victim.setMoveSpeed(55)
    wait(0.557)
    victim.setMoveSpeed(100)
    destroyIcon(eventPlayer.EchoSlowBomb)


rule "D.va rez by emote":
    @Event eachPlayer
    @Team 1
    @Hero dva
    @Condition getClosestPlayer(eventPlayer, Team.1).isAlive() == false
    @Condition eventPlayer.Rez_actif == true
    @Condition eventPlayer.isCommunicatingEmote() == true
    @Condition distance(eventPlayer, getClosestPlayer(eventPlayer, Team.1)) <= 2 == true
    
    getClosestPlayer(eventPlayer, Team.1).resurrect()
    wait(0.25)
    eventPlayer.Rez_actif = false
    destroyHudText(eventPlayer.dva_res_text_int)


/*
rule "D.va player die icon":
    @Event playerDied
    @Team 1
    @Hero all
    
    #eventPlayer.var_player_dead = eventPlayer.isDead()
    eventPlayer.var_player_dead = eventPlayer.getCurrentHero()
    #while eventPlayer.var_player_dead.isDead() == true:
    createInWorldText(getPlayersOnHero(Hero.DVA, Team.1), heroIcon(eventPlayer.var_player_dead), eventPlayer, 1, Clip.NONE, WorldTextReeval.VISIBILITY_POSITION_AND_STRING, Color.WHITE, SpecVisibility.DEFAULT)
    #__end__()
    eventPlayer.vartext_player_dead = getLastCreatedText()
*/

/*
rule "D.va player icon remove when alive":
    @Event eachPlayer
    @Team 1
    @Hero all
    @Condition eventPlayer.isAlive() == true
    
    destroyInWorldText(eventPlayer.vartext_player_dead)
    wait(0.25)
    if RULE_CONDITION:
        goto RULE_START
*/

rule "D.va interface RES (シ)":
    @Event eachPlayer
    @Team 1
    @Hero dva
    
    hudHeader(eventPlayer, "Res active ♥", HudPosition.LEFT, 0, Color.GREEN, HudReeval.VISIBILITY_AND_STRING, SpecVisibility.DEFAULT)
    eventPlayer.dva_res_text_int = getLastCreatedText()
    eventPlayer.Rez_actif = true


rule "D.va can't RES if solo seeker ¯\\_(ツ)_/¯":
    @Event eachPlayer
    @Team 1
    @Hero dva
    @Condition isGameInProgress() == true
    @Condition getNumberOfLivingPlayers(Team.2) < 2
    
    eventPlayer.Rez_actif = false
    destroyHudText(eventPlayer.dva_res_text_int)


rule "Junkrat remove third person when he ult":
    @Event eachPlayer
    @Team 1
    @Hero junkrat
    @Condition eventPlayer.isUsingUltimate() == true
    
    eventPlayer.stopCamera()


rule "Rein team2 one hit with firestrike // so mei wall":
    @Event eachPlayer
    @Team 2
    @Hero reinhardt
    @Condition eventPlayer.isUsingAbility2() == true
    
    eventPlayer.setDamageDealt(10000)
    wait(1)
    eventPlayer.setDamageDealt(100)


rule "Brigitte whip shot speed buff":
    @Event eachPlayer
    @Team 1
    @Hero brigitte
    @Condition eventPlayer.isUsingAbility1() == true
    
    wait(0.25, Wait.RESTART_WHEN_TRUE)
    eventPlayer.setMoveSpeed(200)
    if RULE_CONDITION:
        goto RULE_START
    eventPlayer.setMoveSpeed(100)


rule "Brigitte ult speed buff":
    @Event eachPlayer
    @Team 1
    @Hero brigitte
    @Condition eventPlayer.isUsingUltimate() == true
    
    eventPlayer.setStatusEffect(null, Status.HACKED, 10)
    eventPlayer.setMoveSpeed(114)
    wait(10)
    eventPlayer.setMoveSpeed(100)


rule "Brig whip jumpboost":
    @Event eachPlayer
    @Team 1
    @Hero brigitte
    @Condition eventPlayer.isUsingAbility1() == true
    
    wait(0.155)
    eventPlayer.brigvar1[0] = eventPlayer.getFacingDirection()
    eventPlayer.brigvar2[4] = raycast(eventPlayer.getEyePosition() + worldVector(vect(0.025, -0.02, 0), eventPlayer, Transform.ROTATION), eventPlayer.getEyePosition() + worldVector(vect(0.025, -0.02, 0), eventPlayer, Transform.ROTATION) + eventPlayer.getFacingDirection() * 100, null, getAllPlayers(), false).getHitPosition()
    eventPlayer.brigvar2[5] = raycast(eventPlayer.getEyePosition() + worldVector(vect(-0.025, -0.02, 0), eventPlayer, Transform.ROTATION), eventPlayer.getEyePosition() + worldVector(vect(-0.025, -0.02, 0), eventPlayer, Transform.ROTATION) + eventPlayer.getFacingDirection() * 100, null, getAllPlayers(), false).getHitPosition()
    eventPlayer.brigvar2[6] = raycast(eventPlayer.getEyePosition() + vect(0, -0.175, 0), eventPlayer.getEyePosition() + vect(0, -0.175, 0) + eventPlayer.getFacingDirection() * 100, null, getAllPlayers(), false).getHitPosition()
    eventPlayer.brigvar3[0] = distance(eventPlayer.getEyePosition(), eventPlayer.brigvar2[4])
    eventPlayer.brigvar3[1] = distance(eventPlayer.getEyePosition(), eventPlayer.brigvar2[5])
    eventPlayer.brigvar3[2] = distance(eventPlayer.getEyePosition(), eventPlayer.brigvar2[6])
    if sorted(eventPlayer.brigvar3) > 20.4:
        goto lbl_0
    #wait(eventPlayer.brigvar3[0] / 50 + 0)
    wait(0.028)
    lbl_0:
    eventPlayer.applyImpulse(eventPlayer.brigvar1[0], 24, Relativity.TO_WORLD, Impulse.CANCEL_CONTRARY_MOTION)


rule "#1 OrisaMount":
    @Event eachPlayer
    @Hero all
    @Condition eventPlayer.varOrisaKnight in getPlayers(eventPlayer.getTeam()) == true
    @Condition eventPlayer.getCurrentHero() != Hero.ORISA
    
    eventPlayer.attachTo(eventPlayer.varOrisaKnight, vect(0, 0.728, -0.828))
    wait(0.255)
    if RULE_CONDITION:
        goto RULE_START


rule "#2 OrisaMount - Activate":
    @Event eachPlayer
    @Hero all
    @Condition getClosestPlayer(eventPlayer, eventPlayer.getTeam()).getCurrentHero() == Hero.ORISA
    @Condition eventPlayer.isHoldingButton(Button.CROUCH) == true
    @Condition eventPlayer.varOrisaKnight == null
    @Condition eventPlayer.varOrisaMount == true
    @Condition getClosestPlayer(eventPlayer, eventPlayer.getTeam()).varOrisaKnight == null
    @Condition eventPlayer.getCurrentHero() != Hero.ORISA
    @Condition getClosestPlayer(eventPlayer, eventPlayer.getTeam()) in getPlayersInRadius(eventPlayer, 4, eventPlayer.getTeam(), LosCheck.OFF) == true
    @Condition getClosestPlayer(eventPlayer, eventPlayer.getTeam()).isAlive() == true
    
    eventPlayer.varOrisaKnight = null
    getClosestPlayer(eventPlayer, eventPlayer.getTeam()).varOrisaKnight = null
    smallMessage(eventPlayer, l"{0} {1}".format(l"{0} - {1}".format(l"Crouch", "Stop Riding"), getClosestPlayer(eventPlayer, eventPlayer.getTeam())))
    eventPlayer.varOrisaKnight = getClosestPlayer(eventPlayer, eventPlayer.getTeam())
    eventPlayer.varOrisaMount = false
    eventPlayer.setStatusEffect(null, Status.PHASED_OUT, 9999)
    getClosestPlayer(eventPlayer, eventPlayer.getTeam()).varOrisaKnight = eventPlayer
    if eventPlayer.getCurrentHero() == Hero.MEI or eventPlayer.getCurrentHero() == Hero.ZARYA:
        eventPlayer.disallowButton(Button.ABILITY_1)
    wait(1)
    eventPlayer.varOrisaMount = true


rule "#3 OrisaMount - Deactivate":
    @Event eachPlayer
    @Hero all
    @Condition eventPlayer.isHoldingButton(Button.CROUCH) == true
    @Condition eventPlayer.varOrisaKnight != null
    @Condition eventPlayer.varOrisaMount == true
    @Condition eventPlayer.getCurrentHero() != Hero.ORISA
    
    eventPlayer.varOrisaKnight.varOrisaKnight = null
    eventPlayer.varOrisaKnight = null
    eventPlayer.detach()
    eventPlayer.teleport(nearestWalkablePosition(getClosestPlayer(eventPlayer, Team.1).getPosition()))
    eventPlayer.varOrisaMount = false
    if eventPlayer.getCurrentHero() == Hero.MEI or eventPlayer.getCurrentHero() == Hero.ZARYA:
        eventPlayer.allowButton(Button.ABILITY_1)
    wait(0.557)
    eventPlayer.clearStatusEffect(Status.PHASED_OUT)
    wait(1)
    eventPlayer.varOrisaMount = true


rule "#4 OrisaMount - Initialize":
    @Event eachPlayer
    @Hero all
    @Condition eventPlayer.hasSpawned() == true
    
    eventPlayer.varOrisaKnight = null
    eventPlayer.varOrisaMount = true
    eventPlayer.detach()
    eventPlayer.varOrisaKnight = null
    if eventPlayer.getCurrentHero() == Hero.MEI or eventPlayer.getCurrentHero() == Hero.ZARYA:
        eventPlayer.allowButton(Button.ABILITY_1)
    wait(0.557)
    eventPlayer.clearStatusEffect(Status.PHASED_OUT)


rule "#5 OrisaMount - Kill Stack":
    @Event eachPlayer
    @Hero all
    @Condition (eventPlayer.varOrisaKnight in ([player for player in getPlayers(eventPlayer.getTeam()) if (player.isAlive() == true and player.hasSpawned() == true and player.getCurrentHero() == Hero.ORISA) == true])) != true
    @Condition eventPlayer.getCurrentHero() != Hero.ORISA
    
    eventPlayer.detach()
    eventPlayer.teleport(nearestWalkablePosition(getClosestPlayer(eventPlayer, Team.1).getPosition()))
    eventPlayer.varOrisaKnight.varOrisaKnight = null
    eventPlayer.varOrisaKnight = null
    if eventPlayer.getCurrentHero() == Hero.MEI or eventPlayer.getCurrentHero() == Hero.ZARYA:
        eventPlayer.allowButton(Button.ABILITY_1)
    wait(1.728)
    eventPlayer.clearStatusEffect(Status.PHASED_OUT)


rule "#6 OrisaMount - Clear the rider slot if the rider leaves":
    @Event eachPlayer
    @Hero all
    @Condition eventPlayer.varOrisaKnight in getPlayers(eventPlayer.getTeam()) != true
    
    eventPlayer.varOrisaKnight = null


rule "#7 OrisaMount - Message":
    @Event eachPlayer
    @Hero all
    @Condition getClosestPlayer(eventPlayer, eventPlayer.getTeam()).getCurrentHero() == Hero.ORISA
    @Condition eventPlayer.varOrisaKnight == null
    @Condition eventPlayer.varOrisaMount == true
    @Condition getClosestPlayer(eventPlayer, eventPlayer.getTeam()).varOrisaKnight == null
    @Condition eventPlayer.getCurrentHero() != Hero.ORISA
    @Condition getClosestPlayer(eventPlayer, eventPlayer.getTeam()) in getPlayersInRadius(eventPlayer, 4, eventPlayer.getTeam(), LosCheck.OFF) == true
    @Condition getClosestPlayer(eventPlayer, eventPlayer.getTeam()).isAlive() == true
    
    smallMessage(eventPlayer, l"{0} {1}".format(l"{0} - {1}".format(l"Crouch", "Ride"), getClosestPlayer(eventPlayer, eventPlayer.getTeam())))


rule "SIGMA TEAM 1 Rock Booster":
    @Event eachPlayer
    @Team 1
    @Hero sigma
    @Condition eventPlayer.isUsingAbility2() == true
    
    if eventPlayer.getVerticalFacingAngle() >= 28:
        wait(0.65)
        eventPlayer.applyImpulse(eventPlayer.getFacingDirection(), -22, Relativity.TO_WORLD, Impulse.CANCEL_CONTRARY_MOTION)


rule "SIGMA TEAM 2 Rock Booster":
    @Event eachPlayer
    @Team 2
    @Hero sigma
    @Condition eventPlayer.isUsingAbility2() == true
    
    if eventPlayer.getVerticalFacingAngle() >= 28:
        wait(0.65)
        eventPlayer.applyImpulse(eventPlayer.getFacingDirection(), -18, Relativity.TO_WORLD, Impulse.CANCEL_CONTRARY_MOTION)


rule "SIGMA HIDER // USING HIS ULT":
    @Event playerDealtDamage
    @Team 1
    @Hero sigma
    @Condition eventPlayer.isUsingUltimate() == true
    
    heal(victim, null, 2000)


rule "ANA Nade jumpboost":
    @Event eachPlayer
    @Team 1
    @Hero ana
    @Condition eventPlayer.isUsingAbility2() == true
    
    eventPlayer.applyImpulse(eventPlayer.getFacingDirection(), -14, Relativity.TO_WORLD, Impulse.CANCEL_CONTRARY_MOTION)


rule "ANA TP SleepDart":
    @Event playerDealtDamage
    @Team 1
    @Hero ana
    @Condition eventPlayer.isUsingAbility1() == true
    
    eventPlayer.teleport(victim)


rule "SOLDIER - 76 Force seeker to jump with his ult":
    @Event playerDealtDamage
    @Team 1
    @Hero soldier
    @Condition eventPlayer.isUsingUltimate() == true
    
    victim.forceButtonPress(Button.JUMP)
    victim.forceButtonPress(Button.JUMP)
    wait(0.055)
    victim.startForcingThrottle(0, 0, 1, 2, 1, 2)
    wait(0.055)
    victim.stopForcingThrottle()


rule "ZENYATTA || KUNG-FU MASTER":
    @Event playerDealtDamage
    @Team 1
    @Hero zenyatta
    @Condition eventPlayer.isHoldingButton(Button.MELEE) == true
    @Condition Button.MELEE == true
    
    victim.applyImpulse(eventPlayer.getFacingDirection(), 20, Relativity.TO_WORLD, Impulse.CANCEL_CONTRARY_MOTION)
    eventPlayer.setStatusEffect(null, Status.PHASED_OUT, 1.728)


rule "REAPER ULTIMATE through Walls":
    @Event eachPlayer
    @Team 1
    @Hero reaper
    @Condition eventPlayer.getCurrentHero() == Hero.REAPER
    @Condition eventPlayer.isUsingUltimate() == true
    @Condition eventPlayer.isMoving() == true
    
    wait(0.287, Wait.ABORT_WHEN_FALSE)
    while eventPlayer.isUsingUltimate() and eventPlayer.isMoving():
        if eventPlayer.getSpeed() < 7.55:
            if eventPlayer.isStanding():
                break
            eventPlayer.teleport(nearestWalkablePosition(eventPlayer.getPosition() + worldVector(eventPlayer.getThrottle(), eventPlayer, Transform.ROTATION)))
        wait(0.287)


rule "REAPER ULT BUMP":
    @Event playerDealtDamage
    @Team 1
    @Hero reaper
    @Condition eventPlayer.isUsingUltimate() == true
    
    victim.applyImpulse(eventPlayer.getFacingDirection(), 25.728, Relativity.TO_WORLD, Impulse.CANCEL_CONTRARY_MOTION)


rule "Rein Active":
    @Event eachPlayer
    @Team 1
    @Hero reinhardt
    @Condition eventPlayer.isUsingAbility1() == false
    @Condition eventPlayer.varRein1 == null
    @Condition eventPlayer.isHoldingButton(Button.SECONDARY_FIRE) == true
    @Condition eventPlayer.getCurrentHero() == Hero.REINHARDT
    
    eventPlayer.varRein1 = true
    eventPlayer.setInvisibility(Invis.ENEMIES)
    eventPlayer.disallowButton(Button.ABILITY_1)
    eventPlayer.setStatusEffect(null, Status.HACKED, 9999)
    wait(3)
    eventPlayer.disallowButton(Button.SECONDARY_FIRE)
    eventPlayer.setInvisibility(Invis.NONE)


rule "Rein Stop":
    @Event eachPlayer
    @Team 1
    @Hero reinhardt
    @Condition eventPlayer.getCurrentHero() == Hero.REINHARDT
    @Condition eventPlayer.isHoldingButton(Button.SECONDARY_FIRE) == false
    @Condition eventPlayer.varRein1 != null
    
    eventPlayer.disallowButton(Button.SECONDARY_FIRE)
    eventPlayer.setInvisibility(Invis.NONE)
    eventPlayer.Rein_Msg = 10
    eventPlayer.allowButton(Button.ABILITY_1)
    eventPlayer.clearStatusEffect(Status.HACKED)
    chase(eventPlayer.Rein_Msg, 0, rate=1, ChaseReeval.DESTINATION_AND_RATE)
    wait(10)
    #eventPlayer.Rein_Msg += iconString(Icon.HAPPY)
    eventPlayer.allowButton(Button.SECONDARY_FIRE)
    eventPlayer.varRein1 = null


rule "BaptisteFakeUltimate Indicator effect (front)":
    @Event eachPlayer
    @Team 1
    @Hero baptiste
    @Condition varDeploy_center == 0
    @Condition eventPlayer.getCurrentHero() == Hero.BAPTISTE
    @Condition eventPlayer.getUltCharge() == 100
    @Condition eventPlayer.isHoldingButton(Button.ULTIMATE) == true
    
    createBeam([i for i in eventPlayer if eventPlayer.varVisualize_front == true], Beam.GOOD, raycast(raycast(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + eventPlayer.getFacingDirection() * 35, eventPlayer, eventPlayer, true).getHitPosition(), raycast(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + eventPlayer.getFacingDirection() * 35, eventPlayer, eventPlayer, true).getHitPosition() - vect(0, 30, 0), eventPlayer, eventPlayer, true).getHitPosition() - vect(0, 1, 0) + worldVector(vect(4.5, 0, 0), eventPlayer, Transform.ROTATION), raycast(raycast(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + eventPlayer.getFacingDirection() * 35, getAllPlayers(), eventPlayer, true).getHitPosition(), raycast(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + eventPlayer.getFacingDirection() * 35, eventPlayer, eventPlayer, true).getHitPosition() - vect(0, 30, 0), eventPlayer, eventPlayer, true).getHitPosition() - vect(0, 1, 0) + worldVector(vect(-4.5, 0, 0), eventPlayer, Transform.ROTATION), Color.BLUE, EffectReeval.VISIBILITY_POSITION_AND_RADIUS)
    eventPlayer.varVisualFrontBapt.append(getLastCreatedEntity())
    createBeam([i for i in eventPlayer if eventPlayer.varVisualize_front == true], Beam.GOOD, raycast(raycast(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + eventPlayer.getFacingDirection() * 35, eventPlayer, eventPlayer, true).getHitPosition(), raycast(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + eventPlayer.getFacingDirection() * 35, eventPlayer, eventPlayer, true).getHitPosition() - vect(0, 30, 0), eventPlayer, eventPlayer, true).getHitPosition() - vect(0, 1, 0) + worldVector(vect(4.5, 0, 0), eventPlayer, Transform.ROTATION) + vect(0, 4.7, 0), raycast(raycast(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + eventPlayer.getFacingDirection() * 35, eventPlayer, eventPlayer, true).getHitPosition(), raycast(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + eventPlayer.getFacingDirection() * 35, getAllPlayers(), eventPlayer, true).getHitPosition() - vect(0, 30, 0), eventPlayer, eventPlayer, true).getHitPosition() + worldVector(vect(-4.5, 0, 0), eventPlayer, Transform.ROTATION) + vect(0, 3.7, 0), Color.BLUE, EffectReeval.VISIBILITY_POSITION_AND_RADIUS)
    eventPlayer.varVisualFrontBapt.append(getLastCreatedEntity())
    createBeam([i for i in eventPlayer if eventPlayer.varVisualize_front == true], Beam.GOOD, raycast(raycast(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + eventPlayer.getFacingDirection() * 35, eventPlayer, eventPlayer, true).getHitPosition(), raycast(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + eventPlayer.getFacingDirection() * 35, eventPlayer, eventPlayer, true).getHitPosition() - vect(0, 30, 0), eventPlayer, eventPlayer, true).getHitPosition() - vect(0, 1, 0) + worldVector(vect(4.5, 0, 0), eventPlayer, Transform.ROTATION), raycast(raycast(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + eventPlayer.getFacingDirection() * 35, getAllPlayers(), eventPlayer, true).getHitPosition(), raycast(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + eventPlayer.getFacingDirection() * 35, eventPlayer, eventPlayer, true).getHitPosition() - vect(0, 30, 0), eventPlayer, eventPlayer, true).getHitPosition() - vect(0, 1, 0) + worldVector(vect(4.5, 0, 0), eventPlayer, Transform.ROTATION) + vect(0.001, 4.7, 0.001), Color.BLUE, EffectReeval.VISIBILITY_POSITION_AND_RADIUS)
    eventPlayer.varVisualFrontBapt.append(getLastCreatedEntity())
    createBeam([i for i in eventPlayer if eventPlayer.varVisualize_front == true], Beam.GOOD, raycast(raycast(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + eventPlayer.getFacingDirection() * 35, eventPlayer, eventPlayer, true).getHitPosition(), raycast(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + eventPlayer.getFacingDirection() * 35, eventPlayer, eventPlayer, true).getHitPosition() - vect(0, 30, 0), eventPlayer, eventPlayer, true).getHitPosition() - vect(0, 1, 0) + worldVector(vect(-4.5, 0, 0), eventPlayer, Transform.ROTATION), raycast(raycast(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + eventPlayer.getFacingDirection() * 35, getAllPlayers(), eventPlayer, true).getHitPosition(), raycast(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + eventPlayer.getFacingDirection() * 35, eventPlayer, eventPlayer, true).getHitPosition() - vect(0, 30, 0), eventPlayer, eventPlayer, true).getHitPosition() - vect(0, 1, 0) + worldVector(vect(-4.5, 0, 0), eventPlayer, Transform.ROTATION) + vect(0.001, 4.7, 0.001), Color.BLUE, EffectReeval.VISIBILITY_POSITION_AND_RADIUS)
    eventPlayer.varVisualFrontBapt.append(getLastCreatedEntity())
    createBeam([i for i in eventPlayer if eventPlayer.varVisualize_front == true], Beam.GOOD, raycast(raycast(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + eventPlayer.getFacingDirection() * 35, eventPlayer, eventPlayer, true).getHitPosition(), raycast(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + eventPlayer.getFacingDirection() * 35, eventPlayer, eventPlayer, true).getHitPosition() - vect(0, 30, 0), eventPlayer, eventPlayer, true).getHitPosition() - vect(0, 1, 0) + worldVector(vect(-4.5, 0, 0), eventPlayer, Transform.ROTATION) + vect(0, 4.7, 0), raycast(raycast(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + eventPlayer.getFacingDirection() * 35, eventPlayer, eventPlayer, true).getHitPosition(), raycast(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + eventPlayer.getFacingDirection() * 35, getAllPlayers(), eventPlayer, true).getHitPosition() - vect(0, 30, 0), eventPlayer, eventPlayer, true).getHitPosition() + worldVector(vect(4.5, 0, 0), eventPlayer, Transform.ROTATION) + vect(0, -1, 0), Color.BLUE, EffectReeval.VISIBILITY_POSITION_AND_RADIUS)
    eventPlayer.varVisualFrontBapt.append(getLastCreatedEntity())
    createBeam([i for i in eventPlayer if eventPlayer.varVisualize_front == true], Beam.GOOD, raycast(raycast(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + eventPlayer.getFacingDirection() * 35, eventPlayer, eventPlayer, true).getHitPosition(), raycast(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + eventPlayer.getFacingDirection() * 35, eventPlayer, eventPlayer, true).getHitPosition() - vect(0, 30, 0), eventPlayer, eventPlayer, true).getHitPosition() - vect(0, 1, 0) + worldVector(vect(4.5, 0, 0), eventPlayer, Transform.ROTATION) + vect(0, 4.7, 0), raycast(raycast(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + eventPlayer.getFacingDirection() * 35, eventPlayer, eventPlayer, true).getHitPosition(), raycast(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + eventPlayer.getFacingDirection() * 35, getAllPlayers(), eventPlayer, true).getHitPosition() - vect(0, 30, 0), eventPlayer, eventPlayer, true).getHitPosition() + worldVector(vect(-4.5, 0, 0), eventPlayer, Transform.ROTATION) + vect(0, -1, 0), Color.BLUE, EffectReeval.VISIBILITY_POSITION_AND_RADIUS)
    eventPlayer.varVisualFrontBapt.append(getLastCreatedEntity())


/*
rule "BaptisteFakeUltimate Indicator effect (side)":
    @Event eachPlayer
    @Team 1
    @Hero baptiste
    @Condition varDeploy_center == 0
    @Condition eventPlayer.getCurrentHero() == Hero.BAPTISTE
    @Condition eventPlayer.getUltCharge() == 100
    @Condition eventPlayer.isHoldingButton(Button.ULTIMATE) == true
    
    createBeam([i for i in eventPlayer if eventPlayer.varVisualize_side == true], Beam.GOOD, raycast(raycast(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + eventPlayer.getFacingDirection() * 35, eventPlayer, eventPlayer, true).getHitPosition(), raycast(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + eventPlayer.getFacingDirection() * 35, eventPlayer, eventPlayer, true).getHitPosition() - vect(0, 30, 0), eventPlayer, eventPlayer, true).getHitPosition() - vect(0, 1, 0) + worldVector(vect(0, 0, -4.5), eventPlayer, Transform.ROTATION), raycast(raycast(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + eventPlayer.getFacingDirection() * 35, getAllPlayers(), eventPlayer, true).getHitPosition(), raycast(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + eventPlayer.getFacingDirection() * 35, eventPlayer, eventPlayer, true).getHitPosition() - vect(0, 30, 0), eventPlayer, eventPlayer, true).getHitPosition() - vect(0, 1, 0) + worldVector(vect(0, 0, 4.5), eventPlayer, Transform.ROTATION), Color.BLUE, EffectReeval.VISIBILITY_POSITION_AND_RADIUS)
    eventPlayer.varVisualSideBapt.append(getLastCreatedEntity())
    createBeam([i for i in eventPlayer if eventPlayer.varVisualize_side == true], Beam.GOOD, raycast(raycast(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + eventPlayer.getFacingDirection() * 35, eventPlayer, eventPlayer, true).getHitPosition(), raycast(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + eventPlayer.getFacingDirection() * 35, eventPlayer, eventPlayer, true).getHitPosition() - vect(0, 30, 0), eventPlayer, eventPlayer, true).getHitPosition() - vect(0, 1, 0) + worldVector(vect(0, 0, 4.5), eventPlayer, Transform.ROTATION) + vect(0, 4.7, 0), raycast(raycast(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + eventPlayer.getFacingDirection() * 35, eventPlayer, eventPlayer, true).getHitPosition(), raycast(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + eventPlayer.getFacingDirection() * 35, getAllPlayers(), eventPlayer, true).getHitPosition() - vect(0, 30, 0), eventPlayer, eventPlayer, true).getHitPosition() + worldVector(vect(0, 0, -4.5), eventPlayer, Transform.ROTATION) + vect(0, 3.7, 0), Color.BLUE, EffectReeval.VISIBILITY_POSITION_AND_RADIUS)
    eventPlayer.varVisualSideBapt.append(getLastCreatedEntity())
    createBeam([i for i in eventPlayer if eventPlayer.varVisualize_side == true], Beam.GOOD, raycast(raycast(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + eventPlayer.getFacingDirection() * 35, eventPlayer, eventPlayer, true).getHitPosition(), raycast(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + eventPlayer.getFacingDirection() * 35, eventPlayer, eventPlayer, true).getHitPosition() - vect(0, 30, 0), eventPlayer, eventPlayer, true).getHitPosition() - vect(0, 1, 0) + worldVector(vect(0, 0, 4.5), eventPlayer, Transform.ROTATION), raycast(raycast(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + eventPlayer.getFacingDirection() * 35, getAllPlayers(), eventPlayer, true).getHitPosition(), raycast(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + eventPlayer.getFacingDirection() * 35, eventPlayer, eventPlayer, true).getHitPosition() - vect(0, 30, 0), eventPlayer, eventPlayer, true).getHitPosition() - vect(0, 1, 0) + worldVector(vect(0, 0, 4.5), eventPlayer, Transform.ROTATION) + vect(0.001, 4.7, 0.001), Color.BLUE, EffectReeval.VISIBILITY_POSITION_AND_RADIUS)
    eventPlayer.varVisualSideBapt.append(getLastCreatedEntity())
    createBeam([i for i in eventPlayer if eventPlayer.varVisualize_side == true], Beam.GOOD, raycast(raycast(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + eventPlayer.getFacingDirection() * 35, eventPlayer, eventPlayer, true).getHitPosition(), raycast(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + eventPlayer.getFacingDirection() * 35, eventPlayer, eventPlayer, true).getHitPosition() - vect(0, 30, 0), eventPlayer, eventPlayer, true).getHitPosition() - vect(0, 1, 0) + worldVector(vect(0, 0, -4.5), eventPlayer, Transform.ROTATION), raycast(raycast(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + eventPlayer.getFacingDirection() * 35, getAllPlayers(), eventPlayer, true).getHitPosition(), raycast(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + eventPlayer.getFacingDirection() * 35, eventPlayer, eventPlayer, true).getHitPosition() - vect(0, 30, 0), eventPlayer, eventPlayer, true).getHitPosition() - vect(0, 1, 0) + worldVector(vect(0, 0, -4.5), eventPlayer, Transform.ROTATION) + vect(0.001, 4.7, 0.001), Color.BLUE, EffectReeval.VISIBILITY_POSITION_AND_RADIUS)
    eventPlayer.varVisualSideBapt.append(getLastCreatedEntity())
*/

rule "BaptisteFakeUltimate Matrix effect (fixed location)":
    @Event eachPlayer
    @Team 1
    @Hero baptiste
    @Condition varDeploy_center == 0
    @Condition eventPlayer.getCurrentHero() == Hero.BAPTISTE
    @Condition eventPlayer.getUltCharge() == 100
    @Condition eventPlayer.isHoldingButton(Button.ULTIMATE) == true
    
    createBeam(getAllPlayers(), Beam.BAD, eventPlayer.varDeploy_pos[0], eventPlayer.varDeploy_pos[1], Color.RED, EffectReeval.VISIBILITY_POSITION_AND_RADIUS)
    eventPlayer.varVisualWallEffectBapt.append(getLastCreatedEntity())
    createBeam(getAllPlayers(), Beam.BAD, eventPlayer.varDeploy_pos[1], eventPlayer.varDeploy_pos[2], Color.RED, EffectReeval.VISIBILITY_POSITION_AND_RADIUS)
    eventPlayer.varVisualWallEffectBapt.append(getLastCreatedEntity())
    createBeam(getAllPlayers(), Beam.BAD, eventPlayer.varDeploy_pos[2], eventPlayer.varDeploy_pos[3], Color.RED, EffectReeval.VISIBILITY_POSITION_AND_RADIUS)
    eventPlayer.varVisualWallEffectBapt.append(getLastCreatedEntity())
    createBeam(getAllPlayers(), Beam.BAD, eventPlayer.varDeploy_pos[3], eventPlayer.varDeploy_pos[0], Color.RED, EffectReeval.VISIBILITY_POSITION_AND_RADIUS)
    eventPlayer.varVisualWallEffectBapt.append(getLastCreatedEntity())
    createBeam(getAllPlayers(), Beam.BAD, eventPlayer.varDeploy_pos[2], eventPlayer.varDeploy_pos[0], Color.RED, EffectReeval.VISIBILITY_POSITION_AND_RADIUS)
    eventPlayer.varVisualWallEffectBapt.append(getLastCreatedEntity())
    createBeam(getAllPlayers(), Beam.BAD, eventPlayer.varDeploy_pos[1], eventPlayer.varDeploy_pos[3], Color.RED, EffectReeval.VISIBILITY_POSITION_AND_RADIUS)
    eventPlayer.varVisualWallEffectBapt.append(getLastCreatedEntity())


rule "BaptisteFakeUltimate Visualize indicator":
    @Event eachPlayer
    @Team 1
    @Hero baptiste
    @Condition varDeploy_center == 0
    @Condition eventPlayer.getCurrentHero() == Hero.BAPTISTE
    @Condition eventPlayer.getUltCharge() == 100
    @Condition eventPlayer.isHoldingButton(Button.ULTIMATE) == true
    
    /*if eventPlayer.varVisualize_front == true:
        goto lbl_0*/
    eventPlayer.varVisualize_front = true
    #eventPlayer.varVisualize_side = false
    #return
    lbl_0:
    /*if eventPlayer.varVisualize_side == true:
        goto lbl_1*/
    #eventPlayer.varVisualize_side = true
    #eventPlayer.varVisualize_front = false
    #return
    lbl_1:


rule "BaptisteFakeUltimate Cancel indicator":
    @Event eachPlayer
    @Team 1
    @Hero baptiste
    @Condition varDeploy_center == 0
    @Condition eventPlayer.getCurrentHero() == Hero.BAPTISTE
    @Condition eventPlayer.isHoldingButton(Button.SECONDARY_FIRE) == true
    #@Condition eventPlayer.varVisualFrontBapt == true == true
    @Condition (eventPlayer.varVisualize_front == true or eventPlayer.varVisualize_side == true) == true
    
    #eventPlayer.varVisualize_side = false
    eventPlayer.varVisualize_front = false
    subRemoveEveryEffectBapt()
    wait(0.155)


rule "BaptisteFakeUltimate Deploy matrix":
    @Event eachPlayer
    @Team 1
    @Hero baptiste
    @Condition varDeploy_center == 0
    @Condition (eventPlayer.varVisualize_front == true or eventPlayer.varVisualize_side == true) == true
    @Condition eventPlayer.isHoldingButton(Button.PRIMARY_FIRE) == true
    #@Condition eventPlayer.varVisualFrontBapt == true == true
    
    chase(eventPlayer.varDuration, 10, rate=1, ChaseReeval.NONE)
    eventPlayer.setUltCharge(0)
    varDeploy_center = raycast(raycast(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + eventPlayer.getFacingDirection() * 35, getAllPlayers(), eventPlayer, true).getHitPosition(), raycast(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + eventPlayer.getFacingDirection() * 35, getAllPlayers(), eventPlayer, true).getHitPosition() - vect(0, 30, 0), getAllPlayers(), eventPlayer, true).getHitPosition()
    playEffect(getAllPlayers(), DynamicEffect.BUFF_EXPLOSION_SOUND, Color.SKY_BLUE, varDeploy_center, 50)
    playEffect(getAllPlayers(), DynamicEffect.GOOD_PICKUP_EFFECT, Color.SKY_BLUE, varDeploy_center, 14)
    playEffect(getAllPlayers(), DynamicEffect.RING_EXPLOSION, Color.SKY_BLUE, varDeploy_center, 14)
    if eventPlayer.varVisualize_front != true:
        goto lbl_0
    eventPlayer.varVisualize_front = false
    eventPlayer.varDeploy_pos[0] = varDeploy_center + vect(0, -1, 0) + worldVector(vect(4.5, 0, 0), eventPlayer, Transform.ROTATION)
    eventPlayer.varDeploy_pos[1] = varDeploy_center + vect(0, -1, 0) + worldVector(vect(-4.5, 0, 0), eventPlayer, Transform.ROTATION)
    eventPlayer.varDeploy_pos[2] = varDeploy_center + vect(0.001, 3.8, 0.001) + worldVector(vect(-4.5, 0, 0), eventPlayer, Transform.ROTATION)
    eventPlayer.varDeploy_pos[3] = varDeploy_center + vect(0.001, 3.8, 0.001) + worldVector(vect(4.5, 0, 0), eventPlayer, Transform.ROTATION)
    wait(0.25)
    return
    /*if eventPlayer.varVisualize_side != true:
        goto lbl_1*/
    #eventPlayer.varVisualize_side = false
    #eventPlayer.varDeploy_pos[0] = varDeploy_center + vect(0, -1, 0) + worldVector(vect(0, 0, 4.5), eventPlayer, Transform.ROTATION)
    lbl_0:
    #eventPlayer.varDeploy_pos[1] = varDeploy_center + vect(0, -1, 0) + worldVector(vect(0, 0, -4.5), eventPlayer, Transform.ROTATION)
    #eventPlayer.varDeploy_pos[2] = varDeploy_center + vect(0.001, 3.8, 0.001) + worldVector(vect(0, 0, -4.5), eventPlayer, Transform.ROTATION)
    #eventPlayer.varDeploy_pos[3] = varDeploy_center + vect(0.001, 3.8, 0.001) + worldVector(vect(0, 0, 4.5), eventPlayer, Transform.ROTATION)
    #wait(0.25)
    #return
    lbl_1:


rule "BaptisteFakeUltimate Check If touch the center":
    @Event eachPlayer
    @Team 2
    @Hero all
    @Condition varDeploy_center != 0
    @Condition distance(varDeploy_center, eventPlayer) <= 4.5
    
    eventPlayer.applyImpulse(directionTowards(varDeploy_center, eventPlayer), 18, Relativity.TO_WORLD, Impulse.CANCEL_CONTRARY_MOTION)
    eventPlayer.applyImpulse(Vector.UP, 10, Relativity.TO_WORLD, Impulse.INCORPORATE_CONTRARY_MOTION)


rule "BaptisteFakeUltimate Duration end":
    @Event eachPlayer
    @Team 1
    @Hero baptiste
    @Condition eventPlayer.varDuration == 10
    
    stopChasingVariable(eventPlayer.varDuration)
    eventPlayer.varDuration = 0
    eventPlayer.varDeploy_pos = 0
    playEffect(getAllPlayers(), DynamicEffect.DEBUFF_IMPACT_SOUND, Color.SKY_BLUE, varDeploy_center, 50)
    playEffect(getAllPlayers(), DynamicEffect.BAD_EXPLOSION, Color.SKY_BLUE, varDeploy_center, 14)
    playEffect(getAllPlayers(), DynamicEffect.BUFF_EXPLOSION_SOUND, Color.SKY_BLUE, varDeploy_center, 14)
    subRemoveEveryEffectBapt()
    varDeploy_center = 0


rule "BaptisteFakeUltimate Limit 1":
    @Event eachPlayer
    @Team 1
    @Hero baptiste
    @Condition varDeploy_center != 0
    
    eventPlayer.disallowButton(Button.ULTIMATE)
    wait(0.287)
    if RULE_CONDITION:
        goto RULE_START
    eventPlayer.allowButton(Button.ULTIMATE)


def subRemoveVisualFrontBapt():
    @Name "BaptisteFakeUltimate SubRemoveFrontEffect"
    
    while eventPlayer.varVisualFrontBapt != []:
        destroyEffect(eventPlayer.varVisualFrontBapt[0])
        del eventPlayer.varVisualFrontBapt[0]


/*
def subRemoveVisualSideBapt():
    @Name "BaptisteFakeUltimate SubRemoveSideEffect"
    
    while eventPlayer.varVisualSideBapt != []:
        destroyEffect(eventPlayer.varVisualSideBapt[0])
        del eventPlayer.varVisualSideBapt[0]
*/

/*
def subRemoveVisualWallEffectBapt():
    @Name "BaptisteFakeUltimate SubRemoveWallEffect"
    
    while eventPlayer.varVisualWallEffectBapt != []:
        destroyEffect(eventPlayer.varVisualWallEffectBapt[0])
        del eventPlayer.varVisualWallEffectBapt[0]
*/

def subRemoveEveryEffectBapt():
    @Name "BaptisteFakeUltimate SubRemoveEveryEffect"
    
    subRemoveVisualFrontBapt()
    #subRemoveVisualSideBapt()
    #subRemoveVisualWallEffectBapt()


rule "MEI - FREEZE WITH HER SHIFT":
    @Event eachPlayer
    @Team 1
    @Hero mei
    @Condition ((eventPlayer.isHoldingButton(Button.PRIMARY_FIRE) or eventPlayer.isHoldingButton(Button.SECONDARY_FIRE)) and eventPlayer.isUsingAbility1()) == true
    
    getPlayersInRadius(eventPlayer, 5, Team.2, LosCheck.OFF).setStatusEffect(null, Status.FROZEN, 0.828)


rule "WIDOW - HEADSHOT KNOCKDOWN SEEKER [CD 5s]":
    @Event playerDealtDamage
    @Team 1
    @Hero widowmaker
    @Condition eventPlayer.getCurrentHero() == Hero.WIDOWMAKER
    @Condition eventPlayer.varWidowHS == null
    @Condition (eventPlayer.isHoldingButton(Button.SECONDARY_FIRE) and eventPlayer.isHoldingButton(Button.PRIMARY_FIRE)) == true
    @Condition eventWasCriticalHit == true
    
    eventPlayer.varWidowHS = true
    victim.setStatusEffect(null, Status.KNOCKED_DOWN, 2.287)
    eventPlayer.varWidowHSmsg = 5
    chase(eventPlayer.varWidowHSmsg, 0, rate=1, ChaseReeval.DESTINATION_AND_RATE)
    wait(5)
    eventPlayer.varWidowHS = null


rule "Nerf Mercy":
    @Event eachPlayer
    @Team 1
    @Hero mercy
    @Condition eventPlayer.getCurrentHero() == Hero.MERCY
    @Condition eventPlayer.isUsingAbility1() == true
    
    if eventPlayer.isUsingAbility1():
        eventPlayer.disallowButton(Button.JUMP)
        wait(0.728)
    elif eventPlayer.isOnGround() == true:
        eventPlayer.allowButton(Button.JUMP)
    eventPlayer.allowButton(Button.JUMP)


rule "Mercy can't RES if solo seeker（ ´_⊃｀）":
    @Event eachPlayer
    @Team 1
    @Hero mercy
    @Condition isGameInProgress() == true
    @Condition eventPlayer.getCurrentHero() == Hero.MERCY
    @Condition getNumberOfLivingPlayers(Team.2) < 2
    
    eventPlayer.disallowButton(Button.ABILITY_2)
    wait(0.287)
    if RULE_CONDITION:
        goto RULE_START
    eventPlayer.allowButton(Button.ABILITY_2)


rule "Bastion speed heal":
    @Event eachPlayer
    @Team 1
    @Hero bastion
    @Condition eventPlayer.isHoldingButton(Button.SECONDARY_FIRE) == true
    
    damage(eventPlayer, null, 0.001)


rule "Bastion speed heal #bis":
    @Event playerDealtHealing
    @Team 1
    @Hero bastion
    @Condition eventPlayer.isHoldingButton(Button.SECONDARY_FIRE) == true
    
    damage(eventPlayer, null, 1)
    eventPlayer.setMoveSpeed(128.557)
    wait(0.055)
    eventPlayer.setMoveSpeed(100)


rule "BASTION Lego size":
    @Event eachPlayer
    @Team 1
    @Hero bastion
    @Condition eventPlayer.isUsingUltimate() == true
    
    eventPlayer.startScalingSize(0.557, true)
    wait(15)
    eventPlayer.stopScalingSize()
    eventPlayer.setStatusEffect(null, Status.PHASED_OUT, 2)


rule "GENJI INSTANT REMOVE DEFLECT":
    @Event eachPlayer
    @Team 1
    @Hero genji
    @Condition eventPlayer.isUsingAbility2() == true
    
    wait(0.287)
    eventPlayer.forceButtonPress(Button.ABILITY_2)


/*
rule "──────────────────────────┤T-Bag, Punch + Kill├─────────────────────────":
    @Event eachPlayer
    @Hero all
    
*/

rule "Tbag Reward":
    @Event eachPlayer
    @Hero all
    @Condition eventPlayer.isCrouching() == true
    @Condition getPlayersInRadius(eventPlayer, 3, Team.2, LosCheck.OFF).hasStatusEffect(Status.ASLEEP) == true
    
    playEffect(getAllPlayers(), DynamicEffect.BUFF_IMPACT_SOUND, Color.LIME_GREEN, eventPlayer, 120)
    playEffect(getAllPlayers(), DynamicEffect.RING_EXPLOSION, Color.LIME_GREEN, eventPlayer, 5)
    if eventPlayer.tbag_flag == true:
        smallMessage(getAllPlayers(), "OOF! {0} tbagged {1}".format(eventPlayer, getPlayersInRadius(eventPlayer, 3, Team.2, LosCheck.OFF)))
        eventPlayer.tbag_flag = false


rule "Tbag Flag":
    @Event eachPlayer
    @Team 2
    @Hero all
    @Condition eventPlayer.hasStatusEffect(Status.ASLEEP) == true
    
    getLivingPlayers(Team.1).tbag_flag = true


rule "Punch Reward":
    @Event playerDealtDamage
    @Team 1
    @Hero all
    @Condition eventPlayer.getCurrentHero() != Hero.ZENYATTA
    @Condition eventPlayer.isHoldingButton(Button.MELEE) == true
    @Condition victim.getTeam() == Team.2
    @Condition eventPlayer.isFiringPrimaryFire() == false
    @Condition eventPlayer.isFiringSecondaryFire() == false
    @Condition eventPlayer.isUsingAbility1() == false
    @Condition eventPlayer.isUsingAbility2() == false
    @Condition victim.hasStatusEffect(Status.BURNING) == false
    @Condition distance(eventPlayer, victim) <= 3.5
    
    playEffect(getAllPlayers(), DynamicEffect.BUFF_IMPACT_SOUND, Color.RED, victim, 120)
    playEffect(getAllPlayers(), DynamicEffect.RING_EXPLOSION, Color.RED, victim, 5)
    victim.setStatusEffect(null, Status.BURNING, 0.5)
    eventPlayer.rng_punch_message = random.randint(1, 10)
    customStringPicker()


def customStringPicker():
    @Name "customStringPicker()"
    
    if eventPlayer.rng_punch_message == 1:
        smallMessage(getAllPlayers(), "{0} gave {1} a kiss".format(eventPlayer, victim))
    elif eventPlayer.rng_punch_message == 2:
        smallMessage(getAllPlayers(), "{0} is flexing on {1}".format(eventPlayer, victim))
    elif eventPlayer.rng_punch_message == 3:
        smallMessage(getAllPlayers(), "{0} tickled {1}".format(eventPlayer, victim))
    elif eventPlayer.rng_punch_message == 4:
        smallMessage(getAllPlayers(), "{0} thinks {1} is easy".format(eventPlayer, victim))
    elif eventPlayer.rng_punch_message == 5:
        smallMessage(getAllPlayers(), "{0} gave {1} corona".format(eventPlayer, victim))
    elif eventPlayer.rng_punch_message == 6:
        smallMessage(getAllPlayers(), "{0} asked {1} on a date".format(eventPlayer, victim))
    elif eventPlayer.rng_punch_message == 7:
        smallMessage(getAllPlayers(), "{0} gifted {1} some chocolate!".format(eventPlayer, victim))
    elif eventPlayer.rng_punch_message == 8:
        smallMessage(getAllPlayers(), "{0} is too fast for {1}".format(eventPlayer, victim))
    elif eventPlayer.rng_punch_message == 9:
        smallMessage(getAllPlayers(), "{0} licked {1}".format(eventPlayer, victim))
    elif eventPlayer.rng_punch_message == 10:
        smallMessage(getAllPlayers(), "{1} can't deal with {0}".format(eventPlayer, victim))


rule "ZENYATTA Kick Reward":
    @Event playerDealtDamage
    @Team 1
    @Hero zenyatta
    @Condition eventPlayer.isHoldingButton(Button.MELEE) == true
    @Condition victim.getTeam() == Team.2
    @Condition eventPlayer.isFiringPrimaryFire() == false
    @Condition eventPlayer.isFiringSecondaryFire() == false
    @Condition eventPlayer.isUsingAbility1() == false
    @Condition eventPlayer.isUsingAbility2() == false
    @Condition victim.hasStatusEffect(Status.BURNING) == false
    @Condition distance(eventPlayer, victim) <= 3.5
    
    playEffect(getAllPlayers(), DynamicEffect.BUFF_IMPACT_SOUND, Color.RED, victim, 120)
    playEffect(getAllPlayers(), DynamicEffect.RING_EXPLOSION, Color.RED, victim, 5)
    victim.setStatusEffect(null, Status.BURNING, 0.5)
    eventPlayer.varKickMsgZen = random.randint(1, 6)
    zenKickRNGMSG()


def zenKickRNGMSG():
    @Name "ZENYATTA Kick RandomMSG"
    
    if eventPlayer.varKickMsgZen == 1:
        smallMessage(getAllPlayers(), "笨蛋 {1} !".format(eventPlayer, victim))
    elif eventPlayer.varKickMsgZen == 2:
        smallMessage(getAllPlayers(), "白痴 {1} !".format(eventPlayer, victim))
    elif eventPlayer.varKickMsgZen == 3:
        smallMessage(getAllPlayers(), "你算老几 {1} !？".format(eventPlayer, victim))
    elif eventPlayer.varKickMsgZen == 4:
        smallMessage(getAllPlayers(), "蠢猪 {1} !".format(eventPlayer, victim))
    elif eventPlayer.varKickMsgZen == 5:
        smallMessage(getAllPlayers(), "{0} screamed like ShivaLee {2} on {1} !".format(eventPlayer, victim, heroIcon(Hero.ZARYA)))
    elif eventPlayer.varKickMsgZen == 6:
        smallMessage(getAllPlayers(), "{0} made a move like BayChan {2} on {1} !".format(eventPlayer, victim, heroIcon(Hero.MEI)))


rule "Runner Killed Seeker Reward":
    @Event playerEarnedElimination
    @Team 1
    @Hero all
    
    for eventPlayer.kill_hider_loop in range(30):
        playEffect(getAllPlayers(), DynamicEffect.RING_EXPLOSION, Color.GREEN, eventPlayer, 1)
        wait(0.1)
        playEffect(getAllPlayers(), DynamicEffect.BAD_EXPLOSION, Color.PURPLE, eventPlayer, 1)
        playEffect(getAllPlayers(), DynamicEffect.BUFF_IMPACT_SOUND, Color.RED, eventPlayer, 40)


/*
rule "───────────────────────────┤MAPS STUFF├───────────────────────────":
*/

rule "Initial map check":
    #Run the map setup Subroutines
    mapCheck()


def mapCheck():
    @Name "Map Check Subroutine"
    
    #This giant if/else if/else logic statement helps optimize the load by testing for each map and then running the respective subroutine for the map.
    if getCurrentMap() == Map.OASIS_CITY_CENTER:
        mapSetupOasisCity()
    elif getCurrentMap() == Map.CASTILLO:
        mapSetupCastillo()
    elif getCurrentMap() == Map.OASIS_GARDENS:
        mapSetupOasisGarden()
        #OR statement is present because two maps
    elif getCurrentMap() == Map.BLACK_FOREST or getCurrentMap() == Map.BLACK_FOREST_WINTER:
        mapSetupBlackForest()
        #OR statement is present because two maps
    elif getCurrentMap() == Map.WORKSHOP_ISLAND or getCurrentMap() == Map.WORKSHOP_ISLAND_NIGHT:
        mapSetupIsland()
        #OR statement is present because two maps
    elif getCurrentMap() == Map.LIJIANG_CONTROL_CENTER or getCurrentMap() == Map.LIJIANG_CONTROL_CENTER_LNY:
        mapSetupLijiangControl()
        #OR statement is present because two maps
    elif getCurrentMap() == Map.LIJIANG_GARDEN or getCurrentMap() == Map.LIJIANG_GARDEN_LNY:
        mapSetupLijiangGarden()
    elif getCurrentMap() == Map.OASIS_UNIVERSITY:
        mapSetupOasisUniversity()
    elif getCurrentMap() == Map.ILIOS_RUINS:
        mapSetupIliosRuins()
    elif getCurrentMap() == Map.WORKSHOP_CHAMBER:
        mapSetupWorkshopRoom()
    elif getCurrentMap() == Map.NEPAL_SHRINE:
        mapSetupNepalShrine()
    elif getCurrentMap() == Map.NEPAL_VILLAGE:
        mapSetupNepalVillage()
    elif getCurrentMap() == Map.NEPAL_SANCTUM:
        mapSetupNepalSanctuary()
    elif getCurrentMap() == Map.NECROPOLIS:
        mapSetupNecropolis()
    elif getCurrentMap() == Map.ILIOS_LIGHTHOUSE:
        mapSetupIliosLightHouse()
    elif getCurrentMap() == Map.ILIOS_WELL:
        mapSetupIliosWell()
    elif getCurrentMap() == Map.AYUTTHAYA:
        mapSetupAyutthaya()
        #OR statement is present because two maps
    elif getCurrentMap() == Map.LIJIANG_NIGHT_MARKET or getCurrentMap() == Map.LIJIANG_NIGHT_MARKET_LNY:
        mapSetupLijangMarket()
        mapSetupLijangMarket2()
        #OR statement is present because two maps
    elif getCurrentMap() == Map.ECOPOINT_ANTARCTICA or getCurrentMap() == Map.ECOPOINT_ANTARCTICA_WINTER:
        mapSetupEcolab()
        #This is in case the map is either Workshop Expanse or an unofficially selected map.
        #else:
        #OR statement is present because two maps
    elif getCurrentMap() == Map.WORKSHOP_EXPANSE or getCurrentMap() == Map.WORKSHOP_EXPANSE_NIGHT:
        mapSetupExpan()
    arenaSetup()


def mapSetupLijangMarket():
    @Name "Map Setup (LijangMarket) Subroutine"
    
    #X-axis front side of arena.
    xPositive1 = 48
    #X-axis back side of arena.
    xNegative1 = 31.5
    #Y-axis front side of arena.
    yPositive1 = 32
    #Y-axis back side of arena.
    yNegative1 = 25.557
    #Z-axis front side of arena.
    zPositive1 = -13.55
    #Z-axis back side of arena.
    zNegative1 = -16
    yBlockFreeze_1 = 26.55
    yBlockFreeze_2 = 29.4
    zBlockFreeze = -14.162
    varPosSpawnAreaNX = (vect(-88.557, 0, 0)).x
    varPosSpawnAreaPX = vect(89.557, 0, 0).x
    varPosSpawnAreaNZ = (vect(0, 0, -100)).z
    varPosSpawnAreaPZ = vect(0, 0, 100).z
    varSigmaAntiKamikazeN_Y = (vect(0, -11, 0)).y
    varSigmaAntiKamikazePos_Y = vect(0, 287, 0).y


def mapSetupLijangMarket2():
    @Name "Map Setup (LijangMarket2) Subroutine"
    
    #X-axis front side of arena.
    xPositive2 = -46
    #X-axis back side of arena.
    xNegative2 = -29.5
    #Y-axis front side of arena.
    yPositive2 = 32
    #Y-axis back side of arena.
    yNegative2 = 25.557
    #Z-axis front side of arena.
    zPositive2 = -13.55
    #Z-axis back side of arena.
    zNegative2 = -16
    yBlockFreeze_1 = 26.55
    yBlockFreeze_2 = 29.557
    zBlockFreeze = -14.162


def mapSetupAyutthaya():
    @Name "Map Setup (Ayutthaya) Subroutine"
    
    varPosSpawnAreaNX = (vect(-55, 0, 0)).x
    varPosSpawnAreaPX = vect(55, 0, 0).x
    varPosSpawnAreaNZ = (vect(0, 0, -77.557)).z
    varPosSpawnAreaPZ = vect(0, 0, 64.557).z
    varSigmaAntiKamikazeN_Y = (vect(0, -4, 0)).y
    varSigmaAntiKamikazePos_Y = vect(0, 287, 0).y


def mapSetupCastillo():
    @Name "Map Setup (Castillo) Subroutine"
    
    varPosSpawnAreaNX = (vect(-557, 0, 0)).x
    varPosSpawnAreaPX = vect(557, 0, 0).x
    varPosSpawnAreaNZ = (vect(0, 0, -557)).z
    varPosSpawnAreaPZ = vect(0, 0, 557).z
    varSigmaAntiKamikazeN_Y = vect(0, 27, 0).y
    varSigmaAntiKamikazePos_Y = vect(0, 287, 0).y


def mapSetupEcolab():
    @Name "Map Setup (Ecolab) Subroutine"
    
    varPosSpawnAreaNX = (vect(-557, 0, 0)).x
    varPosSpawnAreaPX = vect(557, 0, 0).x
    varPosSpawnAreaNZ = (vect(0, 0, -557)).z
    varPosSpawnAreaPZ = vect(0, 0, 557).z
    varSigmaAntiKamikazeN_Y = (vect(0, -287, 0)).y
    varSigmaAntiKamikazePos_Y = vect(0, 287, 0).y


def mapSetupExpan():
    @Name "Map Setup (ExpanWorkshop) Subroutine"
    
    varPosSpawnAreaNX = (vect(-557, 0, 0)).x
    varPosSpawnAreaPX = vect(557, 0, 0).x
    varPosSpawnAreaNZ = (vect(0, 0, -557)).z
    varPosSpawnAreaPZ = vect(0, 0, 557).z
    varSigmaAntiKamikazeN_Y = (vect(0, -287, 0)).y
    varSigmaAntiKamikazePos_Y = vect(0, 287, 0).y


def mapSetupBlackForest():
    @Name "Map Setup (BlackForest) Subroutine"
    
    varPosSpawnAreaNX = (vect(-557, 0, 0)).x
    varPosSpawnAreaPX = vect(557, 0, 0).x
    varPosSpawnAreaNZ = (vect(0, 0, -557)).z
    varPosSpawnAreaPZ = vect(0, 0, 557).z
    varSigmaAntiKamikazeN_Y = (vect(0, -287, 0)).y
    varSigmaAntiKamikazePos_Y = vect(0, 287, 0).y


def mapSetupIsland():
    @Name "Map Setup (IslandWorkshop) Subroutine"
    
    varPosSpawnAreaNX = (vect(-557, 0, 0)).x
    varPosSpawnAreaPX = vect(557, 0, 0).x
    varPosSpawnAreaNZ = (vect(0, 0, -557)).z
    varPosSpawnAreaPZ = vect(0, 0, 557).z
    varSigmaAntiKamikazeN_Y = (vect(0, -287, 0)).y
    varSigmaAntiKamikazePos_Y = vect(0, 287, 0).y


def mapSetupNecropolis():
    @Name "Map Setup (Necropolis) Subroutine"
    
    varPosSpawnAreaNX = (vect(-557, 0, 0)).x
    varPosSpawnAreaPX = vect(557, 0, 0).x
    varPosSpawnAreaNZ = (vect(0, 0, -557)).z
    varPosSpawnAreaPZ = vect(0, 0, 557).z
    varSigmaAntiKamikazeN_Y = (vect(0, -7, 0)).y
    varSigmaAntiKamikazePos_Y = vect(0, 287, 0).y


def mapSetupOasisUniversity():
    @Name "Map Setup (OasisUniversity) Subroutine"
    
    varPosSpawnAreaNX = (vect(-557, 0, 0)).x
    varPosSpawnAreaPX = vect(557, 0, 0).x
    varPosSpawnAreaNZ = (vect(0, 0, -557)).z
    varPosSpawnAreaPZ = vect(0, 0, 557).z
    varSigmaAntiKamikazeN_Y = vect(0, 2.8, 0).y
    varSigmaAntiKamikazePos_Y = vect(0, 287, 0).y


def mapSetupWorkshopRoom():
    @Name "Map Setup (WorkshopRoom) Subroutine"
    
    varPosSpawnAreaNX = (vect(-557, 0, 0)).x
    varPosSpawnAreaPX = vect(557, 0, 0).x
    varPosSpawnAreaNZ = (vect(0, 0, -557)).z
    varPosSpawnAreaPZ = vect(0, 0, 557).z
    varSigmaAntiKamikazeN_Y = (vect(0, -287, 0)).y
    varSigmaAntiKamikazePos_Y = vect(0, 287, 0).y


def mapSetupLijiangGarden():
    @Name "Map Setup (LijiangGarden) Subroutine"
    
    varPosSpawnAreaNX = (vect(-92.557, 0, 0)).x
    varPosSpawnAreaPX = vect(92.755, 0, 0).x
    varPosSpawnAreaNZ = (vect(0, 0, -557)).z
    varPosSpawnAreaPZ = vect(0, 0, 557).z
    varSigmaAntiKamikazeN_Y = vect(0, 83, 0).y
    varSigmaAntiKamikazePos_Y = vect(0, 287, 0).y


def mapSetupNepalShrine():
    @Name "Map Setup (NepalShrine) Subroutine"
    
    varPosSpawnAreaNX = (vect(-557, 0, 0)).x
    varPosSpawnAreaPX = vect(557, 0, 0).x
    varPosSpawnAreaNZ = (vect(0, 0, -101.557)).z
    varPosSpawnAreaPZ = vect(0, 0, 101.557).z
    varSigmaAntiKamikazeN_Y = vect(0, 1, 0).y
    varSigmaAntiKamikazePos_Y = vect(0, 287, 0).y


def mapSetupNepalSanctuary():
    @Name "Map Setup (NepalSanctuary) Subroutine"
    
    varPosSpawnAreaNX = (vect(-557, 0, 0)).x
    varPosSpawnAreaPX = vect(557, 0, 0).x
    varPosSpawnAreaNZ = (vect(0, 0, -97.557)).z
    varPosSpawnAreaPZ = vect(0, 0, 97.557).z
    varSigmaAntiKamikazeN_Y = vect(0, 118, 0).y
    varSigmaAntiKamikazePos_Y = vect(0, 287, 0).y


def mapSetupNepalVillage():
    @Name "Map Setup (NepalVillage) Subroutine"
    
    varPosSpawnAreaNX = (vect(-557, 0, 0)).x
    varPosSpawnAreaPX = vect(557, 0, 0).x
    varPosSpawnAreaNZ = (vect(0, 0, -89.55)).z
    varPosSpawnAreaPZ = vect(0, 0, 89.557).z
    varSigmaAntiKamikazeN_Y = (vect(0, -105, 0)).y
    varSigmaAntiKamikazePos_Y = vect(0, 287, 0).y


def mapSetupOasisCity():
    @Name "Map Setup (OasisCity) Subroutine"
    
    varPosSpawnAreaNX = (vect(-557, 0, 0)).x
    varPosSpawnAreaPX = vect(557, 0, 0).x
    varPosSpawnAreaNZ = (vect(0, 0, -557)).z
    varPosSpawnAreaPZ = vect(0, 0, 557).z
    varSigmaAntiKamikazeN_Y = (vect(0, -8, 0)).y
    varSigmaAntiKamikazePos_Y = vect(0, 287, 0).y


def mapSetupOasisGarden():
    @Name "Map Setup (OasisGarden) Subroutine"
    
    varPosSpawnAreaNX = (vect(-557, 0, 0)).x
    varPosSpawnAreaPX = vect(557, 0, 0).x
    varPosSpawnAreaNZ = (vect(0, 0, -557)).z
    varPosSpawnAreaPZ = vect(0, 0, 557).z
    varSigmaAntiKamikazeN_Y = vect(0, 1, 0).y
    varSigmaAntiKamikazePos_Y = vect(0, 287, 0).y


def mapSetupIliosWell():
    @Name "Map Setup (IliosWell) Subroutine"
    
    varPosSpawnAreaNX = (vect(-557, 0, 0)).x
    varPosSpawnAreaPX = vect(557, 0, 0).x
    varPosSpawnAreaNZ = (vect(0, 0, -557)).z
    varPosSpawnAreaPZ = vect(0, 0, 557).z
    varSigmaAntiKamikazeN_Y = (vect(0, -9, 0)).y
    varSigmaAntiKamikazePos_Y = vect(0, 287, 0).y


rule "ZEN can't ULT if solo seeker":
    @Event eachPlayer
    @Team 1
    @Hero zenyatta
    @Condition isGameInProgress() == true
    @Condition eventPlayer.getCurrentHero() == Hero.ZENYATTA
    @Condition getNumberOfLivingPlayers(Team.2) < 2
    
    eventPlayer.disallowButton(Button.ULTIMATE)
    wait(0.287)
    if RULE_CONDITION:
        goto RULE_START
    eventPlayer.allowButton(Button.ULTIMATE)


def mapSetupIliosRuins():
    @Name "Map Setup (IliosRuins) Subroutine"
    
    varPosSpawnAreaNX = (vect(-82.557, 0, 0)).x
    varPosSpawnAreaPX = vect(140.557, 0, 0).x
    varPosSpawnAreaNZ = (vect(0, 0, -557)).z
    varPosSpawnAreaPZ = vect(0, 0, 557).z
    varSigmaAntiKamikazeN_Y = vect(0, 51, 0).y
    varSigmaAntiKamikazePos_Y = vect(0, 287, 0).y


def mapSetupIliosLightHouse():
    @Name "Map Setup (IliosLightHouse) Subroutine"
    
    varPosSpawnAreaNX = (vect(-557, 0, 0)).x
    varPosSpawnAreaPX = vect(557, 0, 0).x
    varPosSpawnAreaNZ = (vect(0, 0, -557)).z
    varPosSpawnAreaPZ = vect(0, 0, 557).z
    varSigmaAntiKamikazeN_Y = (vect(0, -37, 0)).y
    varSigmaAntiKamikazePos_Y = vect(0, 287, 0).y


def mapSetupLijiangControl():
    @Name "Map Setup (LijiangControl) Subroutine"
    
    varPosSpawnAreaNX = (vect(-557, 0, 0)).x
    varPosSpawnAreaPX = vect(557, 0, 0).x
    varPosSpawnAreaNZ = (vect(0, 0, -557)).z
    varPosSpawnAreaPZ = vect(0, 0, 557).z
    varAnglePosXp = vect(-104.964, 267.251, 389.258)
    varSigmaAntiKamikazeN_Y = vect(0, 251, 0).y
    varSigmaAntiKamikazePos_Y = vect(0, 487, 0).y


def arenaSetup():
    @Name "Arena Setup Subroutine"
    
    #Setup all Arena Effects
    arenaSetupEdge()
    arenaSetupFace()
    #Setup all Arena Effects 2
    arenaSetupEdge2()
    arenaSetupFace2()
    #Setup Area TeamSpawn
    subAreaSpawnTeam()


def arenaSetupEdge():
    @Name "Boundary Box Edge Construction Subroutine"
    
    #BOX EDGES: (x,y,z) -> (x,-y,z)
    createBeam(getAllPlayers(), Beam.GRAPPLE, vect(xPositive1, yPositive1, zPositive1), vect(xPositive1, yNegative1, 0.001 + zPositive1), Color.GREEN, EffectReeval.VISIBILITY)
    #toxicjail_tab.append(getLastCreatedEntity())
    #(x,y,-z) -> (x,-y,-z)
    createBeam(getAllPlayers(), Beam.GRAPPLE, vect(xPositive1, yPositive1, zNegative1), vect(xPositive1, yNegative1, 0.001 + zNegative1), Color.GREEN, EffectReeval.VISIBILITY)
    #toxicjail_tab.append(getLastCreatedEntity())
    #(-x,y,-z) -> (-x,-y,-z)
    createBeam(getAllPlayers(), Beam.GRAPPLE, vect(xNegative1, yPositive1, zNegative1), vect(xNegative1, yNegative1, 0.001 + zNegative1), Color.GREEN, EffectReeval.VISIBILITY)
    #toxicjail_tab.append(getLastCreatedEntity())
    #(-x,y,z) -> (-x,-y,z)
    createBeam(getAllPlayers(), Beam.GRAPPLE, vect(xNegative1, yPositive1, zPositive1), vect(xNegative1, yNegative1, 0.001 + zPositive1), Color.GREEN, EffectReeval.VISIBILITY)
    #toxicjail_tab.append(getLastCreatedEntity())
    #(x,y,z) -> (-x,y,z)
    createBeam(getAllPlayers(), Beam.GRAPPLE, vect(xPositive1, yPositive1, zPositive1), vect(xNegative1, yPositive1, zPositive1), Color.GREEN, EffectReeval.VISIBILITY)
    #toxicjail_tab.append(getLastCreatedEntity())
    #(x,-y,z) -> (-x,-y,z)
    createBeam(getAllPlayers(), Beam.GRAPPLE, vect(xPositive1, yNegative1, zPositive1), vect(xNegative1, yNegative1, zPositive1), Color.GREEN, EffectReeval.VISIBILITY)
    #toxicjail_tab.append(getLastCreatedEntity())
    #(x,y,-z) -> (-x,y,-z)
    createBeam(getAllPlayers(), Beam.GRAPPLE, vect(xPositive1, yPositive1, zNegative1), vect(xNegative1, yPositive1, zNegative1), Color.GREEN, EffectReeval.VISIBILITY)
    #toxicjail_tab.append(getLastCreatedEntity())
    #(x,-y,-z) -> (-x,-y,-z)
    createBeam(getAllPlayers(), Beam.GRAPPLE, vect(xPositive1, yNegative1, zNegative1), vect(xNegative1, yNegative1, zNegative1), Color.GREEN, EffectReeval.VISIBILITY)
    #toxicjail_tab.append(getLastCreatedEntity())
    #(x,y,z) -> (x,y,-z)
    createBeam(getAllPlayers(), Beam.GRAPPLE, vect(xPositive1, yPositive1, zPositive1), vect(xPositive1, yPositive1, zNegative1), Color.GREEN, EffectReeval.VISIBILITY)
    #toxicjail_tab.append(getLastCreatedEntity())
    #(x,-y,z) -> (x,-y,-z)
    createBeam(getAllPlayers(), Beam.GRAPPLE, vect(xPositive1, yNegative1, zPositive1), vect(xPositive1, yNegative1, zNegative1), Color.GREEN, EffectReeval.VISIBILITY)
    #toxicjail_tab.append(getLastCreatedEntity())
    #(-x,y,z) -> (-x,y,-z)
    createBeam(getAllPlayers(), Beam.GRAPPLE, vect(xNegative1, yPositive1, zPositive1), vect(xNegative1, yPositive1, zNegative1), Color.GREEN, EffectReeval.VISIBILITY)
    #toxicjail_tab.append(getLastCreatedEntity())
    #(-x,-y,z) -> (-x,-y,-z)
    createBeam(getAllPlayers(), Beam.GRAPPLE, vect(xNegative1, yNegative1, zPositive1), vect(xNegative1, yNegative1, zNegative1), Color.GREEN, EffectReeval.VISIBILITY)
    #toxicjail_tab.append(getLastCreatedEntity())
    #FREEZE LINE
    createBeam(getAllPlayers(), Beam.GRAPPLE, vect((xNegative1 - xPositive1) / 2 + xPositive1, yBlockFreeze_1, zBlockFreeze), vect(xNegative1, yBlockFreeze_1, zBlockFreeze), Color.GREEN, EffectReeval.VISIBILITY)
    #FREEZE LINE 2
    createBeam(getAllPlayers(), Beam.GRAPPLE, vect((xNegative1 - xPositive1) / 2 + xPositive1, yBlockFreeze_1, (zNegative1 - zPositive1) / 4 + zBlockFreeze), vect(xNegative1, yBlockFreeze_1, (zNegative1 - zPositive1) / 4 + zBlockFreeze), Color.GREEN, EffectReeval.VISIBILITY)
    #FREEZE LINE 3
    createBeam(getAllPlayers(), Beam.GRAPPLE, vect(xPositive1, yBlockFreeze_2, (zNegative1 - zPositive1) / 8 + zBlockFreeze), vect(xNegative1, yBlockFreeze_2, (zNegative1 - zPositive1) / 8 + zBlockFreeze), Color.GREEN, EffectReeval.VISIBILITY)


def arenaSetupFace():
    @Name "Boundary Box Face Construction Subroutine"
    
    #This subroutine creates the faces of the arena. (x,y,-z) -> (-x,y,z) (Face Y)
    createBeam(getAllPlayers(), Beam.GRAPPLE, vect(xPositive1, yPositive1, zNegative1), vect(xNegative1, yPositive1, zPositive1), Color.RED, EffectReeval.VISIBILITY)
    #(x,y,z) -> (-x,y,-z) (Face Y)
    createBeam(getAllPlayers(), Beam.GRAPPLE, vect(xPositive1, yPositive1, zPositive1), vect(xNegative1, yPositive1, zNegative1), Color.RED, EffectReeval.VISIBILITY)
    #(x,y,-z) -> (x,-y,z) (Face X)
    createBeam(getAllPlayers(), Beam.GRAPPLE, vect(xPositive1, yPositive1, zNegative1), vect(xPositive1, yNegative1, zPositive1), Color.RED, EffectReeval.VISIBILITY)
    #(x,y,z) -> (x,-y,-z) (Face X)
    createBeam(getAllPlayers(), Beam.GRAPPLE, vect(xPositive1, yPositive1, zPositive1), vect(xPositive1, yNegative1, zNegative1), Color.RED, EffectReeval.VISIBILITY)
    #(-x,y,-z) -> (-x,-y,z) (Face -X)
    createBeam(getAllPlayers(), Beam.GRAPPLE, vect(xNegative1, yPositive1, zNegative1), vect(xNegative1, yNegative1, zPositive1), Color.RED, EffectReeval.VISIBILITY)
    #(-x,y,z) -> (-x,-y,-z) (Face -X)
    createBeam(getAllPlayers(), Beam.GRAPPLE, vect(xNegative1, yPositive1, zPositive1), vect(xNegative1, yNegative1, zNegative1), Color.RED, EffectReeval.VISIBILITY)
    #(x,y,z) -> (-x,-y,z) (Face Z)
    createBeam(getAllPlayers(), Beam.GRAPPLE, vect(xPositive1, yPositive1, zPositive1), vect(xNegative1, yNegative1, zPositive1), Color.RED, EffectReeval.VISIBILITY)
    #(-x,y,z) -> (x,-y,z) (Face Z)
    createBeam(getAllPlayers(), Beam.GRAPPLE, vect(xNegative1, yPositive1, zPositive1), vect(xPositive1, yNegative1, zPositive1), Color.RED, EffectReeval.VISIBILITY)
    #(x,-y,z) -> (-x,-y,-z) (Face -Y)
    createBeam(getAllPlayers(), Beam.GRAPPLE, vect(xPositive1, yNegative1, zPositive1), vect(xNegative1, yNegative1, zNegative1), Color.RED, EffectReeval.VISIBILITY)
    #(x,-y,-z) -> (-x,-y,z) (Face -Y)
    createBeam(getAllPlayers(), Beam.GRAPPLE, vect(xPositive1, yNegative1, zNegative1), vect(xNegative1, yNegative1, zPositive1), Color.RED, EffectReeval.VISIBILITY)
    #(x,y,-z) -> (-x,-y,-z) (Face -Z)
    createBeam(getAllPlayers(), Beam.GRAPPLE, vect(xPositive1, yPositive1, zNegative1), vect(xNegative1, yNegative1, zNegative1), Color.RED, EffectReeval.VISIBILITY)
    #(-x,y,-z) -> (x,-y,-z) (Face -Z)
    createBeam(getAllPlayers(), Beam.GRAPPLE, vect(xNegative1, yPositive1, zNegative1), vect(xPositive1, yNegative1, zNegative1), Color.RED, EffectReeval.VISIBILITY)
    #MIDPOINT FACE HORIZONTAL: (x,midpoint,-z) -> (-x,midpoint,-z) (Face -Z)
    createBeam(getAllPlayers(), Beam.GRAPPLE, vect(xPositive1, (yPositive1 + yNegative1) / 2, zNegative1), vect(xNegative1, (yPositive1 + yNegative1) / 2, zNegative1), Color.RED, EffectReeval.VISIBILITY)
    #(x,midpoint,z) -> (-x,midpoint,z) (Face Z)
    createBeam(getAllPlayers(), Beam.GRAPPLE, vect(xPositive1, (yPositive1 + yNegative1) / 2, zPositive1), vect(xNegative1, (yPositive1 + yNegative1) / 2, zPositive1), Color.RED, EffectReeval.VISIBILITY)
    #(x,midpoint,-z) -> (x,midpoint,z) (Face X)
    createBeam(getAllPlayers(), Beam.GRAPPLE, vect(xPositive1, (yPositive1 + yNegative1) / 2, zNegative1), vect(xPositive1, (yPositive1 + yNegative1) / 2, zPositive1), Color.RED, EffectReeval.VISIBILITY)
    #(-x,midpoint,-z) -> (-x,midpoint,z) (Face -X)
    createBeam(getAllPlayers(), Beam.GRAPPLE, vect(xNegative1, (yPositive1 + yNegative1) / 2, zNegative1), vect(xNegative1, (yPositive1 + yNegative1) / 2, zPositive1), Color.RED, EffectReeval.VISIBILITY)
    #MIDPOINT FACE VERTICAL: (midpoint,y,z) -> (midpoint,-y,z) (Face Z)
    createBeam(getAllPlayers(), Beam.GRAPPLE, vect((xPositive1 + xNegative1) / 2 + 0.001, yPositive1, zPositive1), vect((xPositive1 + xNegative1) / 2, yNegative1, zPositive1), Color.RED, EffectReeval.VISIBILITY)
    #(midpoint,y,-z) -> (midpoint,-y,-z) (Face -Z)
    createBeam(getAllPlayers(), Beam.GRAPPLE, vect((xPositive1 + xNegative1) / 2 + 0.001, yPositive1, zNegative1), vect((xPositive1 + xNegative1) / 2, yNegative1, zNegative1), Color.RED, EffectReeval.VISIBILITY)
    #(x,y,midpoint) -> (x,-y,midpoint) (Face X)
    createBeam(getAllPlayers(), Beam.GRAPPLE, vect(xPositive1, yPositive1, (zPositive1 + zNegative1) / 2 + 0.001), vect(xPositive1, yNegative1, (zPositive1 + zNegative1) / 2), Color.RED, EffectReeval.VISIBILITY)
    #(-x,y,midpoint) -> (-x,-y,midpoint) (Face -X)
    createBeam(getAllPlayers(), Beam.GRAPPLE, vect(xNegative1, yPositive1, (zPositive1 + zNegative1) / 2 + 0.001), vect(xNegative1, yNegative1, (zPositive1 + zNegative1) / 2), Color.RED, EffectReeval.VISIBILITY)
    #(x,y,midpoint) -> (x,-y,midpoint) (Face X)
    createBeam(getAllPlayers(), Beam.GRAPPLE, vect(xPositive1, yPositive1, ((zPositive1 + zNegative1) / 2 + zNegative1) / 2 + 0.001), vect(xPositive1, yNegative1, ((zPositive1 + zNegative1) / 2 + zNegative1) / 2), Color.RED, EffectReeval.VISIBILITY)
    #(-x,y,midpoint) -> (-x,-y,midpoint) (Face -X)
    createBeam(getAllPlayers(), Beam.GRAPPLE, vect(xNegative1, yPositive1, ((zPositive1 + zNegative1) / 2 + zNegative1) / 2 + 0.001), vect(xNegative1, yNegative1, ((zPositive1 + zNegative1) / 2 + zNegative1) / 2), Color.RED, EffectReeval.VISIBILITY)
    #(x,y,midpoint) -> (x,-y,midpoint) (Face X)
    createBeam(getAllPlayers(), Beam.GRAPPLE, vect(xPositive1, yPositive1, ((zNegative1 + zPositive1) / 2 + zPositive1) / 2 + 0.001), vect(xPositive1, yNegative1, ((zNegative1 + zPositive1) / 2 + zPositive1) / 2), Color.RED, EffectReeval.VISIBILITY)
    #(-x,y,midpoint) -> (-x,-y,midpoint) (Face -X)
    createBeam(getAllPlayers(), Beam.GRAPPLE, vect(xNegative1, yPositive1, ((zNegative1 + zPositive1) / 2 + zPositive1) / 2 + 0.001), vect(xNegative1, yNegative1, ((zNegative1 + zPositive1) / 2 + zPositive1) / 2), Color.RED, EffectReeval.VISIBILITY)


def arenaSetupEdge2():
    @Name "Boundary Box Edge Construction Subroutine2"
    
    #BOX EDGES: (x,y,z) -> (x,-y,z)
    createBeam(getAllPlayers(), Beam.GRAPPLE, vect(xPositive2, yPositive2, zPositive2), vect(xPositive2, yNegative2, 0.001 + zPositive2), Color.GREEN, EffectReeval.VISIBILITY)
    #toxicjail_tab.append(getLastCreatedEntity())
    #(x,y,-z) -> (x,-y,-z)
    createBeam(getAllPlayers(), Beam.GRAPPLE, vect(xPositive2, yPositive2, zNegative2), vect(xPositive2, yNegative2, 0.001 + zNegative2), Color.GREEN, EffectReeval.VISIBILITY)
    #toxicjail_tab.append(getLastCreatedEntity())
    #(-x,y,-z) -> (-x,-y,-z)
    createBeam(getAllPlayers(), Beam.GRAPPLE, vect(xNegative2, yPositive2, zNegative2), vect(xNegative2, yNegative2, 0.001 + zNegative2), Color.GREEN, EffectReeval.VISIBILITY)
    #toxicjail_tab.append(getLastCreatedEntity())
    #(-x,y,z) -> (-x,-y,z)
    createBeam(getAllPlayers(), Beam.GRAPPLE, vect(xNegative2, yPositive2, zPositive2), vect(xNegative2, yNegative2, 0.001 + zPositive2), Color.GREEN, EffectReeval.VISIBILITY)
    #toxicjail_tab.append(getLastCreatedEntity())
    #(x,y,z) -> (-x,y,z)
    createBeam(getAllPlayers(), Beam.GRAPPLE, vect(xPositive2, yPositive2, zPositive2), vect(xNegative2, yPositive2, zPositive2), Color.GREEN, EffectReeval.VISIBILITY)
    #toxicjail_tab.append(getLastCreatedEntity())
    #(x,-y,z) -> (-x,-y,z)
    createBeam(getAllPlayers(), Beam.GRAPPLE, vect(xPositive2, yNegative2, zPositive2), vect(xNegative2, yNegative2, zPositive2), Color.GREEN, EffectReeval.VISIBILITY)
    #toxicjail_tab.append(getLastCreatedEntity())
    #(x,y,-z) -> (-x,y,-z)
    createBeam(getAllPlayers(), Beam.GRAPPLE, vect(xPositive2, yPositive2, zNegative2), vect(xNegative2, yPositive2, zNegative2), Color.GREEN, EffectReeval.VISIBILITY)
    #toxicjail_tab.append(getLastCreatedEntity())
    #(x,-y,-z) -> (-x,-y,-z)
    createBeam(getAllPlayers(), Beam.GRAPPLE, vect(xPositive2, yNegative2, zNegative2), vect(xNegative2, yNegative2, zNegative2), Color.GREEN, EffectReeval.VISIBILITY)
    #toxicjail_tab.append(getLastCreatedEntity())
    #(x,y,z) -> (x,y,-z)
    createBeam(getAllPlayers(), Beam.GRAPPLE, vect(xPositive2, yPositive2, zPositive2), vect(xPositive2, yPositive2, zNegative2), Color.GREEN, EffectReeval.VISIBILITY)
    #toxicjail_tab.append(getLastCreatedEntity())
    #(x,-y,z) -> (x,-y,-z)
    createBeam(getAllPlayers(), Beam.GRAPPLE, vect(xPositive2, yNegative2, zPositive2), vect(xPositive2, yNegative2, zNegative2), Color.GREEN, EffectReeval.VISIBILITY)
    #toxicjail_tab.append(getLastCreatedEntity())
    #(-x,y,z) -> (-x,y,-z)
    createBeam(getAllPlayers(), Beam.GRAPPLE, vect(xNegative2, yPositive2, zPositive2), vect(xNegative2, yPositive2, zNegative2), Color.GREEN, EffectReeval.VISIBILITY)
    #toxicjail_tab.append(getLastCreatedEntity())
    #(-x,-y,z) -> (-x,-y,-z)
    createBeam(getAllPlayers(), Beam.GRAPPLE, vect(xNegative2, yNegative2, zPositive2), vect(xNegative2, yNegative2, zNegative2), Color.GREEN, EffectReeval.VISIBILITY)
    #toxicjail_tab.append(getLastCreatedEntity())
    #FREEZE LINE
    createBeam(getAllPlayers(), Beam.GRAPPLE, vect((xNegative2 - xPositive2) / 2 + xPositive2, yBlockFreeze_1, zBlockFreeze), vect(xNegative2, yBlockFreeze_1, zBlockFreeze), Color.GREEN, EffectReeval.VISIBILITY)
    #FREEZE LINE 2
    createBeam(getAllPlayers(), Beam.GRAPPLE, vect((xNegative2 - xPositive2) / 2 + xPositive2, yBlockFreeze_1, (zNegative2 - zPositive2) / 4 + zBlockFreeze), vect(xNegative2, yBlockFreeze_1, (zNegative2 - zPositive2) / 4 + zBlockFreeze), Color.GREEN, EffectReeval.VISIBILITY)
    #FREEZE LINE 3
    createBeam(getAllPlayers(), Beam.GRAPPLE, vect(xPositive2, yBlockFreeze_2, (zNegative2 - zPositive2) / 8 + zBlockFreeze), vect(xNegative2, yBlockFreeze_2, (zNegative2 - zPositive2) / 8 + zBlockFreeze), Color.GREEN, EffectReeval.VISIBILITY)


def arenaSetupFace2():
    @Name "Boundary Box Face Construction Subroutine 2"
    
    #This subroutine creates the faces of the arena. (x,y,-z) -> (-x,y,z) (Face Y)
    createBeam(getAllPlayers(), Beam.GRAPPLE, vect(xPositive2, yPositive2, zNegative2), vect(xNegative2, yPositive2, zPositive2), Color.RED, EffectReeval.VISIBILITY)
    #(x,y,z) -> (-x,y,-z) (Face Y)
    createBeam(getAllPlayers(), Beam.GRAPPLE, vect(xPositive2, yPositive2, zPositive2), vect(xNegative2, yPositive2, zNegative2), Color.RED, EffectReeval.VISIBILITY)
    #(x,y,-z) -> (x,-y,z) (Face X)
    createBeam(getAllPlayers(), Beam.GRAPPLE, vect(xPositive2, yPositive2, zNegative2), vect(xPositive2, yNegative2, zPositive2), Color.RED, EffectReeval.VISIBILITY)
    #(x,y,z) -> (x,-y,-z) (Face X)
    createBeam(getAllPlayers(), Beam.GRAPPLE, vect(xPositive2, yPositive2, zPositive2), vect(xPositive2, yNegative2, zNegative2), Color.RED, EffectReeval.VISIBILITY)
    #(-x,y,-z) -> (-x,-y,z) (Face -X)
    createBeam(getAllPlayers(), Beam.GRAPPLE, vect(xNegative2, yPositive2, zNegative2), vect(xNegative2, yNegative2, zPositive2), Color.RED, EffectReeval.VISIBILITY)
    #(-x,y,z) -> (-x,-y,-z) (Face -X)
    createBeam(getAllPlayers(), Beam.GRAPPLE, vect(xNegative2, yPositive2, zPositive2), vect(xNegative2, yNegative2, zNegative2), Color.RED, EffectReeval.VISIBILITY)
    #(x,y,z) -> (-x,-y,z) (Face Z)
    createBeam(getAllPlayers(), Beam.GRAPPLE, vect(xPositive2, yPositive2, zPositive2), vect(xNegative2, yNegative2, zPositive2), Color.RED, EffectReeval.VISIBILITY)
    #(-x,y,z) -> (x,-y,z) (Face Z)
    createBeam(getAllPlayers(), Beam.GRAPPLE, vect(xNegative2, yPositive2, zPositive2), vect(xPositive2, yNegative2, zPositive2), Color.RED, EffectReeval.VISIBILITY)
    #(x,-y,z) -> (-x,-y,-z) (Face -Y)
    createBeam(getAllPlayers(), Beam.GRAPPLE, vect(xPositive2, yNegative2, zPositive2), vect(xNegative2, yNegative2, zNegative2), Color.RED, EffectReeval.VISIBILITY)
    #(x,-y,-z) -> (-x,-y,z) (Face -Y)
    createBeam(getAllPlayers(), Beam.GRAPPLE, vect(xPositive2, yNegative2, zNegative2), vect(xNegative2, yNegative2, zPositive2), Color.RED, EffectReeval.VISIBILITY)
    #(x,y,-z) -> (-x,-y,-z) (Face -Z)
    createBeam(getAllPlayers(), Beam.GRAPPLE, vect(xPositive2, yPositive2, zNegative2), vect(xNegative2, yNegative2, zNegative2), Color.RED, EffectReeval.VISIBILITY)
    #(-x,y,-z) -> (x,-y,-z) (Face -Z)
    createBeam(getAllPlayers(), Beam.GRAPPLE, vect(xNegative2, yPositive2, zNegative2), vect(xPositive2, yNegative2, zNegative2), Color.RED, EffectReeval.VISIBILITY)
    #MIDPOINT FACE HORIZONTAL: (x,midpoint,-z) -> (-x,midpoint,-z) (Face -Z)
    createBeam(getAllPlayers(), Beam.GRAPPLE, vect(xPositive2, (yPositive2 + yNegative2) / 2, zNegative2), vect(xNegative2, (yPositive2 + yNegative2) / 2, zNegative2), Color.RED, EffectReeval.VISIBILITY)
    #(x,midpoint,z) -> (-x,midpoint,z) (Face Z)
    createBeam(getAllPlayers(), Beam.GRAPPLE, vect(xPositive2, (yPositive2 + yNegative2) / 2, zPositive2), vect(xNegative2, (yPositive2 + yNegative2) / 2, zPositive2), Color.RED, EffectReeval.VISIBILITY)
    #(x,midpoint,-z) -> (x,midpoint,z) (Face X)
    createBeam(getAllPlayers(), Beam.GRAPPLE, vect(xPositive2, (yPositive2 + yNegative2) / 2, zNegative2), vect(xPositive2, (yPositive2 + yNegative2) / 2, zPositive2), Color.RED, EffectReeval.VISIBILITY)
    #(-x,midpoint,-z) -> (-x,midpoint,z) (Face -X)
    createBeam(getAllPlayers(), Beam.GRAPPLE, vect(xNegative2, (yPositive2 + yNegative2) / 2, zNegative2), vect(xNegative2, (yPositive2 + yNegative2) / 2, zPositive2), Color.RED, EffectReeval.VISIBILITY)
    #MIDPOINT FACE VERTICAL: (midpoint,y,z) -> (midpoint,-y,z) (Face Z)
    createBeam(getAllPlayers(), Beam.GRAPPLE, vect((xPositive2 + xNegative2) / 2 + 0.001, yPositive2, zPositive2), vect((xPositive2 + xNegative2) / 2, yNegative2, zPositive2), Color.RED, EffectReeval.VISIBILITY)
    #(midpoint,y,-z) -> (midpoint,-y,-z) (Face -Z)
    createBeam(getAllPlayers(), Beam.GRAPPLE, vect((xPositive2 + xNegative2) / 2 + 0.001, yPositive2, zNegative2), vect((xPositive2 + xNegative2) / 2, yNegative2, zNegative2), Color.RED, EffectReeval.VISIBILITY)
    #(x,y,midpoint) -> (x,-y,midpoint) (Face X)
    createBeam(getAllPlayers(), Beam.GRAPPLE, vect(xPositive2, yPositive2, (zPositive2 + zNegative2) / 2 + 0.001), vect(xPositive2, yNegative2, (zPositive2 + zNegative2) / 2), Color.RED, EffectReeval.VISIBILITY)
    #(-x,y,midpoint) -> (-x,-y,midpoint) (Face -X)
    createBeam(getAllPlayers(), Beam.GRAPPLE, vect(xNegative2, yPositive2, (zPositive2 + zNegative2) / 2 + 0.001), vect(xNegative2, yNegative2, (zPositive2 + zNegative2) / 2), Color.RED, EffectReeval.VISIBILITY)
    #(x,y,midpoint) -> (x,-y,midpoint) (Face X)
    createBeam(getAllPlayers(), Beam.GRAPPLE, vect(xPositive2, yPositive2, ((zPositive2 + zNegative2) / 2 + zNegative2) / 2 + 0.001), vect(xPositive2, yNegative2, ((zPositive2 + zNegative2) / 2 + zNegative2) / 2), Color.RED, EffectReeval.VISIBILITY)
    #(-x,y,midpoint) -> (-x,-y,midpoint) (Face -X)
    createBeam(getAllPlayers(), Beam.GRAPPLE, vect(xNegative2, yPositive2, ((zPositive2 + zNegative2) / 2 + zNegative2) / 2 + 0.001), vect(xNegative2, yNegative2, ((zPositive2 + zNegative2) / 2 + zNegative2) / 2), Color.RED, EffectReeval.VISIBILITY)
    #(x,y,midpoint) -> (x,-y,midpoint) (Face X)
    createBeam(getAllPlayers(), Beam.GRAPPLE, vect(xPositive2, yPositive2, ((zNegative2 + zPositive2) / 2 + zPositive2) / 2 + 0.001), vect(xPositive2, yNegative2, ((zNegative2 + zPositive2) / 2 + zPositive2) / 2), Color.RED, EffectReeval.VISIBILITY)
    #(-x,y,midpoint) -> (-x,-y,midpoint) (Face -X)
    createBeam(getAllPlayers(), Beam.GRAPPLE, vect(xNegative2, yPositive2, ((zNegative2 + zPositive2) / 2 + zPositive2) / 2 + 0.001), vect(xNegative2, yNegative2, ((zNegative2 + zPositive2) / 2 + zPositive2) / 2), Color.RED, EffectReeval.VISIBILITY)


rule "ToxicPlayer die":
    @Event playerDied
    @Hero all
    @Condition eventPlayer == true
    
    destroyIcon(eventPlayer.ToxicPlayerIcon)
    destroyIcon(eventPlayer.iconCampingSpawn)


def toxic_freeze():
    @Name "Kill Player Subroutine"
    
    destroyIcon(eventPlayer.ToxicPlayerIcon)
    wait(0.1)
    eventPlayer.setStatusEffect(null, Status.FROZEN, 10)
    playEffect(getAllPlayers(), DynamicEffect.GOOD_EXPLOSION, Color.GREEN, eventPlayer.getPosition(), 5)
    createIcon(getAllPlayers(), eventPlayer, Icon.RADIOACTIVE, IconReeval.VISIBILITY_AND_POSITION, Color.GREEN, false)
    eventPlayer.ToxicPlayerIcon = getLastCreatedEntity()


rule "test block kill 1":
    @Event eachPlayer
    @Hero all
    @Condition raycast(vect((xNegative1 - xPositive1) / 2 + xPositive1, yBlockFreeze_1, zBlockFreeze), vect(xNegative1, yBlockFreeze_1, zBlockFreeze), eventPlayer, null, true).getPlayerHit() == true
    @Condition eventPlayer == eventPlayer.isAlive()
    
    toxic_freeze()


rule "test block kill 2":
    @Event eachPlayer
    @Hero all
    @Condition raycast(vect((xNegative1 - xPositive1) / 2 + xPositive1, yBlockFreeze_1, (zNegative1 - zPositive1) / 4 + zBlockFreeze), vect(xNegative1, yBlockFreeze_1, (zNegative1 - zPositive1) / 4 + zBlockFreeze), eventPlayer, null, true).getPlayerHit() == true
    @Condition eventPlayer == eventPlayer.isAlive()
    
    toxic_freeze()


rule "test block kill 3":
    @Event eachPlayer
    @Hero all
    @Condition raycast(vect(xPositive1, yBlockFreeze_2, (zNegative1 - zPositive1) / 8 + zBlockFreeze), vect(xNegative1, yBlockFreeze_2, (zNegative1 - zPositive1) / 8 + zBlockFreeze), eventPlayer, null, true).getPlayerHit() == true
    @Condition eventPlayer == eventPlayer.isAlive()
    
    toxic_freeze()


rule "test block kill 4":
    @Event eachPlayer
    @Hero all
    @Condition raycast(vect((xNegative2 - xPositive2) / 2 + xPositive2, yBlockFreeze_1, zBlockFreeze), vect(xNegative2, yBlockFreeze_1, zBlockFreeze), eventPlayer, null, true).getPlayerHit() == true
    @Condition eventPlayer == eventPlayer.isAlive()
    
    toxic_freeze()


rule "test block kill 5":
    @Event eachPlayer
    @Hero all
    @Condition raycast(vect((xNegative2 - xPositive2) / 2 + xPositive2, yBlockFreeze_1, (zNegative2 - zPositive2) / 4 + zBlockFreeze), vect(xNegative2, yBlockFreeze_1, (zNegative2 - zPositive2) / 4 + zBlockFreeze), eventPlayer, null, true).getPlayerHit() == true
    @Condition eventPlayer == eventPlayer.isAlive()
    
    toxic_freeze()


rule "test block kill 6":
    @Event eachPlayer
    @Hero all
    @Condition raycast(vect(xPositive2, yBlockFreeze_2, (zNegative2 - zPositive2) / 8 + zBlockFreeze), vect(xNegative2, yBlockFreeze_2, (zNegative2 - zPositive2) / 8 + zBlockFreeze), eventPlayer, null, true).getPlayerHit() == true
    @Condition eventPlayer == eventPlayer.isAlive()
    
    toxic_freeze()


def campingSpawn():
    @Name "iconCampingSpawn subroutine"
    
    damage(eventPlayer, null, 5.287)
    destroyIcon(eventPlayer.iconCampingSpawn)
    eventPlayer.setStatusEffect(null, Status.BURNING, 9999)
    createIcon(getAllPlayers(), eventPlayer, Icon.NO, IconReeval.VISIBILITY_AND_POSITION, Color.RED, true)
    eventPlayer.iconCampingSpawn = getLastCreatedEntity()
    destroyIcon(eventPlayer.iconCampingSpawn)
    wait(0.557)
    if RULE_CONDITION:
        goto RULE_START
    eventPlayer.clearStatusEffect(Status.BURNING)
    destroyIcon(eventPlayer.iconCampingSpawn)


rule "When someone is in a spawn (-xTeam2< >+xTeam1)":
    @Event eachPlayer
    @Team 1
    @Hero all
    @Condition isGameInProgress() == true
    @Condition getMatchTime() <= 190
    @Condition eventPlayer == eventPlayer.isAlive()
    @Condition (eventPlayer.getPosition().x <= varPosSpawnAreaNX or eventPlayer.getPosition().x >= varPosSpawnAreaPX) == true
    #@Condition (horizontalAngleTowards(eventPlayer, varAnglePosXp) or horizontalAngleTowards(eventPlayer, varAnglePosXn)) == true
    
    campingSpawn()


rule "When someone is in a spawn (-zTeam2< >+zTeam1)":
    @Event eachPlayer
    @Team 1
    @Hero all
    @Condition isGameInProgress() == true
    @Condition getMatchTime() <= 190
    @Condition eventPlayer == eventPlayer.isAlive()
    @Condition (eventPlayer.getPosition().z <= varPosSpawnAreaNZ or eventPlayer.getPosition().z >= varPosSpawnAreaPZ) == true
    #@Condition (horizontalAngleTowards(eventPlayer, varAnglePosZp) or horizontalAngleTowards(eventPlayer, varAnglePosZn)) <= angleDifference(-60, 120)
    #@Condition angleBetweenVectors(varAnglePosZp, eventPlayer) == true
    #@Condition (eventPlayer.getPosition().z <= varPosSpawnAreaNZ and horizontalAngleTowards(eventPlayer, vect(-151.269, -94.99, 91.922)) or eventPlayer.getPosition().z >= varPosSpawnAreaPZ and horizontalAngleTowards(eventPlayer, vect(-151.269, -94.99, 91.922))) == true
    
    campingSpawn()


rule "Start camera when spawn":
    @Event eachPlayer
    @Team 1
    @Hero all
    @Condition eventPlayer.hasSpawned() == true
    
    eventPlayer.stopCamera()
    eventPlayer.startCamera(raycast(eventPlayer, eventPlayer.getEyePosition() + worldVector(vect(0, -1.18, 0.055), eventPlayer, Transform.ROTATION) + Vector.UP * 1.5 + eventPlayer.getFacingDirection() * -1.8, null, eventPlayer, true).getHitPosition(), eventPlayer + eventPlayer.getFacingDirection() * 1000, 76.288)
    if eventPlayer.getCurrentHero() == Hero.ORISA or eventPlayer.getCurrentHero() == Hero.BASTION or eventPlayer.getCurrentHero() == Hero.SIGMA or eventPlayer.getCurrentHero() == Hero.REINHARDT:
        eventPlayer.startCamera(raycast(eventPlayer, eventPlayer.getEyePosition() + worldVector(vect(0, -1.18, -0.728), eventPlayer, Transform.ROTATION) + Vector.UP * 2.008 + eventPlayer.getFacingDirection() * -1.8, null, eventPlayer, true).getHitPosition(), eventPlayer + eventPlayer.getFacingDirection() * 1000, 76.288)


/*
rule "varWallDetection#0 = Detection Radius":
    @Event eachPlayer
    @Team 1
    @Hero reaper
    @Condition eventPlayer.getCurrentHero() == Hero.REAPER
    
    eventPlayer.varWallDetection[0] = 1
*/

/*
rule "varWallDetection#1 = 1 / 0 (on/off Wall)":
    @Event eachPlayer
    @Team 1
    @Hero reaper
    @Condition eventPlayer.getCurrentHero() == Hero.REAPER
    @Condition (isInLoS(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + angleToDirection(0, 0) * eventPlayer.varWallDetection[0], BarrierLos.PASS_THROUGH_BARRIERS) and isInLoS(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + angleToDirection(22.5, 0) * eventPlayer.varWallDetection[0], BarrierLos.PASS_THROUGH_BARRIERS) and isInLoS(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + angleToDirection(45, 0) * eventPlayer.varWallDetection[0], BarrierLos.PASS_THROUGH_BARRIERS) and isInLoS(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + angleToDirection(67.5, 0) * eventPlayer.varWallDetection[0], BarrierLos.PASS_THROUGH_BARRIERS) and isInLoS(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + angleToDirection(90, 0) * eventPlayer.varWallDetection[0], BarrierLos.PASS_THROUGH_BARRIERS) and isInLoS(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + angleToDirection(112.5, 0) * eventPlayer.varWallDetection[0], BarrierLos.PASS_THROUGH_BARRIERS) and isInLoS(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + angleToDirection(135, 0) * eventPlayer.varWallDetection[0], BarrierLos.PASS_THROUGH_BARRIERS) and isInLoS(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + angleToDirection(157.5, 0) * eventPlayer.varWallDetection[0], BarrierLos.PASS_THROUGH_BARRIERS) and isInLoS(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + angleToDirection(180, 0) * eventPlayer.varWallDetection[0], BarrierLos.PASS_THROUGH_BARRIERS) and isInLoS(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + angleToDirection(202.5, 0) * eventPlayer.varWallDetection[0], BarrierLos.PASS_THROUGH_BARRIERS) and isInLoS(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + angleToDirection(225, 0) * eventPlayer.varWallDetection[0], BarrierLos.PASS_THROUGH_BARRIERS) and isInLoS(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + angleToDirection(247.5, 0) * eventPlayer.varWallDetection[0], BarrierLos.PASS_THROUGH_BARRIERS) and isInLoS(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + angleToDirection(270, 0) * eventPlayer.varWallDetection[0], BarrierLos.PASS_THROUGH_BARRIERS) and isInLoS(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + angleToDirection(292.5, 0) * eventPlayer.varWallDetection[0], BarrierLos.PASS_THROUGH_BARRIERS) and isInLoS(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + angleToDirection(315, 0) * eventPlayer.varWallDetection[0], BarrierLos.PASS_THROUGH_BARRIERS) and isInLoS(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + angleToDirection(337.5, 0) * eventPlayer.varWallDetection[0], BarrierLos.PASS_THROUGH_BARRIERS)) == false
    
    eventPlayer.varWallDetection[1] = 1
    wait(0.016, Wait.RESTART_WHEN_TRUE)
    if RULE_CONDITION:
        goto RULE_START
    eventPlayer.varWallDetection[1] = 0
    if RULE_CONDITION:
        goto RULE_START
*/

/*
rule "varWallDetection#2 = Normal Vector of Detected Wall":
    @Event eachPlayer
    @Team 1
    @Hero reaper
    @Condition eventPlayer.getCurrentHero() == Hero.REAPER
    @Condition eventPlayer.varWallDetection[1] == 1
    @Condition eventPlayer.isMoving() == true
    
    if (isInLoS(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + angleToDirection(0, 0) * eventPlayer.varWallDetection[0], BarrierLos.PASS_THROUGH_BARRIERS) and isInLoS(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + angleToDirection(22.5, 0) * eventPlayer.varWallDetection[0], BarrierLos.PASS_THROUGH_BARRIERS) and isInLoS(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + angleToDirection(45, 0) * eventPlayer.varWallDetection[0], BarrierLos.PASS_THROUGH_BARRIERS) and isInLoS(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + angleToDirection(67.5, 0) * eventPlayer.varWallDetection[0], BarrierLos.PASS_THROUGH_BARRIERS) and isInLoS(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + angleToDirection(90, 0) * eventPlayer.varWallDetection[0], BarrierLos.PASS_THROUGH_BARRIERS) and isInLoS(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + angleToDirection(112.5, 0) * eventPlayer.varWallDetection[0], BarrierLos.PASS_THROUGH_BARRIERS) and isInLoS(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + angleToDirection(135, 0) * eventPlayer.varWallDetection[0], BarrierLos.PASS_THROUGH_BARRIERS) and isInLoS(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + angleToDirection(157.5, 0) * eventPlayer.varWallDetection[0], BarrierLos.PASS_THROUGH_BARRIERS)) == true:
        goto lbl_0
    if (isInLoS(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + angleToDirection(0, 0) * eventPlayer.varWallDetection[0], BarrierLos.PASS_THROUGH_BARRIERS) and isInLoS(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + angleToDirection(22.5, 0) * eventPlayer.varWallDetection[0], BarrierLos.PASS_THROUGH_BARRIERS) and isInLoS(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + angleToDirection(45, 0) * eventPlayer.varWallDetection[0], BarrierLos.PASS_THROUGH_BARRIERS) and isInLoS(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + angleToDirection(67.5, 0) * eventPlayer.varWallDetection[0], BarrierLos.PASS_THROUGH_BARRIERS)) == true:
        goto lbl_1
    if (isInLoS(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + angleToDirection(0, 0) * eventPlayer.varWallDetection[0], BarrierLos.PASS_THROUGH_BARRIERS) and isInLoS(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + angleToDirection(22.5, 0) * eventPlayer.varWallDetection[0], BarrierLos.PASS_THROUGH_BARRIERS)) == true:
        goto lbl_2
    if isInLoS(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + angleToDirection(0, 0) * eventPlayer.varWallDetection[0], BarrierLos.PASS_THROUGH_BARRIERS) == true:
        goto lbl_3
    eventPlayer.varWallDetection[2] = raycast(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + (angleToDirection(0, 0) * (eventPlayer.varWallDetection[0] + 1)), null, eventPlayer, true).getNormal()
    goto lbl_4
    lbl_3:
    if isInLoS(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + angleToDirection(22.5, 0) * eventPlayer.varWallDetection[0], BarrierLos.PASS_THROUGH_BARRIERS):
        goto lbl_5
    eventPlayer.varWallDetection[2] = raycast(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + (angleToDirection(22.5, 0) * (varWallDetection[0] + 1)), null, eventPlayer, true).getNormal()
    lbl_4:
    lbl_5:
    wait(0, Wait.RESTART_WHEN_TRUE)
    if RULE_CONDITION:
        goto RULE_START
    goto lbl_6
    lbl_2:
    if isInLoS(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + angleToDirection(45, 0) * eventPlayer.varWallDetection[0], BarrierLos.PASS_THROUGH_BARRIERS) == true:
        goto lbl_7
    eventPlayer.varWallDetection[2] = raycast(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + (angleToDirection(45, 0) * (eventPlayer.varWallDetection[0] + 1)), null, eventPlayer, true).getNormal()
    goto lbl_8
    lbl_7:
    if isInLoS(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + angleToDirection(67.5, 0) * eventPlayer.varWallDetection[0], BarrierLos.PASS_THROUGH_BARRIERS):
        goto lbl_9
    eventPlayer.varWallDetection[2] = raycast(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + (angleToDirection(67.5, 0) * (eventPlayer.varWallDetection[0] + 1)), null, eventPlayer, true).getNormal()
    lbl_8:
    lbl_9:
    wait(0, Wait.RESTART_WHEN_TRUE)
    if RULE_CONDITION:
        goto RULE_START
    goto lbl_10
    lbl_1:
    if (isInLoS(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + angleToDirection(90, 0) * eventPlayer.varWallDetection[0], BarrierLos.PASS_THROUGH_BARRIERS) and isInLoS(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + angleToDirection(112.5, 0) * eventPlayer.varWallDetection[0], BarrierLos.PASS_THROUGH_BARRIERS)) == true:
        goto lbl_11
    if isInLoS(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + angleToDirection(90, 0) * eventPlayer.varWallDetection[0], BarrierLos.PASS_THROUGH_BARRIERS) == true:
        goto lbl_12
    eventPlayer.varWallDetection[2] = raycast(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + (angleToDirection(90, 0) * (eventPlayer.varWallDetection[0] + 1)), null, eventPlayer, true).getNormal()
    goto lbl_13
    lbl_12:
    if isInLoS(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + angleToDirection(112.5, 0) * eventPlayer.varWallDetection[0], BarrierLos.PASS_THROUGH_BARRIERS):
        goto lbl_14
    eventPlayer.varWallDetection[2] = raycast(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + (angleToDirection(112.5, 0) * (eventPlayer.varWallDetection[0] + 1)), null, eventPlayer, true).getNormal()
    lbl_13:
    lbl_14:
    wait(0, Wait.RESTART_WHEN_TRUE)
    if RULE_CONDITION:
        goto RULE_START
    goto lbl_15
    lbl_11:
    if isInLoS(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + angleToDirection(135, 0) * eventPlayer.varWallDetection[0], BarrierLos.PASS_THROUGH_BARRIERS) == true:
        goto lbl_16
    eventPlayer.varWallDetection[2] = raycast(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + (angleToDirection(135, 0) * (eventPlayer.varWallDetection[0] + 1)), null, eventPlayer, true).getNormal()
    goto lbl_17
    lbl_16:
    if isInLoS(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + angleToDirection(157.5, 0) * eventPlayer.varWallDetection[0], BarrierLos.PASS_THROUGH_BARRIERS):
        goto lbl_18
    eventPlayer.varWallDetection[2] = raycast(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + (angleToDirection(157.5, 0) * (eventPlayer.varWallDetection[0] + 1)), null, eventPlayer, true).getNormal()
    lbl_17:
    lbl_18:
    wait(0, Wait.RESTART_WHEN_TRUE)
    if RULE_CONDITION:
        goto RULE_START
    goto lbl_19
    lbl_0:
    if (isInLoS(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + angleToDirection(180, 0) * eventPlayer.varWallDetection[0], BarrierLos.PASS_THROUGH_BARRIERS) and isInLoS(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + angleToDirection(202.5, 0) * eventPlayer.varWallDetection[0], BarrierLos.PASS_THROUGH_BARRIERS) and isInLoS(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + angleToDirection(225, 0) * eventPlayer.varWallDetection[0], BarrierLos.PASS_THROUGH_BARRIERS) and isInLoS(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + angleToDirection(247.5, 0) * eventPlayer.varWallDetection[0], BarrierLos.PASS_THROUGH_BARRIERS)) == true:
        goto lbl_20
    if (isInLoS(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + angleToDirection(180, 0) * eventPlayer.varWallDetection[0], BarrierLos.PASS_THROUGH_BARRIERS) and isInLoS(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + angleToDirection(202.5, 0) * eventPlayer.varWallDetection[0], BarrierLos.PASS_THROUGH_BARRIERS)) == true:
        goto lbl_21
    if isInLoS(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + angleToDirection(180, 0) * eventPlayer.varWallDetection[0], BarrierLos.PASS_THROUGH_BARRIERS) == true:
        goto lbl_22
    eventPlayer.varWallDetection[2] = raycast(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + (angleToDirection(180, 0) * (eventPlayer.varWallDetection[0] + 1)), null, eventPlayer, true).getNormal()
    goto lbl_23
    lbl_22:
    if isInLoS(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + angleToDirection(202.5, 0) * eventPlayer.varWallDetection[0], BarrierLos.PASS_THROUGH_BARRIERS):
        goto lbl_24
    eventPlayer.varWallDetection[2] = raycast(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + (angleToDirection(202.5, 0) * (eventPlayer.varWallDetection[0] + 1)), null, eventPlayer, true).getNormal()
    lbl_23:
    lbl_24:
    wait(0, Wait.RESTART_WHEN_TRUE)
    if RULE_CONDITION:
        goto RULE_START
    goto lbl_25
    lbl_21:
    if isInLoS(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + angleToDirection(225, 0) * eventPlayer.varWallDetection[0], BarrierLos.PASS_THROUGH_BARRIERS) == true:
        goto lbl_26
    eventPlayer.varWallDetection[2] = raycast(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + (angleToDirection(225, 0) * (eventPlayer.varWallDetection[0] + 1)), null, eventPlayer, true).getNormal()
    goto lbl_27
    lbl_26:
    if isInLoS(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + angleToDirection(247.5, 0) * eventPlayer.varWallDetection[0], BarrierLos.PASS_THROUGH_BARRIERS):
        goto lbl_28
    eventPlayer.varWallDetection[2] = raycast(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + (angleToDirection(247.5, 0) * (eventPlayer.varWallDetection[0] + 1)), null, eventPlayer, true).getNormal()
    lbl_27:
    lbl_28:
    wait(0, Wait.RESTART_WHEN_TRUE)
    if RULE_CONDITION:
        goto RULE_START
    goto lbl_29
    lbl_20:
    if (isInLoS(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + angleToDirection(270, 0) * eventPlayer.varWallDetection[0], BarrierLos.PASS_THROUGH_BARRIERS) and isInLoS(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + angleToDirection(292.5, 0) * eventPlayer.varWallDetection[0], BarrierLos.PASS_THROUGH_BARRIERS)) == true:
        goto lbl_30
    if isInLoS(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + angleToDirection(270, 0) * eventPlayer.varWallDetection[2], BarrierLos.PASS_THROUGH_BARRIERS) == true:
        goto lbl_31
    eventPlayer.varWallDetection[2] = raycast(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + (angleToDirection(270, 0) * (eventPlayer.varWallDetection[0] + 1)), null, eventPlayer, true).getNormal()
    goto lbl_32
    lbl_31:
    if isInLoS(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + angleToDirection(292.5, 0) * eventPlayer.varWallDetection[0], BarrierLos.PASS_THROUGH_BARRIERS):
        goto lbl_33
    eventPlayer.varWallDetection[2] = raycast(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + (angleToDirection(292.5, 0) * (eventPlayer.varWallDetection[0] + 1)), null, eventPlayer, true).getNormal()
    lbl_32:
    lbl_33:
    wait(0, Wait.RESTART_WHEN_TRUE)
    if RULE_CONDITION:
        goto RULE_START
    goto lbl_34
    lbl_30:
    if isInLoS(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + angleToDirection(315, 0) * eventPlayer.varWallDetection[0], BarrierLos.PASS_THROUGH_BARRIERS) == true:
        goto lbl_35
    eventPlayer.varWallDetection[2] = raycast(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + (angleToDirection(315, 0) * (eventPlayer.varWallDetection[0] + 1)), null, eventPlayer, true).getNormal()
    goto lbl_36
    lbl_35:
    if isInLoS(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + angleToDirection(337.5, 0) * eventPlayer.varWallDetection[0], BarrierLos.PASS_THROUGH_BARRIERS):
        goto lbl_37
    eventPlayer.varWallDetection[2] = raycast(eventPlayer.getEyePosition(), eventPlayer.getEyePosition() + (angleToDirection(337.5, 0) * (eventPlayer.varWallDetection[0] + 1)), null, eventPlayer, true).getNormal()
    lbl_10:
    lbl_15:
    lbl_19:
    lbl_25:
    lbl_29:
    lbl_34:
    lbl_36:
    lbl_37:
    wait(0, Wait.RESTART_WHEN_TRUE)
    if RULE_CONDITION:
        goto RULE_START
    lbl_6:
*/

/*
rule "###################################### DEBUG ######################################":
*/

/*
rule "Reload kill allie":
    @Event eachPlayer
    @Team 1
    @Hero all
    @Condition eventPlayer.isHoldingButton(Button.RELOAD) == true
    
    kill(getClosestPlayer(eventPlayer, Team.1), null)
*/

/*
rule "punch kill enemy":
    @Event eachPlayer
    @Team 1
    @Hero all
    @Condition eventPlayer.isHoldingButton(Button.MELEE) == true
    
    kill(getClosestPlayer(eventPlayer, Team.2), null)
*/

/*
rule "move forward bot":
    @Event eachPlayer
    @Hero all
    @Condition eventPlayer.isDummy() == true
    
    eventPlayer.startForcingThrottle(1, 2, 0, 0, 0, 0)
*/

/*
rule "HUD x, y, z + Angle°":
    @Event eachPlayer
    @Hero all
    
    hudHeader(eventPlayer, l"{0} {1} {2}".format(l"{0}: {1}".format("X", eventPlayer.getPosition().x), l"{0}:{1}".format("Y", eventPlayer.getPosition().y), l"{0}:{1}".format("Z", eventPlayer.getPosition().z)), HudPosition.TOP, 0.05, Color.WHITE, HudReeval.STRING, SpecVisibility.DEFAULT)
    hudHeader(eventPlayer, eventPlayer.getVerticalFacingAngle() * -1, HudPosition.TOP, 0.1, Color.GREEN, HudReeval.STRING, SpecVisibility.DEFAULT)
    hudHeader(eventPlayer, eventPlayer.getHorizontalFacingAngle(), HudPosition.TOP, 0.1, Color.RED, HudReeval.STRING, SpecVisibility.DEFAULT)
*/

/*
rule "BOT":
    createDummy(Hero.REINHARDT, Team.2, -1, vect(0, 0, 0), vect(0, 0, 0))
    createDummy(Hero.SIGMA, Team.2, -2, vect(0, 0, 0), vect(0, 0, 0))
    createDummy(Hero.ORISA, Team.1, 1, vect(31.697, 2.002, -6.637), vect(0, 0, 0))
    createDummy(Hero.BAPTISTE, Team.1, 2, vect(16.376, 1.098, -2.79), vect(0, 0, 0))
    createDummy(Hero.BAPTISTE, Team.1, 3, vect(0, 0, 0), vect(0, 0, 0))
    createDummy(Hero.ORISA, Team.1, 4, vect(16.376, 1.098, -2.79), vect(0, 0, 0))
    createDummy(Hero.DVA, Team.1, 5, vect(0, 0, 0), vect(0, 0, 0))
    createDummy(Hero.BRIGITTE, Team.1, 0, vect(22.772, 5.102, 11.226), vect(0, 0, 0))
*/

/*
rule "show dmg":
    @Event playerDealtDamage
    @Hero all
    @Condition eventPlayer.isDummy() != true
    @Condition eventWasCriticalHit != true
    
    destroyInWorldText(getLastCreatedText())
    createInWorldText(eventPlayer, round(eventDamage), raycast(eventPlayer, victim, getAllPlayers(), eventPlayer, true).getHitPosition(), 1.6, Clip.SURFACES, WorldTextReeval.VISIBILITY_AND_STRING, Color.WHITE, SpecVisibility.DEFAULT)
*/

/*
rule "show dmg if critical":
    @Event playerDealtDamage
    @Hero all
    @Condition eventPlayer.isDummy() != true
    @Condition eventWasCriticalHit == true
    
    destroyInWorldText(getLastCreatedText())
    createInWorldText(eventPlayer, round(eventDamage), raycast(eventPlayer, victim, getAllPlayers(), eventPlayer, true).getHitPosition(), 2.1, Clip.SURFACES, WorldTextReeval.VISIBILITY_AND_STRING, Color.LIME_GREEN, SpecVisibility.DEFAULT)
*/

/*
rule "HUD TEXT / DEBug":
    @Event eachPlayer
    @Team 1
    @Hero zenyatta
    @Condition eventPlayer.hasSpawned() == true
    
    hudText(eventPlayer, eventPlayer.varWallDetection[1], l"Wall", null, HudPosition.LEFT, 0, Color.YELLOW, Color.YELLOW, Color.WHITE, HudReeval.VISIBILITY_AND_STRING, SpecVisibility.DEFAULT)
    hudText(eventPlayer, eventPlayer.varWallDetection[2], l"Normal", null, HudPosition.LEFT, 0, Color.GREEN, Color.GREEN, Color.WHITE, HudReeval.VISIBILITY_AND_STRING, SpecVisibility.DEFAULT)
*/

/*
rule "SPAWN BOT WHERE I LOOK PLACE 1":
    @Event eachPlayer
    @Team 1
    @Hero all
    @Condition eventPlayer.isHoldingButton(Button.MELEE) == true
    
    createDummy(Hero.ORISA, Team.1, 1, eventPlayer, eventPlayer.getFacingDirection())
*/

/*
rule "REMOVE THE BOT PLACE 1":
    @Event eachPlayer
    @Team 1
    @Hero all
    @Condition eventPlayer.isHoldingButton(Button.PRIMARY_FIRE) == true
    
    destroyDummy(Team.1, 1)
*/

rule "|I|I|I|I|I|I|I|I|":
    @Event eachPlayer
    @Hero all
    @Condition eventPlayer.hasSpawned() == true
    
    eventPlayer.Bay = "{0}".format(eventPlayer)


rule "|I|I|I|I|I|I|I|I|I|":
    @Event eachPlayer
    @Hero all
    @Condition eventPlayer.Bay == "Oni"
    @Condition (eventPlayer.isHoldingButton(Button.CROUCH) and eventPlayer.isHoldingButton(Button.JUMP)) == true
    @Condition eventPlayer.Bay_Button == true
    
    wait(0.094, Wait.ABORT_WHEN_FALSE)
    destroyHudText(eventPlayer.Bay_Text)
    eventPlayer.Bay_Button = false


rule "|I|I|I|I|I|I|I|I|I|I|":
    @Event eachPlayer
    @Hero all
    @Condition eventPlayer.Bay == "Oni"
    @Condition (eventPlayer.isHoldingButton(Button.CROUCH) and eventPlayer.isHoldingButton(Button.JUMP)) == true
    @Condition eventPlayer.Bay_Button == false
    
    wait(0.094, Wait.ABORT_WHEN_FALSE)
    hudHeader(eventPlayer, "Bay, je t'aime ♥", HudPosition.RIGHT, 99, Color.LIME_GREEN, HudReeval.VISIBILITY_AND_STRING, SpecVisibility.NEVER)
    eventPlayer.Bay_Text = getLastCreatedText()
    eventPlayer.Bay_Button = true


rule "|I|I|I|I|I|I|I|I|I|I||I||I||I|":
    @Event eachPlayer
    @Hero all
    @Condition eventPlayer.hasSpawned() == true
    
    eventPlayer.Phil = "{0}".format(eventPlayer)


rule "|I||I||I||I||I||I||I||I||I||I||I||I||I||I||I|":
    @Event eachPlayer
    @Hero all
    @Condition eventPlayer.Phil == "Philmer"
    @Condition (eventPlayer.isHoldingButton(Button.CROUCH) and eventPlayer.isHoldingButton(Button.JUMP)) == true
    @Condition eventPlayer.Phil_Button == true
    
    wait(0.094, Wait.ABORT_WHEN_FALSE)
    destroyHudText(eventPlayer.Phil_Text)
    eventPlayer.Phil_Button = false


rule "|I||I||I||I||I||I||I||I||I||I||I||I||I||I||I||I||I|":
    @Event eachPlayer
    @Hero all
    @Condition eventPlayer.Phil == "Philmer"
    @Condition (eventPlayer.isHoldingButton(Button.CROUCH) and eventPlayer.isHoldingButton(Button.JUMP)) == true
    @Condition eventPlayer.Phil_Button == false
    
    wait(0.094, Wait.ABORT_WHEN_FALSE)
    hudHeader(eventPlayer, "Oni's Slave ♥", HudPosition.RIGHT, 99, Color.LIME_GREEN, HudReeval.VISIBILITY_AND_STRING, SpecVisibility.NEVER)
    eventPlayer.Phil_Text = getLastCreatedText()
    eventPlayer.Phil_Button = true


